diff --git a/node_modules/@material/material-color-utilities/.DS_Store b/node_modules/@material/material-color-utilities/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/node_modules/@material/material-color-utilities/.DS_Store differ
diff --git a/node_modules/@material/material-color-utilities/dist/blend/blend.d.ts b/node_modules/@material/material-color-utilities/dist/blend/blend.d.ts
deleted file mode 100644
index bc97aa8..0000000
--- a/node_modules/@material/material-color-utilities/dist/blend/blend.d.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Functions for blending in HCT and CAM16.
- */
-export declare class Blend {
-    /**
-     * Blend the design color's HCT hue towards the key color's HCT
-     * hue, in a way that leaves the original color recognizable and
-     * recognizably shifted towards the key color.
-     *
-     * @param designColor ARGB representation of an arbitrary color.
-     * @param sourceColor ARGB representation of the main theme color.
-     * @return The design color with a hue shifted towards the
-     * system's color, a slightly warmer/cooler variant of the design
-     * color's hue.
-     */
-    static harmonize(designColor: number, sourceColor: number): number;
-    /**
-     * Blends hue from one color into another. The chroma and tone of
-     * the original color are maintained.
-     *
-     * @param from ARGB representation of color
-     * @param to ARGB representation of color
-     * @param amount how much blending to perform; 0.0 >= and <= 1.0
-     * @return from, with a hue blended towards to. Chroma and tone
-     * are constant.
-     */
-    static hctHue(from: number, to: number, amount: number): number;
-    /**
-     * Blend in CAM16-UCS space.
-     *
-     * @param from ARGB representation of color
-     * @param to ARGB representation of color
-     * @param amount how much blending to perform; 0.0 >= and <= 1.0
-     * @return from, blended towards to. Hue, chroma, and tone will
-     * change.
-     */
-    static cam16Ucs(from: number, to: number, amount: number): number;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/blend/blend.js b/node_modules/@material/material-color-utilities/dist/blend/blend.js
deleted file mode 100644
index 0ca678c..0000000
--- a/node_modules/@material/material-color-utilities/dist/blend/blend.js
+++ /dev/null
@@ -1,92 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-// This file is automatically generated. Do not modify it.
-import { Cam16 } from '../hct/cam16';
-import { Hct } from '../hct/hct';
-import * as colorUtils from '../utils/color_utils';
-import * as mathUtils from '../utils/math_utils';
-// libmonet is designed to have a consistent API across platforms
-// and modular components that can be moved around easily. Using a class as a
-// namespace facilitates this.
-//
-// tslint:disable:class-as-namespace
-/**
- * Functions for blending in HCT and CAM16.
- */
-export class Blend {
-    /**
-     * Blend the design color's HCT hue towards the key color's HCT
-     * hue, in a way that leaves the original color recognizable and
-     * recognizably shifted towards the key color.
-     *
-     * @param designColor ARGB representation of an arbitrary color.
-     * @param sourceColor ARGB representation of the main theme color.
-     * @return The design color with a hue shifted towards the
-     * system's color, a slightly warmer/cooler variant of the design
-     * color's hue.
-     */
-    static harmonize(designColor, sourceColor) {
-        const fromHct = Hct.fromInt(designColor);
-        const toHct = Hct.fromInt(sourceColor);
-        const differenceDegrees = mathUtils.differenceDegrees(fromHct.hue, toHct.hue);
-        const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);
-        const outputHue = mathUtils.sanitizeDegreesDouble(fromHct.hue +
-            rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue));
-        return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();
-    }
-    /**
-     * Blends hue from one color into another. The chroma and tone of
-     * the original color are maintained.
-     *
-     * @param from ARGB representation of color
-     * @param to ARGB representation of color
-     * @param amount how much blending to perform; 0.0 >= and <= 1.0
-     * @return from, with a hue blended towards to. Chroma and tone
-     * are constant.
-     */
-    static hctHue(from, to, amount) {
-        const ucs = Blend.cam16Ucs(from, to, amount);
-        const ucsCam = Cam16.fromInt(ucs);
-        const fromCam = Cam16.fromInt(from);
-        const blended = Hct.from(ucsCam.hue, fromCam.chroma, colorUtils.lstarFromArgb(from));
-        return blended.toInt();
-    }
-    /**
-     * Blend in CAM16-UCS space.
-     *
-     * @param from ARGB representation of color
-     * @param to ARGB representation of color
-     * @param amount how much blending to perform; 0.0 >= and <= 1.0
-     * @return from, blended towards to. Hue, chroma, and tone will
-     * change.
-     */
-    static cam16Ucs(from, to, amount) {
-        const fromCam = Cam16.fromInt(from);
-        const toCam = Cam16.fromInt(to);
-        const fromJ = fromCam.jstar;
-        const fromA = fromCam.astar;
-        const fromB = fromCam.bstar;
-        const toJ = toCam.jstar;
-        const toA = toCam.astar;
-        const toB = toCam.bstar;
-        const jstar = fromJ + (toJ - fromJ) * amount;
-        const astar = fromA + (toA - fromA) * amount;
-        const bstar = fromB + (toB - fromB) * amount;
-        return Cam16.fromUcs(jstar, astar, bstar).toInt();
-    }
-}
-//# sourceMappingURL=blend.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/blend/blend.js.map b/node_modules/@material/material-color-utilities/dist/blend/blend.js.map
deleted file mode 100644
index 566f9e0..0000000
--- a/node_modules/@material/material-color-utilities/dist/blend/blend.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"blend.js","sourceRoot":"","sources":["../../blend/blend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport {Cam16} from '../hct/cam16';\nimport {Hct} from '../hct/hct';\nimport * as colorUtils from '../utils/color_utils';\nimport * as mathUtils from '../utils/math_utils';\n\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Functions for blending in HCT and CAM16.\n */\nexport class Blend {\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT\n   * hue, in a way that leaves the original color recognizable and\n   * recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the\n   * system's color, a slightly warmer/cooler variant of the design\n   * color's hue.\n   */\n  static harmonize(designColor: number, sourceColor: number): number {\n    const fromHct = Hct.fromInt(designColor);\n    const toHct = Hct.fromInt(sourceColor);\n    const differenceDegrees =\n        mathUtils.differenceDegrees(fromHct.hue, toHct.hue);\n    const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n    const outputHue = mathUtils.sanitizeDegreesDouble(\n        fromHct.hue +\n        rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue));\n    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n  }\n\n  /**\n   * Blends hue from one color into another. The chroma and tone of\n   * the original color are maintained.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, with a hue blended towards to. Chroma and tone\n   * are constant.\n   */\n  static hctHue(from: number, to: number, amount: number): number {\n    const ucs = Blend.cam16Ucs(from, to, amount);\n    const ucsCam = Cam16.fromInt(ucs);\n    const fromCam = Cam16.fromInt(from);\n    const blended = Hct.from(\n        ucsCam.hue,\n        fromCam.chroma,\n        colorUtils.lstarFromArgb(from),\n    );\n    return blended.toInt();\n  }\n\n  /**\n   * Blend in CAM16-UCS space.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, blended towards to. Hue, chroma, and tone will\n   * change.\n   */\n  static cam16Ucs(from: number, to: number, amount: number): number {\n    const fromCam = Cam16.fromInt(from);\n    const toCam = Cam16.fromInt(to);\n    const fromJ = fromCam.jstar;\n    const fromA = fromCam.astar;\n    const fromB = fromCam.bstar;\n    const toJ = toCam.jstar;\n    const toA = toCam.astar;\n    const toB = toCam.bstar;\n    const jstar = fromJ + (toJ - fromJ) * amount;\n    const astar = fromA + (toA - fromA) * amount;\n    const bstar = fromB + (toB - fromB) * amount;\n    return Cam16.fromUcs(jstar, astar, bstar).toInt();\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/blend/blend_test.d.ts b/node_modules/@material/material-color-utilities/dist/blend/blend_test.d.ts
deleted file mode 100644
index 9f807ae..0000000
--- a/node_modules/@material/material-color-utilities/dist/blend/blend_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless requiRED by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/blend/blend_test.js b/node_modules/@material/material-color-utilities/dist/blend/blend_test.js
deleted file mode 100644
index 0b2cca5..0000000
--- a/node_modules/@material/material-color-utilities/dist/blend/blend_test.js
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless requiRED by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import { customMatchers } from '../utils/test_utils';
-import { Blend } from './blend';
-beforeEach(() => {
-    jasmine.addMatchers(customMatchers);
-});
-const RED = 0xffff0000;
-const BLUE = 0xff0000ff;
-const GREEN = 0xff00ff00;
-const YELLOW = 0xffffff00;
-describe('harmonize', () => {
-    it('redToBlue', () => {
-        const answer = Blend.harmonize(RED, BLUE);
-        expect(answer).matchesColor(0xffFB0057);
-    });
-    it('redToGreen', () => {
-        const answer = Blend.harmonize(RED, GREEN);
-        expect(answer).matchesColor(0xffD85600);
-    });
-    it('redToYellow', () => {
-        const answer = Blend.harmonize(RED, YELLOW);
-        expect(answer).matchesColor(0xffD85600);
-    });
-    it('blueToGreen', () => {
-        const answer = Blend.harmonize(BLUE, GREEN);
-        expect(answer).matchesColor(0xff0047A3);
-    });
-    it('blueToRed', () => {
-        const answer = Blend.harmonize(BLUE, RED);
-        expect(answer).matchesColor(0xff5700DC);
-    });
-    it('blueToYellow', () => {
-        const answer = Blend.harmonize(BLUE, YELLOW);
-        expect(answer).matchesColor(0xff0047A3);
-    });
-    it('greenToBlue', () => {
-        const answer = Blend.harmonize(GREEN, BLUE);
-        expect(answer).matchesColor(0xff00FC94);
-    });
-    it('greenToRed', () => {
-        const answer = Blend.harmonize(GREEN, RED);
-        expect(answer).matchesColor(0xffB1F000);
-    });
-    it('greenToYellow', () => {
-        const answer = Blend.harmonize(GREEN, YELLOW);
-        expect(answer).matchesColor(0xffB1F000);
-    });
-    it('yellowToBlue', () => {
-        const answer = Blend.harmonize(YELLOW, BLUE);
-        expect(answer).matchesColor(0xffEBFFBA);
-    });
-    it('yellowToGreen', () => {
-        const answer = Blend.harmonize(YELLOW, GREEN);
-        expect(answer).matchesColor(0xffEBFFBA);
-    });
-    it('yellowToRed', () => {
-        const answer = Blend.harmonize(YELLOW, RED);
-        expect(answer).matchesColor(0xffFFF6E3);
-    });
-});
-//# sourceMappingURL=blend_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/blend/blend_test.js.map b/node_modules/@material/material-color-utilities/dist/blend/blend_test.js.map
deleted file mode 100644
index 0477d1a..0000000
--- a/node_modules/@material/material-color-utilities/dist/blend/blend_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"blend_test.js","sourceRoot":"","sources":["../../blend/blend_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless requiRED by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport {customMatchers} from '../utils/test_utils';\n\nimport {Blend} from './blend';\n\nbeforeEach(() => {\n  jasmine.addMatchers(customMatchers);\n});\n\nconst RED = 0xffff0000;\nconst BLUE = 0xff0000ff;\nconst GREEN = 0xff00ff00;\nconst YELLOW = 0xffffff00;\n\ndescribe('harmonize', () => {\n  it('redToBlue', () => {\n    const answer = Blend.harmonize(RED, BLUE);\n    expect(answer).matchesColor(0xffFB0057);\n  });\n\n  it('redToGreen', () => {\n    const answer = Blend.harmonize(RED, GREEN);\n    expect(answer).matchesColor(0xffD85600);\n  });\n\n  it('redToYellow', () => {\n    const answer = Blend.harmonize(RED, YELLOW);\n    expect(answer).matchesColor(0xffD85600);\n  });\n\n  it('blueToGreen', () => {\n    const answer = Blend.harmonize(BLUE, GREEN);\n    expect(answer).matchesColor(0xff0047A3);\n  });\n\n  it('blueToRed', () => {\n    const answer = Blend.harmonize(BLUE, RED);\n    expect(answer).matchesColor(0xff5700DC);\n  });\n\n  it('blueToYellow', () => {\n    const answer = Blend.harmonize(BLUE, YELLOW);\n    expect(answer).matchesColor(0xff0047A3);\n  });\n\n  it('greenToBlue', () => {\n    const answer = Blend.harmonize(GREEN, BLUE);\n    expect(answer).matchesColor(0xff00FC94);\n  });\n\n  it('greenToRed', () => {\n    const answer = Blend.harmonize(GREEN, RED);\n    expect(answer).matchesColor(0xffB1F000);\n  });\n\n  it('greenToYellow', () => {\n    const answer = Blend.harmonize(GREEN, YELLOW);\n    expect(answer).matchesColor(0xffB1F000);\n  });\n\n  it('yellowToBlue', () => {\n    const answer = Blend.harmonize(YELLOW, BLUE);\n    expect(answer).matchesColor(0xffEBFFBA);\n  });\n\n  it('yellowToGreen', () => {\n    const answer = Blend.harmonize(YELLOW, GREEN);\n    expect(answer).matchesColor(0xffEBFFBA);\n  });\n\n  it('yellowToRed', () => {\n    const answer = Blend.harmonize(YELLOW, RED);\n    expect(answer).matchesColor(0xffFFF6E3);\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/cam16.d.ts b/node_modules/@material/material-color-utilities/dist/hct/cam16.d.ts
deleted file mode 100644
index 1344bb6..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/cam16.d.ts
+++ /dev/null
@@ -1,129 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { ViewingConditions } from './viewing_conditions';
-/**
- * CAM16, a color appearance model. Colors are not just defined by their hex
- * code, but rather, a hex code and viewing conditions.
- *
- * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,
- * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
- * specification, and should be used when measuring distances between colors.
- *
- * In traditional color spaces, a color can be identified solely by the
- * observer's measurement of the color. Color appearance models such as CAM16
- * also use information about the environment where the color was
- * observed, known as the viewing conditions.
- *
- * For example, white under the traditional assumption of a midday sun white
- * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
- * hue 203, chroma 3, lightness 100)
- */
-export declare class Cam16 {
-    readonly hue: number;
-    readonly chroma: number;
-    readonly j: number;
-    readonly q: number;
-    readonly m: number;
-    readonly s: number;
-    readonly jstar: number;
-    readonly astar: number;
-    readonly bstar: number;
-    /**
-     * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in
-     * the following combinations:
-     *      -  {j or q} and {c, m, or s} and hue
-     *      - jstar, astar, bstar
-     * Prefer using a static method that constructs from 3 of those dimensions.
-     * This constructor is intended for those methods to use to return all
-     * possible dimensions.
-     *
-     * @param hue
-     * @param chroma informally, colorfulness / color intensity. like saturation
-     *     in HSL, except perceptually accurate.
-     * @param j lightness
-     * @param q brightness; ratio of lightness to white point's lightness
-     * @param m colorfulness
-     * @param s saturation; ratio of chroma to white point's chroma
-     * @param jstar CAM16-UCS J coordinate
-     * @param astar CAM16-UCS a coordinate
-     * @param bstar CAM16-UCS b coordinate
-     */
-    constructor(hue: number, chroma: number, j: number, q: number, m: number, s: number, jstar: number, astar: number, bstar: number);
-    /**
-     * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,
-     * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
-     * specification, and is used to measure distances between colors.
-     */
-    distance(other: Cam16): number;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return CAM16 color, assuming the color was viewed in default viewing
-     *     conditions.
-     */
-    static fromInt(argb: number): Cam16;
-    /**
-     * @param argb ARGB representation of a color.
-     * @param viewingConditions Information about the environment where the color
-     *     was observed.
-     * @return CAM16 color.
-     */
-    static fromIntInViewingConditions(argb: number, viewingConditions: ViewingConditions): Cam16;
-    /**
-     * @param j CAM16 lightness
-     * @param c CAM16 chroma
-     * @param h CAM16 hue
-     */
-    static fromJch(j: number, c: number, h: number): Cam16;
-    /**
-     * @param j CAM16 lightness
-     * @param c CAM16 chroma
-     * @param h CAM16 hue
-     * @param viewingConditions Information about the environment where the color
-     *     was observed.
-     */
-    static fromJchInViewingConditions(j: number, c: number, h: number, viewingConditions: ViewingConditions): Cam16;
-    /**
-     * @param jstar CAM16-UCS lightness.
-     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the Y axis.
-     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the X axis.
-     */
-    static fromUcs(jstar: number, astar: number, bstar: number): Cam16;
-    /**
-     * @param jstar CAM16-UCS lightness.
-     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the Y axis.
-     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the X axis.
-     * @param viewingConditions Information about the environment where the color
-     *     was observed.
-     */
-    static fromUcsInViewingConditions(jstar: number, astar: number, bstar: number, viewingConditions: ViewingConditions): Cam16;
-    /**
-     *  @return ARGB representation of color, assuming the color was viewed in
-     *     default viewing conditions, which are near-identical to the default
-     *     viewing conditions for sRGB.
-     */
-    toInt(): number;
-    /**
-     * @param viewingConditions Information about the environment where the color
-     *     will be viewed.
-     * @return ARGB representation of color
-     */
-    viewed(viewingConditions: ViewingConditions): number;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/hct/cam16.js b/node_modules/@material/material-color-utilities/dist/hct/cam16.js
deleted file mode 100644
index 00ab661..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/cam16.js
+++ /dev/null
@@ -1,262 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as utils from '../utils/color_utils';
-import * as math from '../utils/math_utils';
-import { ViewingConditions } from './viewing_conditions';
-/**
- * CAM16, a color appearance model. Colors are not just defined by their hex
- * code, but rather, a hex code and viewing conditions.
- *
- * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,
- * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
- * specification, and should be used when measuring distances between colors.
- *
- * In traditional color spaces, a color can be identified solely by the
- * observer's measurement of the color. Color appearance models such as CAM16
- * also use information about the environment where the color was
- * observed, known as the viewing conditions.
- *
- * For example, white under the traditional assumption of a midday sun white
- * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
- * hue 203, chroma 3, lightness 100)
- */
-export class Cam16 {
-    /**
-     * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in
-     * the following combinations:
-     *      -  {j or q} and {c, m, or s} and hue
-     *      - jstar, astar, bstar
-     * Prefer using a static method that constructs from 3 of those dimensions.
-     * This constructor is intended for those methods to use to return all
-     * possible dimensions.
-     *
-     * @param hue
-     * @param chroma informally, colorfulness / color intensity. like saturation
-     *     in HSL, except perceptually accurate.
-     * @param j lightness
-     * @param q brightness; ratio of lightness to white point's lightness
-     * @param m colorfulness
-     * @param s saturation; ratio of chroma to white point's chroma
-     * @param jstar CAM16-UCS J coordinate
-     * @param astar CAM16-UCS a coordinate
-     * @param bstar CAM16-UCS b coordinate
-     */
-    constructor(hue, chroma, j, q, m, s, jstar, astar, bstar) {
-        this.hue = hue;
-        this.chroma = chroma;
-        this.j = j;
-        this.q = q;
-        this.m = m;
-        this.s = s;
-        this.jstar = jstar;
-        this.astar = astar;
-        this.bstar = bstar;
-    }
-    /**
-     * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,
-     * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
-     * specification, and is used to measure distances between colors.
-     */
-    distance(other) {
-        const dJ = this.jstar - other.jstar;
-        const dA = this.astar - other.astar;
-        const dB = this.bstar - other.bstar;
-        const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);
-        const dE = 1.41 * Math.pow(dEPrime, 0.63);
-        return dE;
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return CAM16 color, assuming the color was viewed in default viewing
-     *     conditions.
-     */
-    static fromInt(argb) {
-        return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @param viewingConditions Information about the environment where the color
-     *     was observed.
-     * @return CAM16 color.
-     */
-    static fromIntInViewingConditions(argb, viewingConditions) {
-        const red = (argb & 0x00ff0000) >> 16;
-        const green = (argb & 0x0000ff00) >> 8;
-        const blue = (argb & 0x000000ff);
-        const redL = utils.linearized(red);
-        const greenL = utils.linearized(green);
-        const blueL = utils.linearized(blue);
-        const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;
-        const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;
-        const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;
-        const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;
-        const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;
-        const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;
-        const rD = viewingConditions.rgbD[0] * rC;
-        const gD = viewingConditions.rgbD[1] * gC;
-        const bD = viewingConditions.rgbD[2] * bC;
-        const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);
-        const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);
-        const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);
-        const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);
-        const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);
-        const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);
-        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;
-        const b = (rA + gA - 2.0 * bA) / 9.0;
-        const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;
-        const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;
-        const atan2 = Math.atan2(b, a);
-        const atanDegrees = (atan2 * 180.0) / Math.PI;
-        const hue = atanDegrees < 0 ? atanDegrees + 360.0 :
-            atanDegrees >= 360 ? atanDegrees - 360.0 :
-                atanDegrees;
-        const hueRadians = (hue * Math.PI) / 180.0;
-        const ac = p2 * viewingConditions.nbb;
-        const j = 100.0 *
-            Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);
-        const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *
-            (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;
-        const huePrime = hue < 20.14 ? hue + 360 : hue;
-        const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);
-        const p1 = (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;
-        const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);
-        const alpha = Math.pow(t, 0.9) *
-            Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
-        const c = alpha * Math.sqrt(j / 100.0);
-        const m = c * viewingConditions.fLRoot;
-        const s = 50.0 *
-            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));
-        const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);
-        const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);
-        const astar = mstar * Math.cos(hueRadians);
-        const bstar = mstar * Math.sin(hueRadians);
-        return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);
-    }
-    /**
-     * @param j CAM16 lightness
-     * @param c CAM16 chroma
-     * @param h CAM16 hue
-     */
-    static fromJch(j, c, h) {
-        return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);
-    }
-    /**
-     * @param j CAM16 lightness
-     * @param c CAM16 chroma
-     * @param h CAM16 hue
-     * @param viewingConditions Information about the environment where the color
-     *     was observed.
-     */
-    static fromJchInViewingConditions(j, c, h, viewingConditions) {
-        const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *
-            (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;
-        const m = c * viewingConditions.fLRoot;
-        const alpha = c / Math.sqrt(j / 100.0);
-        const s = 50.0 *
-            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));
-        const hueRadians = (h * Math.PI) / 180.0;
-        const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);
-        const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);
-        const astar = mstar * Math.cos(hueRadians);
-        const bstar = mstar * Math.sin(hueRadians);
-        return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);
-    }
-    /**
-     * @param jstar CAM16-UCS lightness.
-     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the Y axis.
-     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the X axis.
-     */
-    static fromUcs(jstar, astar, bstar) {
-        return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);
-    }
-    /**
-     * @param jstar CAM16-UCS lightness.
-     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the Y axis.
-     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
-     *     coordinate on the X axis.
-     * @param viewingConditions Information about the environment where the color
-     *     was observed.
-     */
-    static fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {
-        const a = astar;
-        const b = bstar;
-        const m = Math.sqrt(a * a + b * b);
-        const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;
-        const c = M / viewingConditions.fLRoot;
-        let h = Math.atan2(b, a) * (180.0 / Math.PI);
-        if (h < 0.0) {
-            h += 360.0;
-        }
-        const j = jstar / (1 - (jstar - 100) * 0.007);
-        return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);
-    }
-    /**
-     *  @return ARGB representation of color, assuming the color was viewed in
-     *     default viewing conditions, which are near-identical to the default
-     *     viewing conditions for sRGB.
-     */
-    toInt() {
-        return this.viewed(ViewingConditions.DEFAULT);
-    }
-    /**
-     * @param viewingConditions Information about the environment where the color
-     *     will be viewed.
-     * @return ARGB representation of color
-     */
-    viewed(viewingConditions) {
-        const alpha = this.chroma === 0.0 || this.j === 0.0 ?
-            0.0 :
-            this.chroma / Math.sqrt(this.j / 100.0);
-        const t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);
-        const hRad = (this.hue * Math.PI) / 180.0;
-        const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);
-        const ac = viewingConditions.aw *
-            Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);
-        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;
-        const p2 = ac / viewingConditions.nbb;
-        const hSin = Math.sin(hRad);
-        const hCos = Math.cos(hRad);
-        const gamma = (23.0 * (p2 + 0.305) * t) /
-            (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);
-        const a = gamma * hCos;
-        const b = gamma * hSin;
-        const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;
-        const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;
-        const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;
-        const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));
-        const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *
-            Math.pow(rCBase, 1.0 / 0.42);
-        const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));
-        const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *
-            Math.pow(gCBase, 1.0 / 0.42);
-        const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));
-        const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *
-            Math.pow(bCBase, 1.0 / 0.42);
-        const rF = rC / viewingConditions.rgbD[0];
-        const gF = gC / viewingConditions.rgbD[1];
-        const bF = bC / viewingConditions.rgbD[2];
-        const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;
-        const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;
-        const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;
-        const argb = utils.argbFromXyz(x, y, z);
-        return argb;
-    }
-}
-//# sourceMappingURL=cam16.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/cam16.js.map b/node_modules/@material/material-color-utilities/dist/hct/cam16.js.map
deleted file mode 100644
index 6d8c54d..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/cam16.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"cam16.js","sourceRoot":"","sources":["../../hct/cam16.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAC9C,OAAO,KAAK,IAAI,MAAM,qBAAqB,CAAC;AAE5C,OAAO,EAAC,iBAAiB,EAAC,MAAM,sBAAsB,CAAC;AAEvD;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,OAAO,KAAK;IAChB;;;;;;;;;;;;;;;;;;;OAmBG;IACH,YACa,GAAW,EAAW,MAAc,EAAW,CAAS,EACxD,CAAS,EAAW,CAAS,EAAW,CAAS,EACjD,KAAa,EAAW,KAAa,EAAW,KAAa;QAF7D,QAAG,GAAH,GAAG,CAAQ;QAAW,WAAM,GAAN,MAAM,CAAQ;QAAW,MAAC,GAAD,CAAC,CAAQ;QACxD,MAAC,GAAD,CAAC,CAAQ;QAAW,MAAC,GAAD,CAAC,CAAQ;QAAW,MAAC,GAAD,CAAC,CAAQ;QACjD,UAAK,GAAL,KAAK,CAAQ;QAAW,UAAK,GAAL,KAAK,CAAQ;QAAW,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE9E;;;;OAIG;IACH,QAAQ,CAAC,KAAY;QACnB,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACpC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACpC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QACvD,MAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,OAAO,KAAK,CAAC,0BAA0B,CAAC,IAAI,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,0BAA0B,CAC7B,IAAY,EAAE,iBAAoC;QACpD,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,UAAU,GAAG,IAAI,GAAG,UAAU,GAAG,MAAM,GAAG,UAAU,GAAG,KAAK,CAAC;QACvE,MAAM,CAAC,GAAG,MAAM,GAAG,IAAI,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;QAC3D,MAAM,CAAC,GAAG,UAAU,GAAG,IAAI,GAAG,UAAU,GAAG,MAAM,GAAG,UAAU,GAAG,KAAK,CAAC;QAEvE,MAAM,EAAE,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;QACtD,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;QACvD,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;QAEvD,MAAM,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC1C,MAAM,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAC1C,MAAM,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAE1C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1E,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1E,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;QAE1E,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QAC3D,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QAC3D,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QAE3D,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;QAC/C,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;QACrD,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;QAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,MAAM,WAAW,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;QAC9C,MAAM,GAAG,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;YAC/C,WAAW,IAAI,GAAG,CAAM,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;gBACrB,WAAW,CAAC;QAC1C,MAAM,UAAU,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;QAE3C,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,GAAG,CAAC;QACtC,MAAM,CAAC,GAAG,KAAK;YACX,IAAI,CAAC,GAAG,CACJ,EAAE,GAAG,iBAAiB,CAAC,EAAE,EACzB,iBAAiB,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;YACxD,CAAC,iBAAiB,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC;QAC5D,MAAM,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC/C,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;QACzE,MAAM,EAAE,GACJ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,iBAAiB,CAAC,EAAE,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAC3E,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QACxD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC;QACvC,MAAM,CAAC,GAAG,IAAI;YACV,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;QAC5E,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QAC9D,MAAM,KAAK,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1D,MAAM,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAE3C,OAAO,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,OAAO,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;QAC5C,OAAO,KAAK,CAAC,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC9E,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,0BAA0B,CAC7B,CAAS,EAAE,CAAS,EAAE,CAAS,EAC/B,iBAAoC;QACtC,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;YACxD,CAAC,iBAAiB,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC;QACvC,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,IAAI;YACV,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;QAC5E,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;QACzC,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QAC9D,MAAM,KAAK,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1D,MAAM,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3C,OAAO,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,OAAO,CAAC,KAAa,EAAE,KAAa,EAAE,KAAa;QACxD,OAAO,KAAK,CAAC,0BAA0B,CACnC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;OAQG;IACH,MAAM,CAAC,0BAA0B,CAC7B,KAAa,EAAE,KAAa,EAAE,KAAa,EAC3C,iBAAoC;QACtC,MAAM,CAAC,GAAG,KAAK,CAAC;QAChB,MAAM,CAAC,GAAG,KAAK,CAAC;QAChB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC;QAChD,MAAM,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,GAAG,GAAG,EAAE;YACX,CAAC,IAAI,KAAK,CAAC;SACZ;QACD,MAAM,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;QAC9C,OAAO,KAAK,CAAC,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;IACtE,CAAC;IAED;;;;OAIG;IACH,KAAK;QACH,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,iBAAoC;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;YACjD,GAAG,CAAC,CAAC;YACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QAE5C,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CACd,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAClE,GAAG,GAAG,GAAG,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;QAE1C,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;QACjD,MAAM,EAAE,GAAG,iBAAiB,CAAC,EAAE;YAC3B,IAAI,CAAC,GAAG,CACJ,IAAI,CAAC,CAAC,GAAG,KAAK,EAAE,GAAG,GAAG,iBAAiB,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,EAAE,GACJ,IAAI,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,iBAAiB,CAAC,EAAE,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAC3E,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAEtC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE5B,MAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC;QACvB,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC;QACvB,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;QACzD,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;QACzD,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;QAE1D,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,iBAAiB,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,iBAAiB,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,iBAAiB,CAAC,EAAE,CAAC;YACvD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE1C,MAAM,CAAC,GAAG,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,EAAE,CAAC;QAC9D,MAAM,CAAC,GAAG,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,EAAE,CAAC;QAC9D,MAAM,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,EAAE,GAAG,UAAU,GAAG,EAAE,CAAC;QAE/D,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n\nimport {ViewingConditions} from './viewing_conditions';\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  constructor(\n      readonly hue: number, readonly chroma: number, readonly j: number,\n      readonly q: number, readonly m: number, readonly s: number,\n      readonly jstar: number, readonly astar: number, readonly bstar: number) {}\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  distance(other: Cam16): number {\n    const dJ = this.jstar - other.jstar;\n    const dA = this.astar - other.astar;\n    const dB = this.bstar - other.bstar;\n    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n    const dE = 1.41 * Math.pow(dEPrime, 0.63);\n    return dE;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return CAM16 color, assuming the color was viewed in default viewing\n   *     conditions.\n   */\n  static fromInt(argb: number): Cam16 {\n    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   * @return CAM16 color.\n   */\n  static fromIntInViewingConditions(\n      argb: number, viewingConditions: ViewingConditions): Cam16 {\n    const red = (argb & 0x00ff0000) >> 16;\n    const green = (argb & 0x0000ff00) >> 8;\n    const blue = (argb & 0x000000ff);\n    const redL = utils.linearized(red);\n    const greenL = utils.linearized(green);\n    const blueL = utils.linearized(blue);\n    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n        atanDegrees >= 360      ? atanDegrees - 360.0 :\n                                  atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    const ac = p2 * viewingConditions.nbb;\n    const j = 100.0 *\n        Math.pow(\n            ac / viewingConditions.aw,\n            viewingConditions.c * viewingConditions.z);\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n        (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n        (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n        Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const c = alpha * Math.sqrt(j / 100.0);\n    const m = c * viewingConditions.fLRoot;\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n\n    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   */\n  static fromJch(j: number, c: number, h: number): Cam16 {\n    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromJchInViewingConditions(\n      j: number, c: number, h: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n        (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const m = c * viewingConditions.fLRoot;\n    const alpha = c / Math.sqrt(j / 100.0);\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const hueRadians = (h * Math.PI) / 180.0;\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   */\n  static fromUcs(jstar: number, astar: number, bstar: number): Cam16 {\n    return Cam16.fromUcsInViewingConditions(\n        jstar, astar, bstar, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromUcsInViewingConditions(\n      jstar: number, astar: number, bstar: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    const a = astar;\n    const b = bstar;\n    const m = Math.sqrt(a * a + b * b);\n    const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n    const c = M / viewingConditions.fLRoot;\n    let h = Math.atan2(b, a) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 360.0;\n    }\n    const j = jstar / (1 - (jstar - 100) * 0.007);\n    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n  }\n\n  /**\n   *  @return ARGB representation of color, assuming the color was viewed in\n   *     default viewing conditions, which are near-identical to the default\n   *     viewing conditions for sRGB.\n   */\n  toInt(): number {\n    return this.viewed(ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param viewingConditions Information about the environment where the color\n   *     will be viewed.\n   * @return ARGB representation of color\n   */\n  viewed(viewingConditions: ViewingConditions): number {\n    const alpha = this.chroma === 0.0 || this.j === 0.0 ?\n        0.0 :\n        this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n        alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n        1.0 / 0.9);\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n        Math.pow(\n            this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = (23.0 * (p2 + 0.305) * t) /\n        (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n        Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n        Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n        Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    const argb = utils.argbFromXyz(x, y, z);\n    return argb;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/cam_solver.d.ts b/node_modules/@material/material-color-utilities/dist/hct/cam_solver.d.ts
deleted file mode 100644
index f77f5cc..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/cam_solver.d.ts
+++ /dev/null
@@ -1,144 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Cam16 } from './cam16';
-/**
- * A class that solves the HCT equation.
- */
-export declare class CamSolver {
-    static SCALED_DISCOUNT_FROM_LINRGB: number[][];
-    static LINRGB_FROM_SCALED_DISCOUNT: number[][];
-    static Y_FROM_LINRGB: number[];
-    static CRITICAL_PLANES: number[];
-    /**
-     * Sanitizes a small enough angle in radians.
-     * @param angle An angle in radians; must not deviate too much
-     * from 0.
-     * @return A coterminal angle between 0 and 2pi.
-     */
-    private static sanitizeRadians;
-    /**
-     * Delinearizes an RGB component, returning a floating-point
-     * number.
-     *
-     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
-     * linear R/G/B channel
-     * @return 0.0 <= output <= 255.0, color channel converted to
-     * regular RGB space
-     */
-    private static trueDelinearized;
-    private static chromaticAdaptation;
-    /**
-     * Returns the hue of a linear RGB color in CAM16.
-     *
-     * @param linrgb The linear RGB coordinates of a color.
-     * @return The hue of the color in CAM16, in radians.
-     */
-    private static hueOf;
-    private static areInCyclicOrder;
-    /**
-     * Solves the lerp equation.
-     *
-     * @param source The starting number.
-     * @param mid The number in the middle.
-     * @param target The ending number.
-     * @return A number t such that
-     * lerp(source, target, t) = mid.
-     */
-    private static intercept;
-    private static lerpPoint;
-    /**
-     * Intersects a segment with a plane.
-     *
-     * @param source The coordinates of point A.
-     * @param coordinate The R-, G-, or B-coordinate of the plane.
-     * @param target The coordinates of point B.
-     * @param axis The axis the plane is perpendicular with. (0: R, 1:
-     * G, 2: B)
-     * @return The intersection point of the segment AB with the plane
-     * R=coordinate, G=coordinate, or B=coordinate
-     */
-    private static setCoordinate;
-    private static isBounded;
-    /**
-     * Returns the intersections of the plane of constant y with the
-     * RGB cube.
-     *
-     * @param y The Y value of the plane.
-     * @return A list of points where the plane intersects with the
-     * edges of the RGB cube, in linear RGB coordinates.
-     */
-    private static edgePoints;
-    /**
-     * Finds the segment containing the desired color.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return A list of two sets of linear RGB coordinates, each
-     * corresponding to an endpoint of the segment containing the
-     * desired color.
-     */
-    private static bisectToSegment;
-    private static midpoint;
-    private static criticalPlaneBelow;
-    private static criticalPlaneAbove;
-    /**
-     * Finds a color with the given Y and hue on the boundary of the
-     * cube.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return The desired color, in linear RGB coordinates.
-     */
-    private static bisectToLimit;
-    private static inverseChromaticAdaptation;
-    /**
-     * Finds a color with the given hue, chroma, and Y.
-     *
-     * @param hueRadians The desired hue in radians.
-     * @param chroma The desired chroma.
-     * @param y The desired Y.
-     * @return The desired color as a hexadecimal integer, if found; 0
-     * otherwise.
-     */
-    private static findResultByJ;
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return A hexadecimal representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToInt(hueDegrees: number, chroma: number, lstar: number): number;
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return An CAM16 object representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/hct/cam_solver.js b/node_modules/@material/material-color-utilities/dist/hct/cam_solver.js
deleted file mode 100644
index 788c335..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/cam_solver.js
+++ /dev/null
@@ -1,489 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as colorUtils from '../utils/color_utils';
-import * as mathUtils from '../utils/math_utils';
-import { Cam16 } from './cam16';
-import { ViewingConditions } from './viewing_conditions';
-/**
- * A class that solves the HCT equation.
- */
-// libmonet is designed to have a consistent API across platforms
-// and modular components that can be moved around easily. Using a class as a
-// namespace facilitates this.
-//
-// tslint:disable-next-line:class-as-namespace
-export class CamSolver {
-    /**
-     * Sanitizes a small enough angle in radians.
-     * @param angle An angle in radians; must not deviate too much
-     * from 0.
-     * @return A coterminal angle between 0 and 2pi.
-     */
-    static sanitizeRadians(angle) {
-        return (angle + Math.PI * 8) % (Math.PI * 2);
-    }
-    /**
-     * Delinearizes an RGB component, returning a floating-point
-     * number.
-     *
-     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
-     * linear R/G/B channel
-     * @return 0.0 <= output <= 255.0, color channel converted to
-     * regular RGB space
-     */
-    static trueDelinearized(rgbComponent) {
-        const normalized = rgbComponent / 100.0;
-        let delinearized = 0.0;
-        if (normalized <= 0.0031308) {
-            delinearized = normalized * 12.92;
-        }
-        else {
-            delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;
-        }
-        return delinearized * 255.0;
-    }
-    static chromaticAdaptation(component) {
-        const af = Math.pow(Math.abs(component), 0.42);
-        return mathUtils.signum(component) * 400.0 * af / (af + 27.13);
-    }
-    /**
-     * Returns the hue of a linear RGB color in CAM16.
-     *
-     * @param linrgb The linear RGB coordinates of a color.
-     * @return The hue of the color in CAM16, in radians.
-     */
-    static hueOf(linrgb) {
-        const scaledDiscount = mathUtils.matrixMultiply(linrgb, CamSolver.SCALED_DISCOUNT_FROM_LINRGB);
-        const rA = CamSolver.chromaticAdaptation(scaledDiscount[0]);
-        const gA = CamSolver.chromaticAdaptation(scaledDiscount[1]);
-        const bA = CamSolver.chromaticAdaptation(scaledDiscount[2]);
-        // redness-greenness
-        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;
-        // yellowness-blueness
-        const b = (rA + gA - 2.0 * bA) / 9.0;
-        return Math.atan2(b, a);
-    }
-    static areInCyclicOrder(a, b, c) {
-        const deltaAB = CamSolver.sanitizeRadians(b - a);
-        const deltaAC = CamSolver.sanitizeRadians(c - a);
-        return deltaAB < deltaAC;
-    }
-    /**
-     * Solves the lerp equation.
-     *
-     * @param source The starting number.
-     * @param mid The number in the middle.
-     * @param target The ending number.
-     * @return A number t such that
-     * lerp(source, target, t) = mid.
-     */
-    static intercept(source, mid, target) {
-        return (mid - source) / (target - source);
-    }
-    static lerpPoint(source, t, target) {
-        return [
-            source[0] + (target[0] - source[0]) * t,
-            source[1] + (target[1] - source[1]) * t,
-            source[2] + (target[2] - source[2]) * t,
-        ];
-    }
-    /**
-     * Intersects a segment with a plane.
-     *
-     * @param source The coordinates of point A.
-     * @param coordinate The R-, G-, or B-coordinate of the plane.
-     * @param target The coordinates of point B.
-     * @param axis The axis the plane is perpendicular with. (0: R, 1:
-     * G, 2: B)
-     * @return The intersection point of the segment AB with the plane
-     * R=coordinate, G=coordinate, or B=coordinate
-     */
-    static setCoordinate(source, coordinate, target, axis) {
-        const t = CamSolver.intercept(source[axis], coordinate, target[axis]);
-        return CamSolver.lerpPoint(source, t, target);
-    }
-    static isBounded(x) {
-        return 0.0 <= x && x <= 100.0;
-    }
-    /**
-     * Returns the intersections of the plane of constant y with the
-     * RGB cube.
-     *
-     * @param y The Y value of the plane.
-     * @return A list of points where the plane intersects with the
-     * edges of the RGB cube, in linear RGB coordinates.
-     */
-    static edgePoints(y) {
-        const kR = CamSolver.Y_FROM_LINRGB[0];
-        const kG = CamSolver.Y_FROM_LINRGB[1];
-        const kB = CamSolver.Y_FROM_LINRGB[2];
-        const points = [
-            [y / kR, 0.0, 0.0],
-            [(y - 100 * kB) / kR, 0.0, 100.0],
-            [(y - 100 * kG) / kR, 100.0, 0.0],
-            [(y - 100 * kB - 100 * kG) / kR, 100.0, 100.0],
-            [0.0, y / kG, 0.0],
-            [100.0, (y - 100 * kR) / kG, 0.0],
-            [0.0, (y - 100 * kB) / kG, 100.0],
-            [100.0, (y - 100 * kR - 100 * kB) / kG, 100.0],
-            [0.0, 0.0, y / kB],
-            [100.0, 0.0, (y - 100 * kR) / kB],
-            [0.0, 100.0, (y - 100 * kG) / kB],
-            [100.0, 100.0, (y - 100 * kR - 100 * kG) / kB],
-        ];
-        const ans = [];
-        for (const point of points) {
-            if (CamSolver.isBounded(point[0]) && CamSolver.isBounded(point[1]) &&
-                CamSolver.isBounded(point[2])) {
-                ans.push(point);
-            }
-        }
-        return ans;
-    }
-    /**
-     * Finds the segment containing the desired color.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return A list of two sets of linear RGB coordinates, each
-     * corresponding to an endpoint of the segment containing the
-     * desired color.
-     */
-    static bisectToSegment(y, targetHue) {
-        const vertices = CamSolver.edgePoints(y);
-        let left = vertices[0];
-        let right = left;
-        let leftHue = CamSolver.hueOf(left);
-        let rightHue = leftHue;
-        let uncut = true;
-        for (let i = 1; i < vertices.length; i++) {
-            const mid = vertices[i];
-            const midHue = CamSolver.hueOf(mid);
-            if (uncut || CamSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {
-                uncut = false;
-                if (CamSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
-                    right = mid;
-                    rightHue = midHue;
-                }
-                else {
-                    left = mid;
-                    leftHue = midHue;
-                }
-            }
-        }
-        return [left, right];
-    }
-    static midpoint(a, b) {
-        return [
-            (a[0] + b[0]) / 2,
-            (a[1] + b[1]) / 2,
-            (a[2] + b[2]) / 2,
-        ];
-    }
-    static criticalPlaneBelow(x) {
-        return Math.floor(x - 0.5);
-    }
-    static criticalPlaneAbove(x) {
-        return Math.ceil(x - 0.5);
-    }
-    /**
-     * Finds a color with the given Y and hue on the boundary of the
-     * cube.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return The desired color, in linear RGB coordinates.
-     */
-    static bisectToLimit(y, targetHue) {
-        const segment = CamSolver.bisectToSegment(y, targetHue);
-        let left = segment[0];
-        let leftHue = CamSolver.hueOf(left);
-        let right = segment[1];
-        for (let axis = 0; axis < 3; axis++) {
-            if (left[axis] !== right[axis]) {
-                let lPlane = -1;
-                let rPlane = 255;
-                if (left[axis] < right[axis]) {
-                    lPlane = CamSolver.criticalPlaneBelow(CamSolver.trueDelinearized(left[axis]));
-                    rPlane = CamSolver.criticalPlaneAbove(CamSolver.trueDelinearized(right[axis]));
-                }
-                else {
-                    lPlane = CamSolver.criticalPlaneAbove(CamSolver.trueDelinearized(left[axis]));
-                    rPlane = CamSolver.criticalPlaneBelow(CamSolver.trueDelinearized(right[axis]));
-                }
-                for (let i = 0; i < 8; i++) {
-                    if (Math.abs(rPlane - lPlane) <= 1) {
-                        break;
-                    }
-                    else {
-                        const mPlane = Math.floor((lPlane + rPlane) / 2);
-                        const midPlaneCoordinate = CamSolver.CRITICAL_PLANES[mPlane];
-                        const mid = CamSolver.setCoordinate(left, midPlaneCoordinate, right, axis);
-                        const midHue = CamSolver.hueOf(mid);
-                        if (CamSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
-                            right = mid;
-                            rPlane = mPlane;
-                        }
-                        else {
-                            left = mid;
-                            leftHue = midHue;
-                            lPlane = mPlane;
-                        }
-                    }
-                }
-            }
-        }
-        return CamSolver.midpoint(left, right);
-    }
-    static inverseChromaticAdaptation(adapted) {
-        const adaptedAbs = Math.abs(adapted);
-        const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));
-        return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);
-    }
-    /**
-     * Finds a color with the given hue, chroma, and Y.
-     *
-     * @param hueRadians The desired hue in radians.
-     * @param chroma The desired chroma.
-     * @param y The desired Y.
-     * @return The desired color as a hexadecimal integer, if found; 0
-     * otherwise.
-     */
-    static findResultByJ(hueRadians, chroma, y) {
-        // Initial estimate of j.
-        let j = Math.sqrt(y) * 11.0;
-        // ===========================================================
-        // Operations inlined from Cam16 to avoid repeated calculation
-        // ===========================================================
-        const viewingConditions = ViewingConditions.DEFAULT;
-        const tInnerCoeff = 1 /
-            Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
-        const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);
-        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;
-        const hSin = Math.sin(hueRadians);
-        const hCos = Math.cos(hueRadians);
-        for (let iterationRound = 0; iterationRound < 5; iterationRound++) {
-            // ===========================================================
-            // Operations inlined from Cam16 to avoid repeated calculation
-            // ===========================================================
-            const jNormalized = j / 100.0;
-            const alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);
-            const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);
-            const ac = viewingConditions.aw *
-                Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);
-            const p2 = ac / viewingConditions.nbb;
-            const gamma = 23.0 * (p2 + 0.305) * t /
-                (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);
-            const a = gamma * hCos;
-            const b = gamma * hSin;
-            const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;
-            const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;
-            const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;
-            const rCScaled = CamSolver.inverseChromaticAdaptation(rA);
-            const gCScaled = CamSolver.inverseChromaticAdaptation(gA);
-            const bCScaled = CamSolver.inverseChromaticAdaptation(bA);
-            const linrgb = mathUtils.matrixMultiply([rCScaled, gCScaled, bCScaled], CamSolver.LINRGB_FROM_SCALED_DISCOUNT);
-            // ===========================================================
-            // Operations inlined from Cam16 to avoid repeated calculation
-            // ===========================================================
-            if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {
-                return 0;
-            }
-            const kR = CamSolver.Y_FROM_LINRGB[0];
-            const kG = CamSolver.Y_FROM_LINRGB[1];
-            const kB = CamSolver.Y_FROM_LINRGB[2];
-            const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];
-            if (fnj <= 0) {
-                return 0;
-            }
-            if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {
-                if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {
-                    return 0;
-                }
-                return colorUtils.argbFromLinrgb(linrgb);
-            }
-            // Iterates with Newton method,
-            // Using 2 * fn(j) / j as the approximation of fn'(j)
-            j = j - (fnj - y) * j / (2 * fnj);
-        }
-        return 0;
-    }
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return A hexadecimal representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToInt(hueDegrees, chroma, lstar) {
-        if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {
-            return colorUtils.argbFromLstar(lstar);
-        }
-        hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);
-        const hueRadians = hueDegrees / 180 * Math.PI;
-        const y = colorUtils.yFromLstar(lstar);
-        const exactAnswer = CamSolver.findResultByJ(hueRadians, chroma, y);
-        if (exactAnswer !== 0) {
-            return exactAnswer;
-        }
-        const linrgb = CamSolver.bisectToLimit(y, hueRadians);
-        return colorUtils.argbFromLinrgb(linrgb);
-    }
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return An CAM16 object representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToCam(hueDegrees, chroma, lstar) {
-        return Cam16.fromInt(CamSolver.solveToInt(hueDegrees, chroma, lstar));
-    }
-}
-CamSolver.SCALED_DISCOUNT_FROM_LINRGB = [
-    [
-        0.001200833568784504,
-        0.002389694492170889,
-        0.0002795742885861124,
-    ],
-    [
-        0.0005891086651375999,
-        0.0029785502573438758,
-        0.0003270666104008398,
-    ],
-    [
-        0.00010146692491640572,
-        0.0005364214359186694,
-        0.0032979401770712076,
-    ],
-];
-CamSolver.LINRGB_FROM_SCALED_DISCOUNT = [
-    [
-        1373.2198709594231,
-        -1100.4251190754821,
-        -7.278681089101213,
-    ],
-    [
-        -271.815969077903,
-        559.6580465940733,
-        -32.46047482791194,
-    ],
-    [
-        1.9622899599665666,
-        -57.173814538844006,
-        308.7233197812385,
-    ],
-];
-CamSolver.Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];
-CamSolver.CRITICAL_PLANES = [
-    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,
-    0.10623444424209313, 0.13658714259697685, 0.16693984095186062,
-    0.19729253930674434, 0.2276452376616281, 0.2579979360165119,
-    0.28835063437139563, 0.3188300904430532, 0.350925934958123,
-    0.3848314933096426, 0.42057480301049466, 0.458183274052838,
-    0.4976837250274023, 0.5391024159806381, 0.5824650784040898,
-    0.6277969426914107, 0.6751227633498623, 0.7244668422128921,
-    0.775853049866786, 0.829304845476233, 0.8848452951698498,
-    0.942497089126609, 1.0022825574869039, 1.0642236851973577,
-    1.1283421258858297, 1.1946592148522128, 1.2631959812511864,
-    1.3339731595349034, 1.407011200216447, 1.4823302800086415,
-    1.5599503113873272, 1.6398909516233677, 1.7221716113234105,
-    1.8068114625156377, 1.8938294463134073, 1.9832442801866852,
-    2.075074464868551, 2.1693382909216234, 2.2660538449872063,
-    2.36523901573795, 2.4669114995532007, 2.5710888059345764,
-    2.6777882626779785, 2.7870270208169257, 2.898822059350997,
-    3.0131901897720907, 3.1301480604002863, 3.2497121605402226,
-    3.3718988244681087, 3.4967242352587946, 3.624204428461639,
-    3.754355295633311, 3.887192587735158, 4.022731918402185,
-    4.160988767090289, 4.301978482107941, 4.445716283538092,
-    4.592217266055746, 4.741496401646282, 4.893568542229298,
-    5.048448422192488, 5.20615066083972, 5.3666897647573375,
-    5.5300801301023865, 5.696336044816294, 5.865471690767354,
-    6.037501145825082, 6.212438385869475, 6.390297286737924,
-    6.571091626112461, 6.7548350853498045, 6.941541251256611,
-    7.131223617812143, 7.323895587840543, 7.5195704746346665,
-    7.7182615035334345, 7.919981813454504, 8.124744458384042,
-    8.332562408825165, 8.543448553206703, 8.757415699253682,
-    8.974476575321063, 9.194643831691977, 9.417930041841839,
-    9.644347703669503, 9.873909240696694, 10.106627003236781,
-    10.342513269534024, 10.58158024687427, 10.8238400726681,
-    11.069304815507364, 11.317986476196008, 11.569896988756009,
-    11.825048221409341, 12.083451977536606, 12.345119996613247,
-    12.610063955123938, 12.878295467455942, 13.149826086772048,
-    13.42466730586372, 13.702830557985108, 13.984327217668513,
-    14.269168601521828, 14.55736596900856, 14.848930523210871,
-    15.143873411576273, 15.44220572664832, 15.743938506781891,
-    16.04908273684337, 16.35764934889634, 16.66964922287304,
-    16.985093187232053, 17.30399201960269, 17.62635644741625,
-    17.95219714852476, 18.281524751807332, 18.614349837764564,
-    18.95068293910138, 19.290534541298456, 19.633915083172692,
-    19.98083495742689, 20.331304511189067, 20.685334046541502,
-    21.042933821039977, 21.404114048223256, 21.76888489811322,
-    22.137256497705877, 22.50923893145328, 22.884842241736916,
-    23.264076429332462, 23.6469514538663, 24.033477234264016,
-    24.42366364919083, 24.817520537484558, 25.21505769858089,
-    25.61628489293138, 26.021211842414342, 26.429848230738664,
-    26.842203703840827, 27.258287870275353, 27.678110301598522,
-    28.10168053274597, 28.529008062403893, 28.96010235337422,
-    29.39497283293396, 29.83362889318845, 30.276079891419332,
-    30.722335150426627, 31.172403958865512, 31.62629557157785,
-    32.08401920991837, 32.54558406207592, 33.010999283389665,
-    33.4802739966603, 33.953417292456834, 34.430438229418264,
-    34.911345834551085, 35.39614910352207, 35.88485700094671,
-    36.37747846067349, 36.87402238606382, 37.37449765026789,
-    37.87891309649659, 38.38727753828926, 38.89959975977785,
-    39.41588851594697, 39.93615253289054, 40.460400508064545,
-    40.98864111053629, 41.520882981230194, 42.05713473317016,
-    42.597404951718396, 43.141702194811224, 43.6900349931913,
-    44.24241185063697, 44.798841244188324, 45.35933162437017,
-    45.92389141541209, 46.49252901546552, 47.065252796817916,
-    47.64207110610409, 48.22299226451468, 48.808024568002054,
-    49.3971762874833, 49.9904556690408, 50.587870934119984,
-    51.189430279724725, 51.79514187861014, 52.40501387947288,
-    53.0190544071392, 53.637271562750364, 54.259673423945976,
-    54.88626804504493, 55.517063457223934, 56.15206766869424,
-    56.79128866487574, 57.43473440856916, 58.08241284012621,
-    58.734331877617365, 59.39049941699807, 60.05092333227251,
-    60.715611475655585, 61.38457167773311, 62.057811747619894,
-    62.7353394731159, 63.417162620860914, 64.10328893648692,
-    64.79372614476921, 65.48848194977529, 66.18756403501224,
-    66.89098006357258, 67.59873767827808, 68.31084450182222,
-    69.02730813691093, 69.74813616640164, 70.47333615344107,
-    71.20291564160104, 71.93688215501312, 72.67524319850172,
-    73.41800625771542, 74.16517879925733, 74.9167682708136,
-    75.67278210128072, 76.43322770089146, 77.1981124613393,
-    77.96744375590167, 78.74122893956174, 79.51947534912904,
-    80.30219030335869, 81.08938110306934, 81.88105503125999,
-    82.67721935322541, 83.4778813166706, 84.28304815182372,
-    85.09272707154808, 85.90692527145302, 86.72564993000343,
-    87.54890820862819, 88.3767072518277, 89.2090541872801,
-    90.04595612594655, 90.88742016217518, 91.73345337380438,
-    92.58406282226491, 93.43925555268066, 94.29903859396902,
-    95.16341895893969, 96.03240364439274, 96.9059996312159,
-    97.78421388448044, 98.6670533535366, 99.55452497210776,
-];
-//# sourceMappingURL=cam_solver.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/cam_solver.js.map b/node_modules/@material/material-color-utilities/dist/hct/cam_solver.js.map
deleted file mode 100644
index bc0df5e..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/cam_solver.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"cam_solver.js","sourceRoot":"","sources":["../../hct/cam_solver.ts"],"names":[],"mappings":"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AiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,gBAAgB,EAAM,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,kBAAkB,EAAI,kBAAkB,EAAI,gBAAgB;IAC5D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,gBAAgB,EAAM,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,gBAAgB,EAAM,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,gBAAgB,EAAM,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,gBAAgB,EAAM,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,gBAAgB,EAAM,iBAAiB;CAC9D,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as colorUtils from '../utils/color_utils';\nimport * as mathUtils from '../utils/math_utils';\n\nimport {Cam16} from './cam16';\nimport {ViewingConditions} from './viewing_conditions';\n\n/**\n * A class that solves the HCT equation.\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class CamSolver {\n  static SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n      0.001200833568784504,\n      0.002389694492170889,\n      0.0002795742885861124,\n    ],\n    [\n      0.0005891086651375999,\n      0.0029785502573438758,\n      0.0003270666104008398,\n    ],\n    [\n      0.00010146692491640572,\n      0.0005364214359186694,\n      0.0032979401770712076,\n    ],\n  ];\n\n  static LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n      1373.2198709594231,\n      -1100.4251190754821,\n      -7.278681089101213,\n    ],\n    [\n      -271.815969077903,\n      559.6580465940733,\n      -32.46047482791194,\n    ],\n    [\n      1.9622899599665666,\n      -57.173814538844006,\n      308.7233197812385,\n    ],\n  ];\n\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\n\n  static CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313,  0.13658714259697685,  0.16693984095186062,\n    0.19729253930674434,  0.2276452376616281,   0.2579979360165119,\n    0.28835063437139563,  0.3188300904430532,   0.350925934958123,\n    0.3848314933096426,   0.42057480301049466,  0.458183274052838,\n    0.4976837250274023,   0.5391024159806381,   0.5824650784040898,\n    0.6277969426914107,   0.6751227633498623,   0.7244668422128921,\n    0.775853049866786,    0.829304845476233,    0.8848452951698498,\n    0.942497089126609,    1.0022825574869039,   1.0642236851973577,\n    1.1283421258858297,   1.1946592148522128,   1.2631959812511864,\n    1.3339731595349034,   1.407011200216447,    1.4823302800086415,\n    1.5599503113873272,   1.6398909516233677,   1.7221716113234105,\n    1.8068114625156377,   1.8938294463134073,   1.9832442801866852,\n    2.075074464868551,    2.1693382909216234,   2.2660538449872063,\n    2.36523901573795,     2.4669114995532007,   2.5710888059345764,\n    2.6777882626779785,   2.7870270208169257,   2.898822059350997,\n    3.0131901897720907,   3.1301480604002863,   3.2497121605402226,\n    3.3718988244681087,   3.4967242352587946,   3.624204428461639,\n    3.754355295633311,    3.887192587735158,    4.022731918402185,\n    4.160988767090289,    4.301978482107941,    4.445716283538092,\n    4.592217266055746,    4.741496401646282,    4.893568542229298,\n    5.048448422192488,    5.20615066083972,     5.3666897647573375,\n    5.5300801301023865,   5.696336044816294,    5.865471690767354,\n    6.037501145825082,    6.212438385869475,    6.390297286737924,\n    6.571091626112461,    6.7548350853498045,   6.941541251256611,\n    7.131223617812143,    7.323895587840543,    7.5195704746346665,\n    7.7182615035334345,   7.919981813454504,    8.124744458384042,\n    8.332562408825165,    8.543448553206703,    8.757415699253682,\n    8.974476575321063,    9.194643831691977,    9.417930041841839,\n    9.644347703669503,    9.873909240696694,    10.106627003236781,\n    10.342513269534024,   10.58158024687427,    10.8238400726681,\n    11.069304815507364,   11.317986476196008,   11.569896988756009,\n    11.825048221409341,   12.083451977536606,   12.345119996613247,\n    12.610063955123938,   12.878295467455942,   13.149826086772048,\n    13.42466730586372,    13.702830557985108,   13.984327217668513,\n    14.269168601521828,   14.55736596900856,    14.848930523210871,\n    15.143873411576273,   15.44220572664832,    15.743938506781891,\n    16.04908273684337,    16.35764934889634,    16.66964922287304,\n    16.985093187232053,   17.30399201960269,    17.62635644741625,\n    17.95219714852476,    18.281524751807332,   18.614349837764564,\n    18.95068293910138,    19.290534541298456,   19.633915083172692,\n    19.98083495742689,    20.331304511189067,   20.685334046541502,\n    21.042933821039977,   21.404114048223256,   21.76888489811322,\n    22.137256497705877,   22.50923893145328,    22.884842241736916,\n    23.264076429332462,   23.6469514538663,     24.033477234264016,\n    24.42366364919083,    24.817520537484558,   25.21505769858089,\n    25.61628489293138,    26.021211842414342,   26.429848230738664,\n    26.842203703840827,   27.258287870275353,   27.678110301598522,\n    28.10168053274597,    28.529008062403893,   28.96010235337422,\n    29.39497283293396,    29.83362889318845,    30.276079891419332,\n    30.722335150426627,   31.172403958865512,   31.62629557157785,\n    32.08401920991837,    32.54558406207592,    33.010999283389665,\n    33.4802739966603,     33.953417292456834,   34.430438229418264,\n    34.911345834551085,   35.39614910352207,    35.88485700094671,\n    36.37747846067349,    36.87402238606382,    37.37449765026789,\n    37.87891309649659,    38.38727753828926,    38.89959975977785,\n    39.41588851594697,    39.93615253289054,    40.460400508064545,\n    40.98864111053629,    41.520882981230194,   42.05713473317016,\n    42.597404951718396,   43.141702194811224,   43.6900349931913,\n    44.24241185063697,    44.798841244188324,   45.35933162437017,\n    45.92389141541209,    46.49252901546552,    47.065252796817916,\n    47.64207110610409,    48.22299226451468,    48.808024568002054,\n    49.3971762874833,     49.9904556690408,     50.587870934119984,\n    51.189430279724725,   51.79514187861014,    52.40501387947288,\n    53.0190544071392,     53.637271562750364,   54.259673423945976,\n    54.88626804504493,    55.517063457223934,   56.15206766869424,\n    56.79128866487574,    57.43473440856916,    58.08241284012621,\n    58.734331877617365,   59.39049941699807,    60.05092333227251,\n    60.715611475655585,   61.38457167773311,    62.057811747619894,\n    62.7353394731159,     63.417162620860914,   64.10328893648692,\n    64.79372614476921,    65.48848194977529,    66.18756403501224,\n    66.89098006357258,    67.59873767827808,    68.31084450182222,\n    69.02730813691093,    69.74813616640164,    70.47333615344107,\n    71.20291564160104,    71.93688215501312,    72.67524319850172,\n    73.41800625771542,    74.16517879925733,    74.9167682708136,\n    75.67278210128072,    76.43322770089146,    77.1981124613393,\n    77.96744375590167,    78.74122893956174,    79.51947534912904,\n    80.30219030335869,    81.08938110306934,    81.88105503125999,\n    82.67721935322541,    83.4778813166706,     84.28304815182372,\n    85.09272707154808,    85.90692527145302,    86.72564993000343,\n    87.54890820862819,    88.3767072518277,     89.2090541872801,\n    90.04595612594655,    90.88742016217518,    91.73345337380438,\n    92.58406282226491,    93.43925555268066,    94.29903859396902,\n    95.16341895893969,    96.03240364439274,    96.9059996312159,\n    97.78421388448044,    98.6670533535366,     99.55452497210776,\n  ];\n\n  /**\n   * Sanitizes a small enough angle in radians.\n   * @param angle An angle in radians; must not deviate too much\n   * from 0.\n   * @return A coterminal angle between 0 and 2pi.\n   */\n  private static sanitizeRadians(angle: number): number {\n    return (angle + Math.PI * 8) % (Math.PI * 2);\n  }\n\n  /**\n   * Delinearizes an RGB component, returning a floating-point\n   * number.\n   *\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n   * linear R/G/B channel\n   * @return 0.0 <= output <= 255.0, color channel converted to\n   * regular RGB space\n   */\n  private static trueDelinearized(rgbComponent: number): number {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n      delinearized = normalized * 12.92;\n    } else {\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return delinearized * 255.0;\n  }\n\n  private static chromaticAdaptation(component: number): number {\n    const af = Math.pow(Math.abs(component), 0.42);\n    return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\n  }\n\n  /**\n   * Returns the hue of a linear RGB color in CAM16.\n   *\n   * @param linrgb The linear RGB coordinates of a color.\n   * @return The hue of the color in CAM16, in radians.\n   */\n  private static hueOf(linrgb: number[]): number {\n    const scaledDiscount = mathUtils.matrixMultiply(\n        linrgb,\n        CamSolver.SCALED_DISCOUNT_FROM_LINRGB,\n    );\n    const rA = CamSolver.chromaticAdaptation(scaledDiscount[0]);\n    const gA = CamSolver.chromaticAdaptation(scaledDiscount[1]);\n    const bA = CamSolver.chromaticAdaptation(scaledDiscount[2]);\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    return Math.atan2(b, a);\n  }\n\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\n    const deltaAB = CamSolver.sanitizeRadians(b - a);\n    const deltaAC = CamSolver.sanitizeRadians(c - a);\n    return deltaAB < deltaAC;\n  }\n\n  /**\n   * Solves the lerp equation.\n   *\n   * @param source The starting number.\n   * @param mid The number in the middle.\n   * @param target The ending number.\n   * @return A number t such that\n   * lerp(source, target, t) = mid.\n   */\n  private static intercept(source: number, mid: number, target: number):\n      number {\n    return (mid - source) / (target - source);\n  }\n\n  private static lerpPoint(source: number[], t: number, target: number[]):\n      number[] {\n    return [\n      source[0] + (target[0] - source[0]) * t,\n      source[1] + (target[1] - source[1]) * t,\n      source[2] + (target[2] - source[2]) * t,\n    ];\n  }\n\n  /**\n   * Intersects a segment with a plane.\n   *\n   * @param source The coordinates of point A.\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\n   * @param target The coordinates of point B.\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\n   * G, 2: B)\n   * @return The intersection point of the segment AB with the plane\n   * R=coordinate, G=coordinate, or B=coordinate\n   */\n  private static setCoordinate(\n      source: number[],\n      coordinate: number,\n      target: number[],\n      axis: number,\n      ): number[] {\n    const t = CamSolver.intercept(source[axis], coordinate, target[axis]);\n    return CamSolver.lerpPoint(source, t, target);\n  }\n\n  private static isBounded(x: number): boolean {\n    return 0.0 <= x && x <= 100.0;\n  }\n\n  /**\n   * Returns the intersections of the plane of constant y with the\n   * RGB cube.\n   *\n   * @param y The Y value of the plane.\n   * @return A list of points where the plane intersects with the\n   * edges of the RGB cube, in linear RGB coordinates.\n   */\n  private static edgePoints(y: number): number[][] {\n    const kR = CamSolver.Y_FROM_LINRGB[0];\n    const kG = CamSolver.Y_FROM_LINRGB[1];\n    const kB = CamSolver.Y_FROM_LINRGB[2];\n    const points = [\n      [y / kR, 0.0, 0.0],\n      [(y - 100 * kB) / kR, 0.0, 100.0],\n      [(y - 100 * kG) / kR, 100.0, 0.0],\n      [(y - 100 * kB - 100 * kG) / kR, 100.0, 100.0],\n      [0.0, y / kG, 0.0],\n      [100.0, (y - 100 * kR) / kG, 0.0],\n      [0.0, (y - 100 * kB) / kG, 100.0],\n      [100.0, (y - 100 * kR - 100 * kB) / kG, 100.0],\n      [0.0, 0.0, y / kB],\n      [100.0, 0.0, (y - 100 * kR) / kB],\n      [0.0, 100.0, (y - 100 * kG) / kB],\n      [100.0, 100.0, (y - 100 * kR - 100 * kG) / kB],\n    ];\n    const ans = [];\n    for (const point of points) {\n      if (CamSolver.isBounded(point[0]) && CamSolver.isBounded(point[1]) &&\n          CamSolver.isBounded(point[2])) {\n        ans.push(point);\n      }\n    }\n    return ans;\n  }\n\n  /**\n   * Finds the segment containing the desired color.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return A list of two sets of linear RGB coordinates, each\n   * corresponding to an endpoint of the segment containing the\n   * desired color.\n   */\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\n    const vertices = CamSolver.edgePoints(y);\n    let left = vertices[0];\n    let right = left;\n    let leftHue = CamSolver.hueOf(left);\n    let rightHue = leftHue;\n    let uncut = true;\n    for (let i = 1; i < vertices.length; i++) {\n      const mid = vertices[i];\n      const midHue = CamSolver.hueOf(mid);\n      if (uncut || CamSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n        uncut = false;\n        if (CamSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n          right = mid;\n          rightHue = midHue;\n        } else {\n          left = mid;\n          leftHue = midHue;\n        }\n      }\n    }\n    return [left, right];\n  }\n\n  private static midpoint(a: number[], b: number[]): number[] {\n    return [\n      (a[0] + b[0]) / 2,\n      (a[1] + b[1]) / 2,\n      (a[2] + b[2]) / 2,\n    ];\n  }\n\n  private static criticalPlaneBelow(x: number): number {\n    return Math.floor(x - 0.5);\n  }\n\n  private static criticalPlaneAbove(x: number): number {\n    return Math.ceil(x - 0.5);\n  }\n\n  /**\n   * Finds a color with the given Y and hue on the boundary of the\n   * cube.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return The desired color, in linear RGB coordinates.\n   */\n  private static bisectToLimit(y: number, targetHue: number): number[] {\n    const segment = CamSolver.bisectToSegment(y, targetHue);\n    let left = segment[0];\n    let leftHue = CamSolver.hueOf(left);\n    let right = segment[1];\n    for (let axis = 0; axis < 3; axis++) {\n      if (left[axis] !== right[axis]) {\n        let lPlane = -1;\n        let rPlane = 255;\n        if (left[axis] < right[axis]) {\n          lPlane = CamSolver.criticalPlaneBelow(\n              CamSolver.trueDelinearized(left[axis]));\n          rPlane = CamSolver.criticalPlaneAbove(\n              CamSolver.trueDelinearized(right[axis]));\n        } else {\n          lPlane = CamSolver.criticalPlaneAbove(\n              CamSolver.trueDelinearized(left[axis]));\n          rPlane = CamSolver.criticalPlaneBelow(\n              CamSolver.trueDelinearized(right[axis]));\n        }\n        for (let i = 0; i < 8; i++) {\n          if (Math.abs(rPlane - lPlane) <= 1) {\n            break;\n          } else {\n            const mPlane = Math.floor((lPlane + rPlane) / 2);\n            const midPlaneCoordinate = CamSolver.CRITICAL_PLANES[mPlane];\n            const mid =\n                CamSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n            const midHue = CamSolver.hueOf(mid);\n            if (CamSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n              right = mid;\n              rPlane = mPlane;\n            } else {\n              left = mid;\n              leftHue = midHue;\n              lPlane = mPlane;\n            }\n          }\n        }\n      }\n    }\n    return CamSolver.midpoint(left, right);\n  }\n\n  private static inverseChromaticAdaptation(adapted: number): number {\n    const adaptedAbs = Math.abs(adapted);\n    const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n    return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n  }\n\n  /**\n   * Finds a color with the given hue, chroma, and Y.\n   *\n   * @param hueRadians The desired hue in radians.\n   * @param chroma The desired chroma.\n   * @param y The desired Y.\n   * @return The desired color as a hexadecimal integer, if found; 0\n   * otherwise.\n   */\n  private static findResultByJ(hueRadians: number, chroma: number, y: number):\n      number {\n    // Initial estimate of j.\n    let j = Math.sqrt(y) * 11.0;\n    // ===========================================================\n    // Operations inlined from Cam16 to avoid repeated calculation\n    // ===========================================================\n    const viewingConditions = ViewingConditions.DEFAULT;\n    const tInnerCoeff = 1 /\n        Math.pow(\n            1.64 - Math.pow(0.29, viewingConditions.n),\n            0.73,\n        );\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const hSin = Math.sin(hueRadians);\n    const hCos = Math.cos(hueRadians);\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      const jNormalized = j / 100.0;\n      const alpha =\n          chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n      const ac = viewingConditions.aw *\n          Math.pow(\n              jNormalized,\n              1.0 / viewingConditions.c / viewingConditions.z,\n          );\n      const p2 = ac / viewingConditions.nbb;\n      const gamma = 23.0 * (p2 + 0.305) * t /\n          (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      const a = gamma * hCos;\n      const b = gamma * hSin;\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      const rCScaled = CamSolver.inverseChromaticAdaptation(rA);\n      const gCScaled = CamSolver.inverseChromaticAdaptation(gA);\n      const bCScaled = CamSolver.inverseChromaticAdaptation(bA);\n      const linrgb = mathUtils.matrixMultiply(\n          [rCScaled, gCScaled, bCScaled],\n          CamSolver.LINRGB_FROM_SCALED_DISCOUNT,\n      );\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n        return 0;\n      }\n      const kR = CamSolver.Y_FROM_LINRGB[0];\n      const kG = CamSolver.Y_FROM_LINRGB[1];\n      const kB = CamSolver.Y_FROM_LINRGB[2];\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n      if (fnj <= 0) {\n        return 0;\n      }\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n          return 0;\n        }\n        return colorUtils.argbFromLinrgb(linrgb);\n      }\n      // Iterates with Newton method,\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\n      j = j - (fnj - y) * j / (2 * fnj);\n    }\n    return 0;\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return A hexadecimal representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n      return colorUtils.argbFromLstar(lstar);\n    }\n    hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n    const hueRadians = hueDegrees / 180 * Math.PI;\n    const y = colorUtils.yFromLstar(lstar);\n    const exactAnswer = CamSolver.findResultByJ(hueRadians, chroma, y);\n    if (exactAnswer !== 0) {\n      return exactAnswer;\n    }\n    const linrgb = CamSolver.bisectToLimit(y, hueRadians);\n    return colorUtils.argbFromLinrgb(linrgb);\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return An CAM16 object representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\n    return Cam16.fromInt(CamSolver.solveToInt(hueDegrees, chroma, lstar));\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct.d.ts b/node_modules/@material/material-color-utilities/dist/hct/hct.d.ts
deleted file mode 100644
index 89f643d..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct.d.ts
+++ /dev/null
@@ -1,70 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * HCT, hue, chroma, and tone. A color system that provides a perceptually
- * accurate color measurement system that can also accurately render what colors
- * will appear as in different lighting environments.
- */
-export declare class Hct {
-    private argb;
-    /**
-     * @param hue 0 <= hue < 360; invalid values are corrected.
-     * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color
-     *     returned may be lower than the requested chroma. Chroma has a different
-     *     maximum for any given hue and tone.
-     * @param tone 0 <= tone <= 100; invalid values are corrected.
-     * @return HCT representation of a color in default viewing conditions.
-     */
-    internalHue: number;
-    internalChroma: number;
-    internalTone: number;
-    static from(hue: number, chroma: number, tone: number): Hct;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return HCT representation of a color in default viewing conditions
-     */
-    static fromInt(argb: number): Hct;
-    toInt(): number;
-    /**
-     * A number, in degrees, representing ex. red, orange, yellow, etc.
-     * Ranges from 0 <= hue < 360.
-     */
-    get hue(): number;
-    /**
-     * @param newHue 0 <= newHue < 360; invalid values are corrected.
-     * Chroma may decrease because chroma has a different maximum for any given
-     * hue and tone.
-     */
-    set hue(newHue: number);
-    get chroma(): number;
-    /**
-     * @param newChroma 0 <= newChroma < ?
-     * Chroma may decrease because chroma has a different maximum for any given
-     * hue and tone.
-     */
-    set chroma(newChroma: number);
-    /** Lightness. Ranges from 0 to 100. */
-    get tone(): number;
-    /**
-     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.
-     * Chroma may decrease because chroma has a different maximum for any given
-     * hue and tone.
-     */
-    set tone(newTone: number);
-    private constructor();
-    private setInternalState;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct.js b/node_modules/@material/material-color-utilities/dist/hct/hct.js
deleted file mode 100644
index 676ab4a..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct.js
+++ /dev/null
@@ -1,108 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * A color system built using CAM16 hue and chroma, and L* from
- * L*a*b*.
- *
- * Using L* creates a link between the color system, contrast, and thus
- * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ
- * color space. L*, or perceptual luminance can be calculated from Y.
- *
- * Unlike Y, L* is linear to human perception, allowing trivial creation of
- * accurate color tones.
- *
- * Unlike contrast ratio, measuring contrast in L* is linear, and simple to
- * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,
- * and a difference of 50 guarantees a contrast ratio >= 4.5.
- */
-import * as utils from '../utils/color_utils';
-import { Cam16 } from './cam16';
-import { HctSolver } from './hct_solver';
-/**
- * HCT, hue, chroma, and tone. A color system that provides a perceptually
- * accurate color measurement system that can also accurately render what colors
- * will appear as in different lighting environments.
- */
-export class Hct {
-    constructor(argb) {
-        this.argb = argb;
-        const cam = Cam16.fromInt(argb);
-        this.internalHue = cam.hue;
-        this.internalChroma = cam.chroma;
-        this.internalTone = utils.lstarFromArgb(argb);
-        this.argb = argb;
-    }
-    static from(hue, chroma, tone) {
-        return new Hct(HctSolver.solveToInt(hue, chroma, tone));
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return HCT representation of a color in default viewing conditions
-     */
-    static fromInt(argb) {
-        return new Hct(argb);
-    }
-    toInt() {
-        return this.argb;
-    }
-    /**
-     * A number, in degrees, representing ex. red, orange, yellow, etc.
-     * Ranges from 0 <= hue < 360.
-     */
-    get hue() {
-        return this.internalHue;
-    }
-    /**
-     * @param newHue 0 <= newHue < 360; invalid values are corrected.
-     * Chroma may decrease because chroma has a different maximum for any given
-     * hue and tone.
-     */
-    set hue(newHue) {
-        this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));
-    }
-    get chroma() {
-        return this.internalChroma;
-    }
-    /**
-     * @param newChroma 0 <= newChroma < ?
-     * Chroma may decrease because chroma has a different maximum for any given
-     * hue and tone.
-     */
-    set chroma(newChroma) {
-        this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));
-    }
-    /** Lightness. Ranges from 0 to 100. */
-    get tone() {
-        return this.internalTone;
-    }
-    /**
-     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.
-     * Chroma may decrease because chroma has a different maximum for any given
-     * hue and tone.
-     */
-    set tone(newTone) {
-        this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));
-    }
-    setInternalState(argb) {
-        const cam = Cam16.fromInt(argb);
-        this.internalHue = cam.hue;
-        this.internalChroma = cam.chroma;
-        this.internalTone = utils.lstarFromArgb(argb);
-        this.argb = argb;
-    }
-}
-//# sourceMappingURL=hct.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct.js.map b/node_modules/@material/material-color-utilities/dist/hct/hct.js.map
deleted file mode 100644
index f5270a1..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"hct.js","sourceRoot":"","sources":["../../hct/hct.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH;;;;;;;;;;;;;;GAcG;AAEH,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAC,SAAS,EAAC,MAAM,cAAc,CAAC;AAGvC;;;;GAIG;AACH,MAAM,OAAO,GAAG;IA4Fd,YAA4B,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QACtC,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IApFD,MAAM,CAAC,IAAI,CAAC,GAAW,EAAE,MAAc,EAAE,IAAY;QACnD,OAAO,IAAI,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,IAAI,GAAG,CAAC,MAAc;QACpB,IAAI,CAAC,gBAAgB,CACjB,SAAS,CAAC,UAAU,CAChB,MAAM,EACN,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,YAAY,CAChB,CACR,CAAC;IACJ,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,IAAI,MAAM,CAAC,SAAiB;QAC1B,IAAI,CAAC,gBAAgB,CACjB,SAAS,CAAC,UAAU,CAChB,IAAI,CAAC,WAAW,EAChB,SAAS,EACT,IAAI,CAAC,YAAY,CAChB,CACR,CAAC;IACJ,CAAC;IAED,uCAAuC;IACvC,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,IAAI,IAAI,CAAC,OAAe;QACtB,IAAI,CAAC,gBAAgB,CACjB,SAAS,CAAC,UAAU,CAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,cAAc,EACnB,OAAO,CACN,CACR,CAAC;IACJ,CAAC;IAUO,gBAAgB,CAAC,IAAY;QACnC,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\nimport * as utils from '../utils/color_utils';\n\nimport {Cam16} from './cam16';\nimport {HctSolver} from './hct_solver';\n\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n\n  internalHue: number;\n  internalChroma: number;\n  internalTone: number;\n\n  static from(hue: number, chroma: number, tone: number) {\n    return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    return new Hct(argb);\n  }\n\n  toInt(): number {\n    return this.argb;\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            newHue,\n            this.internalChroma,\n            this.internalTone,\n            ),\n    );\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            this.internalHue,\n            newChroma,\n            this.internalTone,\n            ),\n    );\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            this.internalHue,\n            this.internalChroma,\n            newTone,\n            ),\n    );\n  }\n\n  private constructor(private argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  private setInternalState(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.d.ts b/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.js b/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.js
deleted file mode 100644
index 67227d0..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.js
+++ /dev/null
@@ -1,35 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import * as colorUtils from '../utils/color_utils';
-import { Hct } from './hct';
-// Testing 512 out of 16_777_216 colors.
-describe('HCT roundtrip', () => {
-    it('preserves original color', () => {
-        for (let r = 0; r < 296; r += 37) {
-            for (let g = 0; g < 296; g += 37) {
-                for (let b = 0; b < 296; b += 37) {
-                    const argb = colorUtils.argbFromRgb(Math.min(255, r), Math.min(255, g), Math.min(255, b));
-                    const hct = Hct.fromInt(argb);
-                    const reconstructed = Hct.from(hct.hue, hct.chroma, hct.tone).toInt();
-                    expect(reconstructed).toEqual(argb);
-                }
-            }
-        }
-    });
-});
-//# sourceMappingURL=hct_round_trip_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.js.map b/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.js.map
deleted file mode 100644
index 9d0a4c9..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_round_trip_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"hct_round_trip_test.js","sourceRoot":"","sources":["../../hct/hct_round_trip_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,SAAS,CAAC;AAEjB,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AAEnD,OAAO,EAAC,GAAG,EAAC,MAAM,OAAO,CAAC;AAE1B,wCAAwC;AAExC,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;oBAChC,MAAM,IAAI,GAAG,UAAU,CAAC,WAAW,CAC/B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAChB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAChB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CACnB,CAAC;oBAEF,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC9B,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAC1B,GAAG,CAAC,GAAG,EACP,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,IAAI,CACX,CAAC,KAAK,EAAE,CAAC;oBAEV,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACrC;aACF;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport * as colorUtils from '../utils/color_utils';\n\nimport {Hct} from './hct';\n\n// Testing 512 out of 16_777_216 colors.\n\ndescribe('HCT roundtrip', () => {\n  it('preserves original color', () => {\n    for (let r = 0; r < 296; r += 37) {\n      for (let g = 0; g < 296; g += 37) {\n        for (let b = 0; b < 296; b += 37) {\n          const argb = colorUtils.argbFromRgb(\n              Math.min(255, r),\n              Math.min(255, g),\n              Math.min(255, b),\n          );\n\n          const hct = Hct.fromInt(argb);\n          const reconstructed = Hct.from(\n              hct.hue,\n              hct.chroma,\n              hct.tone,\n          ).toInt();\n\n          expect(reconstructed).toEqual(argb);\n        }\n      }\n    }\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_solver.d.ts b/node_modules/@material/material-color-utilities/dist/hct/hct_solver.d.ts
deleted file mode 100644
index c1e5c64..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_solver.d.ts
+++ /dev/null
@@ -1,146 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Cam16 } from './cam16';
-/**
- * A class that solves the HCT equation.
- */
-export declare class HctSolver {
-    static SCALED_DISCOUNT_FROM_LINRGB: number[][];
-    static LINRGB_FROM_SCALED_DISCOUNT: number[][];
-    static Y_FROM_LINRGB: number[];
-    static CRITICAL_PLANES: number[];
-    /**
-     * Sanitizes a small enough angle in radians.
-     *
-     * @param angle An angle in radians; must not deviate too much
-     * from 0.
-     * @return A coterminal angle between 0 and 2pi.
-     */
-    private static sanitizeRadians;
-    /**
-     * Delinearizes an RGB component, returning a floating-point
-     * number.
-     *
-     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
-     * linear R/G/B channel
-     * @return 0.0 <= output <= 255.0, color channel converted to
-     * regular RGB space
-     */
-    private static trueDelinearized;
-    private static chromaticAdaptation;
-    /**
-     * Returns the hue of a linear RGB color in CAM16.
-     *
-     * @param linrgb The linear RGB coordinates of a color.
-     * @return The hue of the color in CAM16, in radians.
-     */
-    private static hueOf;
-    private static areInCyclicOrder;
-    /**
-     * Solves the lerp equation.
-     *
-     * @param source The starting number.
-     * @param mid The number in the middle.
-     * @param target The ending number.
-     * @return A number t such that lerp(source, target, t) = mid.
-     */
-    private static intercept;
-    private static lerpPoint;
-    /**
-     * Intersects a segment with a plane.
-     *
-     * @param source The coordinates of point A.
-     * @param coordinate The R-, G-, or B-coordinate of the plane.
-     * @param target The coordinates of point B.
-     * @param axis The axis the plane is perpendicular with. (0: R, 1:
-     * G, 2: B)
-     * @return The intersection point of the segment AB with the plane
-     * R=coordinate, G=coordinate, or B=coordinate
-     */
-    private static setCoordinate;
-    private static isBounded;
-    /**
-     * Returns the nth possible vertex of the polygonal intersection.
-     *
-     * @param y The Y value of the plane.
-     * @param n The zero-based index of the point. 0 <= n <= 11.
-     * @return The nth possible vertex of the polygonal intersection
-     * of the y plane and the RGB cube, in linear RGB coordinates, if
-     * it exists. If this possible vertex lies outside of the cube,
-     * [-1.0, -1.0, -1.0] is returned.
-     */
-    private static nthVertex;
-    /**
-     * Finds the segment containing the desired color.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return A list of two sets of linear RGB coordinates, each
-     * corresponding to an endpoint of the segment containing the
-     * desired color.
-     */
-    private static bisectToSegment;
-    private static midpoint;
-    private static criticalPlaneBelow;
-    private static criticalPlaneAbove;
-    /**
-     * Finds a color with the given Y and hue on the boundary of the
-     * cube.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return The desired color, in linear RGB coordinates.
-     */
-    private static bisectToLimit;
-    private static inverseChromaticAdaptation;
-    /**
-     * Finds a color with the given hue, chroma, and Y.
-     *
-     * @param hueRadians The desired hue in radians.
-     * @param chroma The desired chroma.
-     * @param y The desired Y.
-     * @return The desired color as a hexadecimal integer, if found; 0
-     * otherwise.
-     */
-    private static findResultByJ;
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return A hexadecimal representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToInt(hueDegrees: number, chroma: number, lstar: number): number;
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return An CAM16 object representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_solver.js b/node_modules/@material/material-color-utilities/dist/hct/hct_solver.js
deleted file mode 100644
index ee10a34..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_solver.js
+++ /dev/null
@@ -1,515 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-// This file is automatically generated. Do not modify it.
-import * as colorUtils from '../utils/color_utils';
-import * as mathUtils from '../utils/math_utils';
-import { Cam16 } from './cam16';
-import { ViewingConditions } from './viewing_conditions';
-// libmonet is designed to have a consistent API across platforms
-// and modular components that can be moved around easily. Using a class as a
-// namespace facilitates this.
-//
-// tslint:disable:class-as-namespace
-/**
- * A class that solves the HCT equation.
- */
-export class HctSolver {
-    /**
-     * Sanitizes a small enough angle in radians.
-     *
-     * @param angle An angle in radians; must not deviate too much
-     * from 0.
-     * @return A coterminal angle between 0 and 2pi.
-     */
-    static sanitizeRadians(angle) {
-        return (angle + Math.PI * 8) % (Math.PI * 2);
-    }
-    /**
-     * Delinearizes an RGB component, returning a floating-point
-     * number.
-     *
-     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
-     * linear R/G/B channel
-     * @return 0.0 <= output <= 255.0, color channel converted to
-     * regular RGB space
-     */
-    static trueDelinearized(rgbComponent) {
-        const normalized = rgbComponent / 100.0;
-        let delinearized = 0.0;
-        if (normalized <= 0.0031308) {
-            delinearized = normalized * 12.92;
-        }
-        else {
-            delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;
-        }
-        return delinearized * 255.0;
-    }
-    static chromaticAdaptation(component) {
-        const af = Math.pow(Math.abs(component), 0.42);
-        return mathUtils.signum(component) * 400.0 * af / (af + 27.13);
-    }
-    /**
-     * Returns the hue of a linear RGB color in CAM16.
-     *
-     * @param linrgb The linear RGB coordinates of a color.
-     * @return The hue of the color in CAM16, in radians.
-     */
-    static hueOf(linrgb) {
-        const scaledDiscount = mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);
-        const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);
-        const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);
-        const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);
-        // redness-greenness
-        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;
-        // yellowness-blueness
-        const b = (rA + gA - 2.0 * bA) / 9.0;
-        return Math.atan2(b, a);
-    }
-    static areInCyclicOrder(a, b, c) {
-        const deltaAB = HctSolver.sanitizeRadians(b - a);
-        const deltaAC = HctSolver.sanitizeRadians(c - a);
-        return deltaAB < deltaAC;
-    }
-    /**
-     * Solves the lerp equation.
-     *
-     * @param source The starting number.
-     * @param mid The number in the middle.
-     * @param target The ending number.
-     * @return A number t such that lerp(source, target, t) = mid.
-     */
-    static intercept(source, mid, target) {
-        return (mid - source) / (target - source);
-    }
-    static lerpPoint(source, t, target) {
-        return [
-            source[0] + (target[0] - source[0]) * t,
-            source[1] + (target[1] - source[1]) * t,
-            source[2] + (target[2] - source[2]) * t,
-        ];
-    }
-    /**
-     * Intersects a segment with a plane.
-     *
-     * @param source The coordinates of point A.
-     * @param coordinate The R-, G-, or B-coordinate of the plane.
-     * @param target The coordinates of point B.
-     * @param axis The axis the plane is perpendicular with. (0: R, 1:
-     * G, 2: B)
-     * @return The intersection point of the segment AB with the plane
-     * R=coordinate, G=coordinate, or B=coordinate
-     */
-    static setCoordinate(source, coordinate, target, axis) {
-        const t = HctSolver.intercept(source[axis], coordinate, target[axis]);
-        return HctSolver.lerpPoint(source, t, target);
-    }
-    static isBounded(x) {
-        return 0.0 <= x && x <= 100.0;
-    }
-    /**
-     * Returns the nth possible vertex of the polygonal intersection.
-     *
-     * @param y The Y value of the plane.
-     * @param n The zero-based index of the point. 0 <= n <= 11.
-     * @return The nth possible vertex of the polygonal intersection
-     * of the y plane and the RGB cube, in linear RGB coordinates, if
-     * it exists. If this possible vertex lies outside of the cube,
-     * [-1.0, -1.0, -1.0] is returned.
-     */
-    static nthVertex(y, n) {
-        const kR = HctSolver.Y_FROM_LINRGB[0];
-        const kG = HctSolver.Y_FROM_LINRGB[1];
-        const kB = HctSolver.Y_FROM_LINRGB[2];
-        const coordA = n % 4 <= 1 ? 0.0 : 100.0;
-        const coordB = n % 2 === 0 ? 0.0 : 100.0;
-        if (n < 4) {
-            const g = coordA;
-            const b = coordB;
-            const r = (y - g * kG - b * kB) / kR;
-            if (HctSolver.isBounded(r)) {
-                return [r, g, b];
-            }
-            else {
-                return [-1.0, -1.0, -1.0];
-            }
-        }
-        else if (n < 8) {
-            const b = coordA;
-            const r = coordB;
-            const g = (y - r * kR - b * kB) / kG;
-            if (HctSolver.isBounded(g)) {
-                return [r, g, b];
-            }
-            else {
-                return [-1.0, -1.0, -1.0];
-            }
-        }
-        else {
-            const r = coordA;
-            const g = coordB;
-            const b = (y - r * kR - g * kG) / kB;
-            if (HctSolver.isBounded(b)) {
-                return [r, g, b];
-            }
-            else {
-                return [-1.0, -1.0, -1.0];
-            }
-        }
-    }
-    /**
-     * Finds the segment containing the desired color.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return A list of two sets of linear RGB coordinates, each
-     * corresponding to an endpoint of the segment containing the
-     * desired color.
-     */
-    static bisectToSegment(y, targetHue) {
-        let left = [-1.0, -1.0, -1.0];
-        let right = left;
-        let leftHue = 0.0;
-        let rightHue = 0.0;
-        let initialized = false;
-        let uncut = true;
-        for (let n = 0; n < 12; n++) {
-            const mid = HctSolver.nthVertex(y, n);
-            if (mid[0] < 0) {
-                continue;
-            }
-            const midHue = HctSolver.hueOf(mid);
-            if (!initialized) {
-                left = mid;
-                right = mid;
-                leftHue = midHue;
-                rightHue = midHue;
-                initialized = true;
-                continue;
-            }
-            if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {
-                uncut = false;
-                if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
-                    right = mid;
-                    rightHue = midHue;
-                }
-                else {
-                    left = mid;
-                    leftHue = midHue;
-                }
-            }
-        }
-        return [left, right];
-    }
-    static midpoint(a, b) {
-        return [
-            (a[0] + b[0]) / 2,
-            (a[1] + b[1]) / 2,
-            (a[2] + b[2]) / 2,
-        ];
-    }
-    static criticalPlaneBelow(x) {
-        return Math.floor(x - 0.5);
-    }
-    static criticalPlaneAbove(x) {
-        return Math.ceil(x - 0.5);
-    }
-    /**
-     * Finds a color with the given Y and hue on the boundary of the
-     * cube.
-     *
-     * @param y The Y value of the color.
-     * @param targetHue The hue of the color.
-     * @return The desired color, in linear RGB coordinates.
-     */
-    static bisectToLimit(y, targetHue) {
-        const segment = HctSolver.bisectToSegment(y, targetHue);
-        let left = segment[0];
-        let leftHue = HctSolver.hueOf(left);
-        let right = segment[1];
-        for (let axis = 0; axis < 3; axis++) {
-            if (left[axis] !== right[axis]) {
-                let lPlane = -1;
-                let rPlane = 255;
-                if (left[axis] < right[axis]) {
-                    lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));
-                    rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));
-                }
-                else {
-                    lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));
-                    rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));
-                }
-                for (let i = 0; i < 8; i++) {
-                    if (Math.abs(rPlane - lPlane) <= 1) {
-                        break;
-                    }
-                    else {
-                        const mPlane = Math.floor((lPlane + rPlane) / 2.0);
-                        const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];
-                        const mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);
-                        const midHue = HctSolver.hueOf(mid);
-                        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
-                            right = mid;
-                            rPlane = mPlane;
-                        }
-                        else {
-                            left = mid;
-                            leftHue = midHue;
-                            lPlane = mPlane;
-                        }
-                    }
-                }
-            }
-        }
-        return HctSolver.midpoint(left, right);
-    }
-    static inverseChromaticAdaptation(adapted) {
-        const adaptedAbs = Math.abs(adapted);
-        const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));
-        return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);
-    }
-    /**
-     * Finds a color with the given hue, chroma, and Y.
-     *
-     * @param hueRadians The desired hue in radians.
-     * @param chroma The desired chroma.
-     * @param y The desired Y.
-     * @return The desired color as a hexadecimal integer, if found; 0
-     * otherwise.
-     */
-    static findResultByJ(hueRadians, chroma, y) {
-        // Initial estimate of j.
-        let j = Math.sqrt(y) * 11.0;
-        // ===========================================================
-        // Operations inlined from Cam16 to avoid repeated calculation
-        // ===========================================================
-        const viewingConditions = ViewingConditions.DEFAULT;
-        const tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
-        const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);
-        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;
-        const hSin = Math.sin(hueRadians);
-        const hCos = Math.cos(hueRadians);
-        for (let iterationRound = 0; iterationRound < 5; iterationRound++) {
-            // ===========================================================
-            // Operations inlined from Cam16 to avoid repeated calculation
-            // ===========================================================
-            const jNormalized = j / 100.0;
-            const alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);
-            const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);
-            const ac = viewingConditions.aw *
-                Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);
-            const p2 = ac / viewingConditions.nbb;
-            const gamma = 23.0 * (p2 + 0.305) * t /
-                (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);
-            const a = gamma * hCos;
-            const b = gamma * hSin;
-            const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;
-            const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;
-            const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;
-            const rCScaled = HctSolver.inverseChromaticAdaptation(rA);
-            const gCScaled = HctSolver.inverseChromaticAdaptation(gA);
-            const bCScaled = HctSolver.inverseChromaticAdaptation(bA);
-            const linrgb = mathUtils.matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);
-            // ===========================================================
-            // Operations inlined from Cam16 to avoid repeated calculation
-            // ===========================================================
-            if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {
-                return 0;
-            }
-            const kR = HctSolver.Y_FROM_LINRGB[0];
-            const kG = HctSolver.Y_FROM_LINRGB[1];
-            const kB = HctSolver.Y_FROM_LINRGB[2];
-            const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];
-            if (fnj <= 0) {
-                return 0;
-            }
-            if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {
-                if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {
-                    return 0;
-                }
-                return colorUtils.argbFromLinrgb(linrgb);
-            }
-            // Iterates with Newton method,
-            // Using 2 * fn(j) / j as the approximation of fn'(j)
-            j = j - (fnj - y) * j / (2 * fnj);
-        }
-        return 0;
-    }
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return A hexadecimal representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToInt(hueDegrees, chroma, lstar) {
-        if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {
-            return colorUtils.argbFromLstar(lstar);
-        }
-        hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);
-        const hueRadians = hueDegrees / 180 * Math.PI;
-        const y = colorUtils.yFromLstar(lstar);
-        const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);
-        if (exactAnswer !== 0) {
-            return exactAnswer;
-        }
-        const linrgb = HctSolver.bisectToLimit(y, hueRadians);
-        return colorUtils.argbFromLinrgb(linrgb);
-    }
-    /**
-     * Finds an sRGB color with the given hue, chroma, and L*, if
-     * possible.
-     *
-     * @param hueDegrees The desired hue, in degrees.
-     * @param chroma The desired chroma.
-     * @param lstar The desired L*.
-     * @return An CAM16 object representing the sRGB color. The color
-     * has sufficiently close hue, chroma, and L* to the desired
-     * values, if possible; otherwise, the hue and L* will be
-     * sufficiently close, and chroma will be maximized.
-     */
-    static solveToCam(hueDegrees, chroma, lstar) {
-        return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));
-    }
-}
-HctSolver.SCALED_DISCOUNT_FROM_LINRGB = [
-    [
-        0.001200833568784504,
-        0.002389694492170889,
-        0.0002795742885861124,
-    ],
-    [
-        0.0005891086651375999,
-        0.0029785502573438758,
-        0.0003270666104008398,
-    ],
-    [
-        0.00010146692491640572,
-        0.0005364214359186694,
-        0.0032979401770712076,
-    ],
-];
-HctSolver.LINRGB_FROM_SCALED_DISCOUNT = [
-    [
-        1373.2198709594231,
-        -1100.4251190754821,
-        -7.278681089101213,
-    ],
-    [
-        -271.815969077903,
-        559.6580465940733,
-        -32.46047482791194,
-    ],
-    [
-        1.9622899599665666,
-        -57.173814538844006,
-        308.7233197812385,
-    ],
-];
-HctSolver.Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];
-HctSolver.CRITICAL_PLANES = [
-    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,
-    0.10623444424209313, 0.13658714259697685, 0.16693984095186062,
-    0.19729253930674434, 0.2276452376616281, 0.2579979360165119,
-    0.28835063437139563, 0.3188300904430532, 0.350925934958123,
-    0.3848314933096426, 0.42057480301049466, 0.458183274052838,
-    0.4976837250274023, 0.5391024159806381, 0.5824650784040898,
-    0.6277969426914107, 0.6751227633498623, 0.7244668422128921,
-    0.775853049866786, 0.829304845476233, 0.8848452951698498,
-    0.942497089126609, 1.0022825574869039, 1.0642236851973577,
-    1.1283421258858297, 1.1946592148522128, 1.2631959812511864,
-    1.3339731595349034, 1.407011200216447, 1.4823302800086415,
-    1.5599503113873272, 1.6398909516233677, 1.7221716113234105,
-    1.8068114625156377, 1.8938294463134073, 1.9832442801866852,
-    2.075074464868551, 2.1693382909216234, 2.2660538449872063,
-    2.36523901573795, 2.4669114995532007, 2.5710888059345764,
-    2.6777882626779785, 2.7870270208169257, 2.898822059350997,
-    3.0131901897720907, 3.1301480604002863, 3.2497121605402226,
-    3.3718988244681087, 3.4967242352587946, 3.624204428461639,
-    3.754355295633311, 3.887192587735158, 4.022731918402185,
-    4.160988767090289, 4.301978482107941, 4.445716283538092,
-    4.592217266055746, 4.741496401646282, 4.893568542229298,
-    5.048448422192488, 5.20615066083972, 5.3666897647573375,
-    5.5300801301023865, 5.696336044816294, 5.865471690767354,
-    6.037501145825082, 6.212438385869475, 6.390297286737924,
-    6.571091626112461, 6.7548350853498045, 6.941541251256611,
-    7.131223617812143, 7.323895587840543, 7.5195704746346665,
-    7.7182615035334345, 7.919981813454504, 8.124744458384042,
-    8.332562408825165, 8.543448553206703, 8.757415699253682,
-    8.974476575321063, 9.194643831691977, 9.417930041841839,
-    9.644347703669503, 9.873909240696694, 10.106627003236781,
-    10.342513269534024, 10.58158024687427, 10.8238400726681,
-    11.069304815507364, 11.317986476196008, 11.569896988756009,
-    11.825048221409341, 12.083451977536606, 12.345119996613247,
-    12.610063955123938, 12.878295467455942, 13.149826086772048,
-    13.42466730586372, 13.702830557985108, 13.984327217668513,
-    14.269168601521828, 14.55736596900856, 14.848930523210871,
-    15.143873411576273, 15.44220572664832, 15.743938506781891,
-    16.04908273684337, 16.35764934889634, 16.66964922287304,
-    16.985093187232053, 17.30399201960269, 17.62635644741625,
-    17.95219714852476, 18.281524751807332, 18.614349837764564,
-    18.95068293910138, 19.290534541298456, 19.633915083172692,
-    19.98083495742689, 20.331304511189067, 20.685334046541502,
-    21.042933821039977, 21.404114048223256, 21.76888489811322,
-    22.137256497705877, 22.50923893145328, 22.884842241736916,
-    23.264076429332462, 23.6469514538663, 24.033477234264016,
-    24.42366364919083, 24.817520537484558, 25.21505769858089,
-    25.61628489293138, 26.021211842414342, 26.429848230738664,
-    26.842203703840827, 27.258287870275353, 27.678110301598522,
-    28.10168053274597, 28.529008062403893, 28.96010235337422,
-    29.39497283293396, 29.83362889318845, 30.276079891419332,
-    30.722335150426627, 31.172403958865512, 31.62629557157785,
-    32.08401920991837, 32.54558406207592, 33.010999283389665,
-    33.4802739966603, 33.953417292456834, 34.430438229418264,
-    34.911345834551085, 35.39614910352207, 35.88485700094671,
-    36.37747846067349, 36.87402238606382, 37.37449765026789,
-    37.87891309649659, 38.38727753828926, 38.89959975977785,
-    39.41588851594697, 39.93615253289054, 40.460400508064545,
-    40.98864111053629, 41.520882981230194, 42.05713473317016,
-    42.597404951718396, 43.141702194811224, 43.6900349931913,
-    44.24241185063697, 44.798841244188324, 45.35933162437017,
-    45.92389141541209, 46.49252901546552, 47.065252796817916,
-    47.64207110610409, 48.22299226451468, 48.808024568002054,
-    49.3971762874833, 49.9904556690408, 50.587870934119984,
-    51.189430279724725, 51.79514187861014, 52.40501387947288,
-    53.0190544071392, 53.637271562750364, 54.259673423945976,
-    54.88626804504493, 55.517063457223934, 56.15206766869424,
-    56.79128866487574, 57.43473440856916, 58.08241284012621,
-    58.734331877617365, 59.39049941699807, 60.05092333227251,
-    60.715611475655585, 61.38457167773311, 62.057811747619894,
-    62.7353394731159, 63.417162620860914, 64.10328893648692,
-    64.79372614476921, 65.48848194977529, 66.18756403501224,
-    66.89098006357258, 67.59873767827808, 68.31084450182222,
-    69.02730813691093, 69.74813616640164, 70.47333615344107,
-    71.20291564160104, 71.93688215501312, 72.67524319850172,
-    73.41800625771542, 74.16517879925733, 74.9167682708136,
-    75.67278210128072, 76.43322770089146, 77.1981124613393,
-    77.96744375590167, 78.74122893956174, 79.51947534912904,
-    80.30219030335869, 81.08938110306934, 81.88105503125999,
-    82.67721935322541, 83.4778813166706, 84.28304815182372,
-    85.09272707154808, 85.90692527145302, 86.72564993000343,
-    87.54890820862819, 88.3767072518277, 89.2090541872801,
-    90.04595612594655, 90.88742016217518, 91.73345337380438,
-    92.58406282226491, 93.43925555268066, 94.29903859396902,
-    95.16341895893969, 96.03240364439274, 96.9059996312159,
-    97.78421388448044, 98.6670533535366, 99.55452497210776,
-];
-//# sourceMappingURL=hct_solver.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_solver.js.map b/node_modules/@material/material-color-utilities/dist/hct/hct_solver.js.map
deleted file mode 100644
index f173ada..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_solver.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"hct_solver.js","sourceRoot":"","sources":["../../hct/hct_solver.ts"],"names":[],"mappings":"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IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,gBAAgB;IAC5D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,gBAAgB,EAAM,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,kBAAkB,EAAI,kBAAkB,EAAI,gBAAgB;IAC5D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,gBAAgB,EAAM,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,gBAAgB,EAAM,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,gBAAgB,EAAM,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,gBAAgB,EAAM,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,gBAAgB,EAAM,iBAAiB;CAC9D,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as colorUtils from '../utils/color_utils';\nimport * as mathUtils from '../utils/math_utils';\n\nimport {Cam16} from './cam16';\nimport {ViewingConditions} from './viewing_conditions';\n\n\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n  static SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n      0.001200833568784504,\n      0.002389694492170889,\n      0.0002795742885861124,\n    ],\n    [\n      0.0005891086651375999,\n      0.0029785502573438758,\n      0.0003270666104008398,\n    ],\n    [\n      0.00010146692491640572,\n      0.0005364214359186694,\n      0.0032979401770712076,\n    ],\n  ];\n\n  static LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n      1373.2198709594231,\n      -1100.4251190754821,\n      -7.278681089101213,\n    ],\n    [\n      -271.815969077903,\n      559.6580465940733,\n      -32.46047482791194,\n    ],\n    [\n      1.9622899599665666,\n      -57.173814538844006,\n      308.7233197812385,\n    ],\n  ];\n\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\n\n  static CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313,  0.13658714259697685,  0.16693984095186062,\n    0.19729253930674434,  0.2276452376616281,   0.2579979360165119,\n    0.28835063437139563,  0.3188300904430532,   0.350925934958123,\n    0.3848314933096426,   0.42057480301049466,  0.458183274052838,\n    0.4976837250274023,   0.5391024159806381,   0.5824650784040898,\n    0.6277969426914107,   0.6751227633498623,   0.7244668422128921,\n    0.775853049866786,    0.829304845476233,    0.8848452951698498,\n    0.942497089126609,    1.0022825574869039,   1.0642236851973577,\n    1.1283421258858297,   1.1946592148522128,   1.2631959812511864,\n    1.3339731595349034,   1.407011200216447,    1.4823302800086415,\n    1.5599503113873272,   1.6398909516233677,   1.7221716113234105,\n    1.8068114625156377,   1.8938294463134073,   1.9832442801866852,\n    2.075074464868551,    2.1693382909216234,   2.2660538449872063,\n    2.36523901573795,     2.4669114995532007,   2.5710888059345764,\n    2.6777882626779785,   2.7870270208169257,   2.898822059350997,\n    3.0131901897720907,   3.1301480604002863,   3.2497121605402226,\n    3.3718988244681087,   3.4967242352587946,   3.624204428461639,\n    3.754355295633311,    3.887192587735158,    4.022731918402185,\n    4.160988767090289,    4.301978482107941,    4.445716283538092,\n    4.592217266055746,    4.741496401646282,    4.893568542229298,\n    5.048448422192488,    5.20615066083972,     5.3666897647573375,\n    5.5300801301023865,   5.696336044816294,    5.865471690767354,\n    6.037501145825082,    6.212438385869475,    6.390297286737924,\n    6.571091626112461,    6.7548350853498045,   6.941541251256611,\n    7.131223617812143,    7.323895587840543,    7.5195704746346665,\n    7.7182615035334345,   7.919981813454504,    8.124744458384042,\n    8.332562408825165,    8.543448553206703,    8.757415699253682,\n    8.974476575321063,    9.194643831691977,    9.417930041841839,\n    9.644347703669503,    9.873909240696694,    10.106627003236781,\n    10.342513269534024,   10.58158024687427,    10.8238400726681,\n    11.069304815507364,   11.317986476196008,   11.569896988756009,\n    11.825048221409341,   12.083451977536606,   12.345119996613247,\n    12.610063955123938,   12.878295467455942,   13.149826086772048,\n    13.42466730586372,    13.702830557985108,   13.984327217668513,\n    14.269168601521828,   14.55736596900856,    14.848930523210871,\n    15.143873411576273,   15.44220572664832,    15.743938506781891,\n    16.04908273684337,    16.35764934889634,    16.66964922287304,\n    16.985093187232053,   17.30399201960269,    17.62635644741625,\n    17.95219714852476,    18.281524751807332,   18.614349837764564,\n    18.95068293910138,    19.290534541298456,   19.633915083172692,\n    19.98083495742689,    20.331304511189067,   20.685334046541502,\n    21.042933821039977,   21.404114048223256,   21.76888489811322,\n    22.137256497705877,   22.50923893145328,    22.884842241736916,\n    23.264076429332462,   23.6469514538663,     24.033477234264016,\n    24.42366364919083,    24.817520537484558,   25.21505769858089,\n    25.61628489293138,    26.021211842414342,   26.429848230738664,\n    26.842203703840827,   27.258287870275353,   27.678110301598522,\n    28.10168053274597,    28.529008062403893,   28.96010235337422,\n    29.39497283293396,    29.83362889318845,    30.276079891419332,\n    30.722335150426627,   31.172403958865512,   31.62629557157785,\n    32.08401920991837,    32.54558406207592,    33.010999283389665,\n    33.4802739966603,     33.953417292456834,   34.430438229418264,\n    34.911345834551085,   35.39614910352207,    35.88485700094671,\n    36.37747846067349,    36.87402238606382,    37.37449765026789,\n    37.87891309649659,    38.38727753828926,    38.89959975977785,\n    39.41588851594697,    39.93615253289054,    40.460400508064545,\n    40.98864111053629,    41.520882981230194,   42.05713473317016,\n    42.597404951718396,   43.141702194811224,   43.6900349931913,\n    44.24241185063697,    44.798841244188324,   45.35933162437017,\n    45.92389141541209,    46.49252901546552,    47.065252796817916,\n    47.64207110610409,    48.22299226451468,    48.808024568002054,\n    49.3971762874833,     49.9904556690408,     50.587870934119984,\n    51.189430279724725,   51.79514187861014,    52.40501387947288,\n    53.0190544071392,     53.637271562750364,   54.259673423945976,\n    54.88626804504493,    55.517063457223934,   56.15206766869424,\n    56.79128866487574,    57.43473440856916,    58.08241284012621,\n    58.734331877617365,   59.39049941699807,    60.05092333227251,\n    60.715611475655585,   61.38457167773311,    62.057811747619894,\n    62.7353394731159,     63.417162620860914,   64.10328893648692,\n    64.79372614476921,    65.48848194977529,    66.18756403501224,\n    66.89098006357258,    67.59873767827808,    68.31084450182222,\n    69.02730813691093,    69.74813616640164,    70.47333615344107,\n    71.20291564160104,    71.93688215501312,    72.67524319850172,\n    73.41800625771542,    74.16517879925733,    74.9167682708136,\n    75.67278210128072,    76.43322770089146,    77.1981124613393,\n    77.96744375590167,    78.74122893956174,    79.51947534912904,\n    80.30219030335869,    81.08938110306934,    81.88105503125999,\n    82.67721935322541,    83.4778813166706,     84.28304815182372,\n    85.09272707154808,    85.90692527145302,    86.72564993000343,\n    87.54890820862819,    88.3767072518277,     89.2090541872801,\n    90.04595612594655,    90.88742016217518,    91.73345337380438,\n    92.58406282226491,    93.43925555268066,    94.29903859396902,\n    95.16341895893969,    96.03240364439274,    96.9059996312159,\n    97.78421388448044,    98.6670533535366,     99.55452497210776,\n  ];\n\n  /**\n   * Sanitizes a small enough angle in radians.\n   *\n   * @param angle An angle in radians; must not deviate too much\n   * from 0.\n   * @return A coterminal angle between 0 and 2pi.\n   */\n  private static sanitizeRadians(angle: number): number {\n    return (angle + Math.PI * 8) % (Math.PI * 2);\n  }\n\n  /**\n   * Delinearizes an RGB component, returning a floating-point\n   * number.\n   *\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n   * linear R/G/B channel\n   * @return 0.0 <= output <= 255.0, color channel converted to\n   * regular RGB space\n   */\n  private static trueDelinearized(rgbComponent: number): number {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n      delinearized = normalized * 12.92;\n    } else {\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return delinearized * 255.0;\n  }\n\n  private static chromaticAdaptation(component: number): number {\n    const af = Math.pow(Math.abs(component), 0.42);\n    return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\n  }\n\n  /**\n   * Returns the hue of a linear RGB color in CAM16.\n   *\n   * @param linrgb The linear RGB coordinates of a color.\n   * @return The hue of the color in CAM16, in radians.\n   */\n  private static hueOf(linrgb: number[]): number {\n    const scaledDiscount =\n        mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n    const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n    const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n    const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    return Math.atan2(b, a);\n  }\n\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\n    const deltaAB = HctSolver.sanitizeRadians(b - a);\n    const deltaAC = HctSolver.sanitizeRadians(c - a);\n    return deltaAB < deltaAC;\n  }\n\n  /**\n   * Solves the lerp equation.\n   *\n   * @param source The starting number.\n   * @param mid The number in the middle.\n   * @param target The ending number.\n   * @return A number t such that lerp(source, target, t) = mid.\n   */\n  private static intercept(source: number, mid: number, target: number):\n      number {\n    return (mid - source) / (target - source);\n  }\n\n  private static lerpPoint(source: number[], t: number, target: number[]):\n      number[] {\n    return [\n      source[0] + (target[0] - source[0]) * t,\n      source[1] + (target[1] - source[1]) * t,\n      source[2] + (target[2] - source[2]) * t,\n    ];\n  }\n\n  /**\n   * Intersects a segment with a plane.\n   *\n   * @param source The coordinates of point A.\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\n   * @param target The coordinates of point B.\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\n   * G, 2: B)\n   * @return The intersection point of the segment AB with the plane\n   * R=coordinate, G=coordinate, or B=coordinate\n   */\n  private static setCoordinate(\n      source: number[],\n      coordinate: number,\n      target: number[],\n      axis: number,\n      ): number[] {\n    const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n    return HctSolver.lerpPoint(source, t, target);\n  }\n\n  private static isBounded(x: number): boolean {\n    return 0.0 <= x && x <= 100.0;\n  }\n\n  /**\n   * Returns the nth possible vertex of the polygonal intersection.\n   *\n   * @param y The Y value of the plane.\n   * @param n The zero-based index of the point. 0 <= n <= 11.\n   * @return The nth possible vertex of the polygonal intersection\n   * of the y plane and the RGB cube, in linear RGB coordinates, if\n   * it exists. If this possible vertex lies outside of the cube,\n   * [-1.0, -1.0, -1.0] is returned.\n   */\n  private static nthVertex(y: number, n: number): number[] {\n    const kR = HctSolver.Y_FROM_LINRGB[0];\n    const kG = HctSolver.Y_FROM_LINRGB[1];\n    const kB = HctSolver.Y_FROM_LINRGB[2];\n    const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n    const coordB = n % 2 === 0 ? 0.0 : 100.0;\n    if (n < 4) {\n      const g = coordA;\n      const b = coordB;\n      const r = (y - g * kG - b * kB) / kR;\n      if (HctSolver.isBounded(r)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else if (n < 8) {\n      const b = coordA;\n      const r = coordB;\n      const g = (y - r * kR - b * kB) / kG;\n      if (HctSolver.isBounded(g)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else {\n      const r = coordA;\n      const g = coordB;\n      const b = (y - r * kR - g * kG) / kB;\n      if (HctSolver.isBounded(b)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    }\n  }\n\n  /**\n   * Finds the segment containing the desired color.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return A list of two sets of linear RGB coordinates, each\n   * corresponding to an endpoint of the segment containing the\n   * desired color.\n   */\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\n    let left = [-1.0, -1.0, -1.0];\n    let right = left;\n    let leftHue = 0.0;\n    let rightHue = 0.0;\n    let initialized = false;\n    let uncut = true;\n    for (let n = 0; n < 12; n++) {\n      const mid = HctSolver.nthVertex(y, n);\n      if (mid[0] < 0) {\n        continue;\n      }\n      const midHue = HctSolver.hueOf(mid);\n      if (!initialized) {\n        left = mid;\n        right = mid;\n        leftHue = midHue;\n        rightHue = midHue;\n        initialized = true;\n        continue;\n      }\n      if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n        uncut = false;\n        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n          right = mid;\n          rightHue = midHue;\n        } else {\n          left = mid;\n          leftHue = midHue;\n        }\n      }\n    }\n    return [left, right];\n  }\n\n  private static midpoint(a: number[], b: number[]): number[] {\n    return [\n      (a[0] + b[0]) / 2,\n      (a[1] + b[1]) / 2,\n      (a[2] + b[2]) / 2,\n    ];\n  }\n\n  private static criticalPlaneBelow(x: number): number {\n    return Math.floor(x - 0.5);\n  }\n\n  private static criticalPlaneAbove(x: number): number {\n    return Math.ceil(x - 0.5);\n  }\n\n  /**\n   * Finds a color with the given Y and hue on the boundary of the\n   * cube.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return The desired color, in linear RGB coordinates.\n   */\n  private static bisectToLimit(y: number, targetHue: number): number[] {\n    const segment = HctSolver.bisectToSegment(y, targetHue);\n    let left = segment[0];\n    let leftHue = HctSolver.hueOf(left);\n    let right = segment[1];\n    for (let axis = 0; axis < 3; axis++) {\n      if (left[axis] !== right[axis]) {\n        let lPlane = -1;\n        let rPlane = 255;\n        if (left[axis] < right[axis]) {\n          lPlane = HctSolver.criticalPlaneBelow(\n              HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneAbove(\n              HctSolver.trueDelinearized(right[axis]));\n        } else {\n          lPlane = HctSolver.criticalPlaneAbove(\n              HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneBelow(\n              HctSolver.trueDelinearized(right[axis]));\n        }\n        for (let i = 0; i < 8; i++) {\n          if (Math.abs(rPlane - lPlane) <= 1) {\n            break;\n          } else {\n            const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n            const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n            const mid =\n                HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n            const midHue = HctSolver.hueOf(mid);\n            if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n              right = mid;\n              rPlane = mPlane;\n            } else {\n              left = mid;\n              leftHue = midHue;\n              lPlane = mPlane;\n            }\n          }\n        }\n      }\n    }\n    return HctSolver.midpoint(left, right);\n  }\n\n  private static inverseChromaticAdaptation(adapted: number): number {\n    const adaptedAbs = Math.abs(adapted);\n    const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n    return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n  }\n\n  /**\n   * Finds a color with the given hue, chroma, and Y.\n   *\n   * @param hueRadians The desired hue in radians.\n   * @param chroma The desired chroma.\n   * @param y The desired Y.\n   * @return The desired color as a hexadecimal integer, if found; 0\n   * otherwise.\n   */\n  private static findResultByJ(hueRadians: number, chroma: number, y: number):\n      number {\n    // Initial estimate of j.\n    let j = Math.sqrt(y) * 11.0;\n    // ===========================================================\n    // Operations inlined from Cam16 to avoid repeated calculation\n    // ===========================================================\n    const viewingConditions = ViewingConditions.DEFAULT;\n    const tInnerCoeff =\n        1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const hSin = Math.sin(hueRadians);\n    const hCos = Math.cos(hueRadians);\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      const jNormalized = j / 100.0;\n      const alpha =\n          chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n      const ac = viewingConditions.aw *\n          Math.pow(\n              jNormalized,\n              1.0 / viewingConditions.c / viewingConditions.z,\n          );\n      const p2 = ac / viewingConditions.nbb;\n      const gamma = 23.0 * (p2 + 0.305) * t /\n          (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      const a = gamma * hCos;\n      const b = gamma * hSin;\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n      const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n      const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n      const linrgb = mathUtils.matrixMultiply(\n          [rCScaled, gCScaled, bCScaled],\n          HctSolver.LINRGB_FROM_SCALED_DISCOUNT,\n      );\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n        return 0;\n      }\n      const kR = HctSolver.Y_FROM_LINRGB[0];\n      const kG = HctSolver.Y_FROM_LINRGB[1];\n      const kB = HctSolver.Y_FROM_LINRGB[2];\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n      if (fnj <= 0) {\n        return 0;\n      }\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n          return 0;\n        }\n        return colorUtils.argbFromLinrgb(linrgb);\n      }\n      // Iterates with Newton method,\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\n      j = j - (fnj - y) * j / (2 * fnj);\n    }\n    return 0;\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return A hexadecimal representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n      return colorUtils.argbFromLstar(lstar);\n    }\n    hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n    const hueRadians = hueDegrees / 180 * Math.PI;\n    const y = colorUtils.yFromLstar(lstar);\n    const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n    if (exactAnswer !== 0) {\n      return exactAnswer;\n    }\n    const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n    return colorUtils.argbFromLinrgb(linrgb);\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return An CAM16 object representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\n    return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_test.d.ts b/node_modules/@material/material-color-utilities/dist/hct/hct_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_test.js b/node_modules/@material/material-color-utilities/dist/hct/hct_test.js
deleted file mode 100644
index 8804fb2..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_test.js
+++ /dev/null
@@ -1,156 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import * as colorUtils from '../utils/color_utils';
-import { Cam16 } from './cam16';
-import { Hct } from './hct';
-import { ViewingConditions } from './viewing_conditions';
-const RED = 0xffff0000;
-const GREEN = 0xff00ff00;
-const BLUE = 0xff0000ff;
-const WHITE = 0xffffffff;
-const BLACK = 0xff000000;
-describe('CAM to ARGB', () => {
-    it('red', () => {
-        const cam = Cam16.fromInt(RED);
-        expect(cam.hue).toBeCloseTo(27.408, 3);
-        expect(cam.chroma).toBeCloseTo(113.358, 3);
-        expect(cam.j).toBeCloseTo(46.445, 3);
-        expect(cam.m).toBeCloseTo(89.494, 3);
-        expect(cam.s).toBeCloseTo(91.890, 3);
-        expect(cam.q).toBeCloseTo(105.989, 3);
-    });
-    it('green', () => {
-        const cam = Cam16.fromInt(GREEN);
-        expect(cam.hue).toBeCloseTo(142.140, 3);
-        expect(cam.chroma).toBeCloseTo(108.410, 3);
-        expect(cam.j).toBeCloseTo(79.332, 3);
-        expect(cam.m).toBeCloseTo(85.588, 3);
-        expect(cam.s).toBeCloseTo(78.605, 3);
-        expect(cam.q).toBeCloseTo(138.520, 3);
-    });
-    it('blue', () => {
-        const cam = Cam16.fromInt(BLUE);
-        expect(cam.hue).toBeCloseTo(282.788, 3);
-        expect(cam.chroma).toBeCloseTo(87.231, 3);
-        expect(cam.j).toBeCloseTo(25.466, 3);
-        expect(cam.m).toBeCloseTo(68.867, 3);
-        expect(cam.s).toBeCloseTo(93.675, 3);
-        expect(cam.q).toBeCloseTo(78.481, 3);
-    });
-    it('white', () => {
-        const cam = Cam16.fromInt(WHITE);
-        expect(cam.hue).toBeCloseTo(209.492, 3);
-        expect(cam.chroma).toBeCloseTo(2.869, 3);
-        expect(cam.j).toBeCloseTo(100.0, 3);
-        expect(cam.m).toBeCloseTo(2.265, 3);
-        expect(cam.s).toBeCloseTo(12.068, 3);
-        expect(cam.q).toBeCloseTo(155.521, 3);
-    });
-    it('black', () => {
-        const cam = Cam16.fromInt(BLACK);
-        expect(cam.hue).toBeCloseTo(0.0, 3);
-        expect(cam.chroma).toBeCloseTo(0.0, 3);
-        expect(cam.j).toBeCloseTo(0.0, 3);
-        expect(cam.m).toBeCloseTo(0.0, 3);
-        expect(cam.s).toBeCloseTo(0.0, 3);
-        expect(cam.q).toBeCloseTo(0.0, 3);
-    });
-});
-describe('CAM to ARGB to CAM', () => {
-    it('red', () => {
-        const cam = Cam16.fromInt(RED);
-        const argb = cam.toInt();
-        expect(argb).toEqual(RED);
-    });
-    it('green', () => {
-        const cam = Cam16.fromInt(GREEN);
-        const argb = cam.toInt();
-        expect(argb).toEqual(GREEN);
-    });
-    it('blue', () => {
-        const cam = Cam16.fromInt(BLUE);
-        const argb = cam.toInt();
-        expect(argb).toEqual(BLUE);
-    });
-});
-describe('ARGB to HCT', () => {
-    it('green', () => {
-        const hct = Hct.fromInt(GREEN);
-        expect(hct.hue).toBeCloseTo(142.139, 2);
-        expect(hct.chroma).toBeCloseTo(108.410, 2);
-        expect(hct.tone).toBeCloseTo(87.737, 2);
-    });
-    it('blue', () => {
-        const hct = Hct.fromInt(BLUE);
-        expect(hct.hue).toBeCloseTo(282.788, 2);
-        expect(hct.chroma).toBeCloseTo(87.230, 2);
-        expect(hct.tone).toBeCloseTo(32.302, 2);
-    });
-    it('blue tone 90', () => {
-        const hct = Hct.from(282.788, 87.230, 90.0);
-        expect(hct.hue).toBeCloseTo(282.239, 2);
-        expect(hct.chroma).toBeCloseTo(19.144, 2);
-        expect(hct.tone).toBeCloseTo(90.035, 2);
-    });
-});
-describe('viewing conditions', () => {
-    it('default', () => {
-        const vc = ViewingConditions.DEFAULT;
-        expect(vc.n).toBeCloseTo(0.184, 3);
-        expect(vc.aw).toBeCloseTo(29.981, 3);
-        expect(vc.nbb).toBeCloseTo(1.017, 3);
-        expect(vc.ncb).toBeCloseTo(1.017, 3);
-        expect(vc.c).toBeCloseTo(0.69, 3);
-        expect(vc.nc).toBeCloseTo(1.0, 3);
-        expect(vc.rgbD[0]).toBeCloseTo(1.021, 3);
-        expect(vc.rgbD[1]).toBeCloseTo(0.986, 3);
-        expect(vc.rgbD[2]).toBeCloseTo(0.934, 3);
-        expect(vc.fl).toBeCloseTo(0.388, 3);
-        expect(vc.fLRoot).toBeCloseTo(0.789, 3);
-        expect(vc.z).toBeCloseTo(1.909, 3);
-    });
-});
-function colorIsOnBoundary(argb) {
-    return colorUtils.redFromArgb(argb) === 0 ||
-        colorUtils.redFromArgb(argb) === 255 ||
-        colorUtils.greenFromArgb(argb) === 0 ||
-        colorUtils.greenFromArgb(argb) === 255 ||
-        colorUtils.blueFromArgb(argb) === 0 ||
-        colorUtils.blueFromArgb(argb) === 255;
-}
-describe('CamSolver', () => {
-    it('returns a sufficiently close color', () => {
-        for (let hue = 15; hue < 360; hue += 30) {
-            for (let chroma = 0; chroma <= 100; chroma += 10) {
-                for (let tone = 20; tone <= 80; tone += 10) {
-                    const hctColor = Hct.from(hue, chroma, tone);
-                    if (chroma > 0) {
-                        expect(Math.abs(hctColor.hue - hue)).toBeLessThanOrEqual(4.0);
-                    }
-                    expect(hctColor.chroma).toBeGreaterThanOrEqual(0);
-                    expect(hctColor.chroma).toBeLessThanOrEqual(chroma + 2.5);
-                    if (hctColor.chroma < chroma - 2.5) {
-                        expect(colorIsOnBoundary(hctColor.toInt())).toBe(true);
-                    }
-                    expect(Math.abs(hctColor.tone - tone)).toBeLessThanOrEqual(0.5);
-                }
-            }
-        }
-    });
-});
-//# sourceMappingURL=hct_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/hct_test.js.map b/node_modules/@material/material-color-utilities/dist/hct/hct_test.js.map
deleted file mode 100644
index 7476d22..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/hct_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"hct_test.js","sourceRoot":"","sources":["../../hct/hct_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport * as colorUtils from '../utils/color_utils';\n\nimport {Cam16} from './cam16';\nimport {Hct} from './hct';\nimport {ViewingConditions} from './viewing_conditions';\n\nconst RED = 0xffff0000;\nconst GREEN = 0xff00ff00;\nconst BLUE = 0xff0000ff;\nconst WHITE = 0xffffffff;\nconst BLACK = 0xff000000;\n\ndescribe('CAM to ARGB', () => {\n  it('red', () => {\n    const cam = Cam16.fromInt(RED);\n\n    expect(cam.hue).toBeCloseTo(27.408, 3);\n    expect(cam.chroma).toBeCloseTo(113.358, 3);\n    expect(cam.j).toBeCloseTo(46.445, 3);\n    expect(cam.m).toBeCloseTo(89.494, 3);\n    expect(cam.s).toBeCloseTo(91.890, 3);\n    expect(cam.q).toBeCloseTo(105.989, 3);\n  });\n\n  it('green', () => {\n    const cam = Cam16.fromInt(GREEN);\n\n    expect(cam.hue).toBeCloseTo(142.140, 3);\n    expect(cam.chroma).toBeCloseTo(108.410, 3);\n    expect(cam.j).toBeCloseTo(79.332, 3);\n    expect(cam.m).toBeCloseTo(85.588, 3);\n    expect(cam.s).toBeCloseTo(78.605, 3);\n    expect(cam.q).toBeCloseTo(138.520, 3);\n  });\n\n  it('blue', () => {\n    const cam = Cam16.fromInt(BLUE);\n\n    expect(cam.hue).toBeCloseTo(282.788, 3);\n    expect(cam.chroma).toBeCloseTo(87.231, 3);\n    expect(cam.j).toBeCloseTo(25.466, 3);\n    expect(cam.m).toBeCloseTo(68.867, 3);\n    expect(cam.s).toBeCloseTo(93.675, 3);\n    expect(cam.q).toBeCloseTo(78.481, 3);\n  });\n\n  it('white', () => {\n    const cam = Cam16.fromInt(WHITE);\n\n    expect(cam.hue).toBeCloseTo(209.492, 3);\n    expect(cam.chroma).toBeCloseTo(2.869, 3);\n    expect(cam.j).toBeCloseTo(100.0, 3);\n    expect(cam.m).toBeCloseTo(2.265, 3);\n    expect(cam.s).toBeCloseTo(12.068, 3);\n    expect(cam.q).toBeCloseTo(155.521, 3);\n  });\n\n  it('black', () => {\n    const cam = Cam16.fromInt(BLACK);\n\n    expect(cam.hue).toBeCloseTo(0.0, 3);\n    expect(cam.chroma).toBeCloseTo(0.0, 3);\n    expect(cam.j).toBeCloseTo(0.0, 3);\n    expect(cam.m).toBeCloseTo(0.0, 3);\n    expect(cam.s).toBeCloseTo(0.0, 3);\n    expect(cam.q).toBeCloseTo(0.0, 3);\n  });\n});\n\ndescribe('CAM to ARGB to CAM', () => {\n  it('red', () => {\n    const cam = Cam16.fromInt(RED);\n    const argb = cam.toInt();\n    expect(argb).toEqual(RED);\n  });\n\n  it('green', () => {\n    const cam = Cam16.fromInt(GREEN);\n    const argb = cam.toInt();\n    expect(argb).toEqual(GREEN);\n  });\n\n  it('blue', () => {\n    const cam = Cam16.fromInt(BLUE);\n    const argb = cam.toInt();\n    expect(argb).toEqual(BLUE);\n  });\n});\n\ndescribe('ARGB to HCT', () => {\n  it('green', () => {\n    const hct = Hct.fromInt(GREEN);\n    expect(hct.hue).toBeCloseTo(142.139, 2);\n    expect(hct.chroma).toBeCloseTo(108.410, 2);\n    expect(hct.tone).toBeCloseTo(87.737, 2);\n  });\n\n  it('blue', () => {\n    const hct = Hct.fromInt(BLUE);\n    expect(hct.hue).toBeCloseTo(282.788, 2);\n    expect(hct.chroma).toBeCloseTo(87.230, 2);\n    expect(hct.tone).toBeCloseTo(32.302, 2);\n  });\n\n  it('blue tone 90', () => {\n    const hct = Hct.from(282.788, 87.230, 90.0);\n    expect(hct.hue).toBeCloseTo(282.239, 2);\n    expect(hct.chroma).toBeCloseTo(19.144, 2);\n    expect(hct.tone).toBeCloseTo(90.035, 2);\n  });\n});\n\n\ndescribe('viewing conditions', () => {\n  it('default', () => {\n    const vc = ViewingConditions.DEFAULT;\n    expect(vc.n).toBeCloseTo(0.184, 3);\n    expect(vc.aw).toBeCloseTo(29.981, 3);\n    expect(vc.nbb).toBeCloseTo(1.017, 3);\n    expect(vc.ncb).toBeCloseTo(1.017, 3);\n    expect(vc.c).toBeCloseTo(0.69, 3);\n    expect(vc.nc).toBeCloseTo(1.0, 3);\n    expect(vc.rgbD[0]).toBeCloseTo(1.021, 3);\n    expect(vc.rgbD[1]).toBeCloseTo(0.986, 3);\n    expect(vc.rgbD[2]).toBeCloseTo(0.934, 3);\n    expect(vc.fl).toBeCloseTo(0.388, 3);\n    expect(vc.fLRoot).toBeCloseTo(0.789, 3);\n    expect(vc.z).toBeCloseTo(1.909, 3);\n  });\n});\n\nfunction colorIsOnBoundary(argb: number): boolean {\n  return colorUtils.redFromArgb(argb) === 0 ||\n      colorUtils.redFromArgb(argb) === 255 ||\n      colorUtils.greenFromArgb(argb) === 0 ||\n      colorUtils.greenFromArgb(argb) === 255 ||\n      colorUtils.blueFromArgb(argb) === 0 ||\n      colorUtils.blueFromArgb(argb) === 255;\n}\n\ndescribe('CamSolver', () => {\n  it('returns a sufficiently close color', () => {\n    for (let hue = 15; hue < 360; hue += 30) {\n      for (let chroma = 0; chroma <= 100; chroma += 10) {\n        for (let tone = 20; tone <= 80; tone += 10) {\n          const hctColor = Hct.from(hue, chroma, tone);\n\n          if (chroma > 0) {\n            expect(Math.abs(hctColor.hue - hue)).toBeLessThanOrEqual(4.0);\n          }\n\n          expect(hctColor.chroma).toBeGreaterThanOrEqual(0);\n          expect(hctColor.chroma).toBeLessThanOrEqual(chroma + 2.5);\n\n          if (hctColor.chroma < chroma - 2.5) {\n            expect(colorIsOnBoundary(hctColor.toInt())).toBe(true);\n          }\n\n          expect(Math.abs(hctColor.tone - tone)).toBeLessThanOrEqual(0.5);\n        }\n      }\n    }\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.d.ts b/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.d.ts
deleted file mode 100644
index 259a24c..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.d.ts
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * In traditional color spaces, a color can be identified solely by the
- * observer's measurement of the color. Color appearance models such as CAM16
- * also use information about the environment where the color was
- * observed, known as the viewing conditions.
- *
- * For example, white under the traditional assumption of a midday sun white
- * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
- * hue 203, chroma 3, lightness 100)
- *
- * This class caches intermediate values of the CAM16 conversion process that
- * depend only on viewing conditions, enabling speed ups.
- */
-export declare class ViewingConditions {
-    n: number;
-    aw: number;
-    nbb: number;
-    ncb: number;
-    c: number;
-    nc: number;
-    rgbD: number[];
-    fl: number;
-    fLRoot: number;
-    z: number;
-    /** sRGB-like viewing conditions.  */
-    static DEFAULT: ViewingConditions;
-    /**
-     * Create ViewingConditions from a simple, physically relevant, set of
-     * parameters.
-     *
-     * @param whitePoint White point, measured in the XYZ color space.
-     *     default = D65, or sunny day afternoon
-     * @param adaptingLuminance The luminance of the adapting field. Informally,
-     *     how bright it is in the room where the color is viewed. Can be
-     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,
-     *     or 200 lux.
-     * @param backgroundLstar The lightness of the area surrounding the color.
-     *     measured by L* in L*a*b*. default = 50.0
-     * @param surround A general description of the lighting surrounding the
-     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a
-     *     dimly light room, like watching TV at home at night. 2.0 means there
-     *     is no difference between the lighting on the color and around it.
-     *     default = 2.0
-     * @param discountingIlluminant Whether the eye accounts for the tint of the
-     *     ambient lighting, such as knowing an apple is still red in green light.
-     *     default = false, the eye does not perform this process on
-     *       self-luminous objects like displays.
-     */
-    static make(whitePoint?: number[], adaptingLuminance?: number, backgroundLstar?: number, surround?: number, discountingIlluminant?: boolean): ViewingConditions;
-    /**
-     * Parameters are intermediate values of the CAM16 conversion process. Their
-     * names are shorthand for technical color science terminology, this class
-     * would not benefit from documenting them individually. A brief overview
-     * is available in the CAM16 specification, and a complete overview requires
-     * a color science textbook, such as Fairchild's Color Appearance Models.
-     */
-    private constructor();
-}
diff --git a/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js b/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js
deleted file mode 100644
index 23dcc82..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js
+++ /dev/null
@@ -1,117 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as utils from '../utils/color_utils';
-import * as math from '../utils/math_utils';
-/**
- * In traditional color spaces, a color can be identified solely by the
- * observer's measurement of the color. Color appearance models such as CAM16
- * also use information about the environment where the color was
- * observed, known as the viewing conditions.
- *
- * For example, white under the traditional assumption of a midday sun white
- * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
- * hue 203, chroma 3, lightness 100)
- *
- * This class caches intermediate values of the CAM16 conversion process that
- * depend only on viewing conditions, enabling speed ups.
- */
-export class ViewingConditions {
-    /**
-     * Parameters are intermediate values of the CAM16 conversion process. Their
-     * names are shorthand for technical color science terminology, this class
-     * would not benefit from documenting them individually. A brief overview
-     * is available in the CAM16 specification, and a complete overview requires
-     * a color science textbook, such as Fairchild's Color Appearance Models.
-     */
-    constructor(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {
-        this.n = n;
-        this.aw = aw;
-        this.nbb = nbb;
-        this.ncb = ncb;
-        this.c = c;
-        this.nc = nc;
-        this.rgbD = rgbD;
-        this.fl = fl;
-        this.fLRoot = fLRoot;
-        this.z = z;
-    }
-    /**
-     * Create ViewingConditions from a simple, physically relevant, set of
-     * parameters.
-     *
-     * @param whitePoint White point, measured in the XYZ color space.
-     *     default = D65, or sunny day afternoon
-     * @param adaptingLuminance The luminance of the adapting field. Informally,
-     *     how bright it is in the room where the color is viewed. Can be
-     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,
-     *     or 200 lux.
-     * @param backgroundLstar The lightness of the area surrounding the color.
-     *     measured by L* in L*a*b*. default = 50.0
-     * @param surround A general description of the lighting surrounding the
-     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a
-     *     dimly light room, like watching TV at home at night. 2.0 means there
-     *     is no difference between the lighting on the color and around it.
-     *     default = 2.0
-     * @param discountingIlluminant Whether the eye accounts for the tint of the
-     *     ambient lighting, such as knowing an apple is still red in green light.
-     *     default = false, the eye does not perform this process on
-     *       self-luminous objects like displays.
-     */
-    static make(whitePoint = utils.whitePointD65(), adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0, backgroundLstar = 50.0, surround = 2.0, discountingIlluminant = false) {
-        const xyz = whitePoint;
-        const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;
-        const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;
-        const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;
-        const f = 0.8 + surround / 10.0;
-        const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :
-            math.lerp(0.525, 0.59, (f - 0.8) * 10.0);
-        let d = discountingIlluminant ?
-            1.0 :
-            f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));
-        d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;
-        const nc = f;
-        const rgbD = [
-            d * (100.0 / rW) + 1.0 - d,
-            d * (100.0 / gW) + 1.0 - d,
-            d * (100.0 / bW) + 1.0 - d,
-        ];
-        const k = 1.0 / (5.0 * adaptingLuminance + 1.0);
-        const k4 = k * k * k * k;
-        const k4F = 1.0 - k4;
-        const fl = k4 * adaptingLuminance +
-            0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);
-        const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];
-        const z = 1.48 + Math.sqrt(n);
-        const nbb = 0.725 / Math.pow(n, 0.2);
-        const ncb = nbb;
-        const rgbAFactors = [
-            Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),
-            Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),
-            Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),
-        ];
-        const rgbA = [
-            (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),
-            (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),
-            (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),
-        ];
-        const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;
-        return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);
-    }
-}
-/** sRGB-like viewing conditions.  */
-ViewingConditions.DEFAULT = ViewingConditions.make();
-//# sourceMappingURL=viewing_conditions.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js.map b/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js.map
deleted file mode 100644
index 0725dd1..0000000
--- a/node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"viewing_conditions.js","sourceRoot":"","sources":["../../hct/viewing_conditions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n  /** sRGB-like viewing conditions.  */\n  static DEFAULT = ViewingConditions.make();\n\n  /**\n   * Create ViewingConditions from a simple, physically relevant, set of\n   * parameters.\n   *\n   * @param whitePoint White point, measured in the XYZ color space.\n   *     default = D65, or sunny day afternoon\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\n   *     how bright it is in the room where the color is viewed. Can be\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n   *     or 200 lux.\n   * @param backgroundLstar The lightness of the area surrounding the color.\n   *     measured by L* in L*a*b*. default = 50.0\n   * @param surround A general description of the lighting surrounding the\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n   *     dimly light room, like watching TV at home at night. 2.0 means there\n   *     is no difference between the lighting on the color and around it.\n   *     default = 2.0\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\n   *     ambient lighting, such as knowing an apple is still red in green light.\n   *     default = false, the eye does not perform this process on\n   *       self-luminous objects like displays.\n   */\n  static make(\n      whitePoint = utils.whitePointD65(),\n      adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0,\n      backgroundLstar = 50.0, surround = 2.0,\n      discountingIlluminant = false): ViewingConditions {\n    const xyz = whitePoint;\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n    const f = 0.8 + surround / 10.0;\n    const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\n                         math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n    let d = discountingIlluminant ?\n        1.0 :\n        f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n    const nc = f;\n    const rgbD = [\n      d * (100.0 / rW) + 1.0 - d,\n      d * (100.0 / gW) + 1.0 - d,\n      d * (100.0 / bW) + 1.0 - d,\n    ];\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n    const k4 = k * k * k * k;\n    const k4F = 1.0 - k4;\n    const fl = k4 * adaptingLuminance +\n        0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n    const z = 1.48 + Math.sqrt(n);\n    const nbb = 0.725 / Math.pow(n, 0.2);\n    const ncb = nbb;\n    const rgbAFactors = [\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n    ];\n    const rgbA = [\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n    ];\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n    return new ViewingConditions(\n        n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n  }\n\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  private constructor(\n      public n: number, public aw: number, public nbb: number,\n      public ncb: number, public c: number, public nc: number,\n      public rgbD: number[], public fl: number, public fLRoot: number,\n      public z: number) {}\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/index.cjs b/node_modules/@material/material-color-utilities/dist/index.cjs
new file mode 100644
index 0000000..0b2fa0c
--- /dev/null
+++ b/node_modules/@material/material-color-utilities/dist/index.cjs
@@ -0,0 +1,2574 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function signum(num) {
+  if (num < 0) {
+    return -1;
+  } else if (num === 0) {
+    return 0;
+  } else {
+    return 1;
+  }
+}
+function lerp(start, stop, amount) {
+  return (1 - amount) * start + amount * stop;
+}
+function clampInt(min, max, input) {
+  if (input < min) {
+    return min;
+  } else if (input > max) {
+    return max;
+  }
+  return input;
+}
+function clampDouble(min, max, input) {
+  if (input < min) {
+    return min;
+  } else if (input > max) {
+    return max;
+  }
+  return input;
+}
+function sanitizeDegreesInt(degrees) {
+  degrees = degrees % 360;
+  if (degrees < 0) {
+    degrees = degrees + 360;
+  }
+  return degrees;
+}
+function sanitizeDegreesDouble(degrees) {
+  degrees = degrees % 360;
+  if (degrees < 0) {
+    degrees = degrees + 360;
+  }
+  return degrees;
+}
+function rotationDirection(from, to) {
+  const increasingDifference = sanitizeDegreesDouble(to - from);
+  return increasingDifference <= 180 ? 1 : -1;
+}
+function differenceDegrees(a, b) {
+  return 180 - Math.abs(Math.abs(a - b) - 180);
+}
+function matrixMultiply(row, matrix) {
+  const a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];
+  const b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];
+  const c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];
+  return [a, b, c];
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const SRGB_TO_XYZ = [
+  [0.41233895, 0.35762064, 0.18051042],
+  [0.2126, 0.7152, 0.0722],
+  [0.01932141, 0.11916382, 0.95034478]
+];
+const XYZ_TO_SRGB = [
+  [
+    3.2413774792388685,
+    -1.5376652402851851,
+    -0.49885366846268053
+  ],
+  [
+    -0.9691452513005321,
+    1.8758853451067872,
+    0.04156585616912061
+  ],
+  [
+    0.05562093689691305,
+    -0.20395524564742123,
+    1.0571799111220335
+  ]
+];
+const WHITE_POINT_D65 = [95.047, 100, 108.883];
+function argbFromRgb(red, green, blue) {
+  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;
+}
+function argbFromLinrgb(linrgb) {
+  const r = delinearized(linrgb[0]);
+  const g = delinearized(linrgb[1]);
+  const b = delinearized(linrgb[2]);
+  return argbFromRgb(r, g, b);
+}
+function alphaFromArgb(argb) {
+  return argb >> 24 & 255;
+}
+function redFromArgb(argb) {
+  return argb >> 16 & 255;
+}
+function greenFromArgb(argb) {
+  return argb >> 8 & 255;
+}
+function blueFromArgb(argb) {
+  return argb & 255;
+}
+function isOpaque(argb) {
+  return alphaFromArgb(argb) >= 255;
+}
+function argbFromXyz(x, y, z) {
+  const matrix = XYZ_TO_SRGB;
+  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;
+  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;
+  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;
+  const r = delinearized(linearR);
+  const g = delinearized(linearG);
+  const b = delinearized(linearB);
+  return argbFromRgb(r, g, b);
+}
+function xyzFromArgb(argb) {
+  const r = linearized(redFromArgb(argb));
+  const g = linearized(greenFromArgb(argb));
+  const b = linearized(blueFromArgb(argb));
+  return matrixMultiply([r, g, b], SRGB_TO_XYZ);
+}
+function argbFromLab(l, a, b) {
+  const whitePoint = WHITE_POINT_D65;
+  const fy = (l + 16) / 116;
+  const fx = a / 500 + fy;
+  const fz = fy - b / 200;
+  const xNormalized = labInvf(fx);
+  const yNormalized = labInvf(fy);
+  const zNormalized = labInvf(fz);
+  const x = xNormalized * whitePoint[0];
+  const y = yNormalized * whitePoint[1];
+  const z = zNormalized * whitePoint[2];
+  return argbFromXyz(x, y, z);
+}
+function labFromArgb(argb) {
+  const linearR = linearized(redFromArgb(argb));
+  const linearG = linearized(greenFromArgb(argb));
+  const linearB = linearized(blueFromArgb(argb));
+  const matrix = SRGB_TO_XYZ;
+  const x = matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;
+  const y = matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;
+  const z = matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;
+  const whitePoint = WHITE_POINT_D65;
+  const xNormalized = x / whitePoint[0];
+  const yNormalized = y / whitePoint[1];
+  const zNormalized = z / whitePoint[2];
+  const fx = labF(xNormalized);
+  const fy = labF(yNormalized);
+  const fz = labF(zNormalized);
+  const l = 116 * fy - 16;
+  const a = 500 * (fx - fy);
+  const b = 200 * (fy - fz);
+  return [l, a, b];
+}
+function argbFromLstar(lstar) {
+  const y = yFromLstar(lstar);
+  const component = delinearized(y);
+  return argbFromRgb(component, component, component);
+}
+function lstarFromArgb(argb) {
+  const y = xyzFromArgb(argb)[1];
+  return 116 * labF(y / 100) - 16;
+}
+function yFromLstar(lstar) {
+  return 100 * labInvf((lstar + 16) / 116);
+}
+function linearized(rgbComponent) {
+  const normalized = rgbComponent / 255;
+  if (normalized <= 0.040449936) {
+    return normalized / 12.92 * 100;
+  } else {
+    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100;
+  }
+}
+function delinearized(rgbComponent) {
+  const normalized = rgbComponent / 100;
+  let delinearized2 = 0;
+  if (normalized <= 31308e-7) {
+    delinearized2 = normalized * 12.92;
+  } else {
+    delinearized2 = 1.055 * Math.pow(normalized, 1 / 2.4) - 0.055;
+  }
+  return clampInt(0, 255, Math.round(delinearized2 * 255));
+}
+function whitePointD65() {
+  return WHITE_POINT_D65;
+}
+function labF(t) {
+  const e = 216 / 24389;
+  const kappa = 24389 / 27;
+  if (t > e) {
+    return Math.pow(t, 1 / 3);
+  } else {
+    return (kappa * t + 16) / 116;
+  }
+}
+function labInvf(ft) {
+  const e = 216 / 24389;
+  const kappa = 24389 / 27;
+  const ft3 = ft * ft * ft;
+  if (ft3 > e) {
+    return ft3;
+  } else {
+    return (116 * ft - 16) / kappa;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const _ViewingConditions = class {
+  constructor(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {
+    this.n = n;
+    this.aw = aw;
+    this.nbb = nbb;
+    this.ncb = ncb;
+    this.c = c;
+    this.nc = nc;
+    this.rgbD = rgbD;
+    this.fl = fl;
+    this.fLRoot = fLRoot;
+    this.z = z;
+  }
+  static make(whitePoint = whitePointD65(), adaptingLuminance = 200 / Math.PI * yFromLstar(50) / 100, backgroundLstar = 50, surround = 2, discountingIlluminant = false) {
+    const xyz = whitePoint;
+    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;
+    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;
+    const bW = xyz[0] * -2079e-6 + xyz[1] * 0.048952 + xyz[2] * 0.953127;
+    const f = 0.8 + surround / 10;
+    const c = f >= 0.9 ? lerp(0.59, 0.69, (f - 0.9) * 10) : lerp(0.525, 0.59, (f - 0.8) * 10);
+    let d = discountingIlluminant ? 1 : f * (1 - 1 / 3.6 * Math.exp((-adaptingLuminance - 42) / 92));
+    d = d > 1 ? 1 : d < 0 ? 0 : d;
+    const nc = f;
+    const rgbD = [
+      d * (100 / rW) + 1 - d,
+      d * (100 / gW) + 1 - d,
+      d * (100 / bW) + 1 - d
+    ];
+    const k = 1 / (5 * adaptingLuminance + 1);
+    const k4 = k * k * k * k;
+    const k4F = 1 - k4;
+    const fl = k4 * adaptingLuminance + 0.1 * k4F * k4F * Math.cbrt(5 * adaptingLuminance);
+    const n = yFromLstar(backgroundLstar) / whitePoint[1];
+    const z = 1.48 + Math.sqrt(n);
+    const nbb = 0.725 / Math.pow(n, 0.2);
+    const ncb = nbb;
+    const rgbAFactors = [
+      Math.pow(fl * rgbD[0] * rW / 100, 0.42),
+      Math.pow(fl * rgbD[1] * gW / 100, 0.42),
+      Math.pow(fl * rgbD[2] * bW / 100, 0.42)
+    ];
+    const rgbA = [
+      400 * rgbAFactors[0] / (rgbAFactors[0] + 27.13),
+      400 * rgbAFactors[1] / (rgbAFactors[1] + 27.13),
+      400 * rgbAFactors[2] / (rgbAFactors[2] + 27.13)
+    ];
+    const aw = (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;
+    return new _ViewingConditions(
+      n,
+      aw,
+      nbb,
+      ncb,
+      c,
+      nc,
+      rgbD,
+      fl,
+      Math.pow(fl, 0.25),
+      z
+    );
+  }
+};
+let ViewingConditions = _ViewingConditions;
+ViewingConditions.DEFAULT = _ViewingConditions.make();
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Cam16 {
+  constructor(hue, chroma, j, q, m, s, jstar, astar, bstar) {
+    this.hue = hue;
+    this.chroma = chroma;
+    this.j = j;
+    this.q = q;
+    this.m = m;
+    this.s = s;
+    this.jstar = jstar;
+    this.astar = astar;
+    this.bstar = bstar;
+  }
+  distance(other) {
+    const dJ = this.jstar - other.jstar;
+    const dA = this.astar - other.astar;
+    const dB = this.bstar - other.bstar;
+    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);
+    const dE = 1.41 * Math.pow(dEPrime, 0.63);
+    return dE;
+  }
+  static fromInt(argb) {
+    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);
+  }
+  static fromIntInViewingConditions(argb, viewingConditions) {
+    const red = (argb & 16711680) >> 16;
+    const green = (argb & 65280) >> 8;
+    const blue = argb & 255;
+    const redL = linearized(red);
+    const greenL = linearized(green);
+    const blueL = linearized(blue);
+    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;
+    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;
+    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;
+    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;
+    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;
+    const bC = -2079e-6 * x + 0.048952 * y + 0.953127 * z;
+    const rD = viewingConditions.rgbD[0] * rC;
+    const gD = viewingConditions.rgbD[1] * gC;
+    const bD = viewingConditions.rgbD[2] * bC;
+    const rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100, 0.42);
+    const gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100, 0.42);
+    const bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100, 0.42);
+    const rA = signum(rD) * 400 * rAF / (rAF + 27.13);
+    const gA = signum(gD) * 400 * gAF / (gAF + 27.13);
+    const bA = signum(bD) * 400 * bAF / (bAF + 27.13);
+    const a = (11 * rA + -12 * gA + bA) / 11;
+    const b = (rA + gA - 2 * bA) / 9;
+    const u = (20 * rA + 20 * gA + 21 * bA) / 20;
+    const p2 = (40 * rA + 20 * gA + bA) / 20;
+    const atan2 = Math.atan2(b, a);
+    const atanDegrees = atan2 * 180 / Math.PI;
+    const hue = atanDegrees < 0 ? atanDegrees + 360 : atanDegrees >= 360 ? atanDegrees - 360 : atanDegrees;
+    const hueRadians = hue * Math.PI / 180;
+    const ac = p2 * viewingConditions.nbb;
+    const j = 100 * Math.pow(
+      ac / viewingConditions.aw,
+      viewingConditions.c * viewingConditions.z
+    );
+    const q = 4 / viewingConditions.c * Math.sqrt(j / 100) * (viewingConditions.aw + 4) * viewingConditions.fLRoot;
+    const huePrime = hue < 20.14 ? hue + 360 : hue;
+    const eHue = 0.25 * (Math.cos(huePrime * Math.PI / 180 + 2) + 3.8);
+    const p1 = 5e4 / 13 * eHue * viewingConditions.nc * viewingConditions.ncb;
+    const t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);
+    const alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
+    const c = alpha * Math.sqrt(j / 100);
+    const m = c * viewingConditions.fLRoot;
+    const s = 50 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4));
+    const jstar = (1 + 100 * 7e-3) * j / (1 + 7e-3 * j);
+    const mstar = 1 / 0.0228 * Math.log(1 + 0.0228 * m);
+    const astar = mstar * Math.cos(hueRadians);
+    const bstar = mstar * Math.sin(hueRadians);
+    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);
+  }
+  static fromJch(j, c, h) {
+    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);
+  }
+  static fromJchInViewingConditions(j, c, h, viewingConditions) {
+    const q = 4 / viewingConditions.c * Math.sqrt(j / 100) * (viewingConditions.aw + 4) * viewingConditions.fLRoot;
+    const m = c * viewingConditions.fLRoot;
+    const alpha = c / Math.sqrt(j / 100);
+    const s = 50 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4));
+    const hueRadians = h * Math.PI / 180;
+    const jstar = (1 + 100 * 7e-3) * j / (1 + 7e-3 * j);
+    const mstar = 1 / 0.0228 * Math.log(1 + 0.0228 * m);
+    const astar = mstar * Math.cos(hueRadians);
+    const bstar = mstar * Math.sin(hueRadians);
+    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);
+  }
+  static fromUcs(jstar, astar, bstar) {
+    return Cam16.fromUcsInViewingConditions(
+      jstar,
+      astar,
+      bstar,
+      ViewingConditions.DEFAULT
+    );
+  }
+  static fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {
+    const a = astar;
+    const b = bstar;
+    const m = Math.sqrt(a * a + b * b);
+    const M = (Math.exp(m * 0.0228) - 1) / 0.0228;
+    const c = M / viewingConditions.fLRoot;
+    let h = Math.atan2(b, a) * (180 / Math.PI);
+    if (h < 0) {
+      h += 360;
+    }
+    const j = jstar / (1 - (jstar - 100) * 7e-3);
+    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);
+  }
+  toInt() {
+    return this.viewed(ViewingConditions.DEFAULT);
+  }
+  viewed(viewingConditions) {
+    const alpha = this.chroma === 0 || this.j === 0 ? 0 : this.chroma / Math.sqrt(this.j / 100);
+    const t = Math.pow(
+      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),
+      1 / 0.9
+    );
+    const hRad = this.hue * Math.PI / 180;
+    const eHue = 0.25 * (Math.cos(hRad + 2) + 3.8);
+    const ac = viewingConditions.aw * Math.pow(
+      this.j / 100,
+      1 / viewingConditions.c / viewingConditions.z
+    );
+    const p1 = eHue * (5e4 / 13) * viewingConditions.nc * viewingConditions.ncb;
+    const p2 = ac / viewingConditions.nbb;
+    const hSin = Math.sin(hRad);
+    const hCos = Math.cos(hRad);
+    const gamma = 23 * (p2 + 0.305) * t / (23 * p1 + 11 * t * hCos + 108 * t * hSin);
+    const a = gamma * hCos;
+    const b = gamma * hSin;
+    const rA = (460 * p2 + 451 * a + 288 * b) / 1403;
+    const gA = (460 * p2 - 891 * a - 261 * b) / 1403;
+    const bA = (460 * p2 - 220 * a - 6300 * b) / 1403;
+    const rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400 - Math.abs(rA)));
+    const rC = signum(rA) * (100 / viewingConditions.fl) * Math.pow(rCBase, 1 / 0.42);
+    const gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400 - Math.abs(gA)));
+    const gC = signum(gA) * (100 / viewingConditions.fl) * Math.pow(gCBase, 1 / 0.42);
+    const bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400 - Math.abs(bA)));
+    const bC = signum(bA) * (100 / viewingConditions.fl) * Math.pow(bCBase, 1 / 0.42);
+    const rF = rC / viewingConditions.rgbD[0];
+    const gF = gC / viewingConditions.rgbD[1];
+    const bF = bC / viewingConditions.rgbD[2];
+    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;
+    const y = 0.38752654 * rF + 0.62144744 * gF - 897398e-8 * bF;
+    const z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;
+    const argb = argbFromXyz(x, y, z);
+    return argb;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const _HctSolver = class {
+  static sanitizeRadians(angle) {
+    return (angle + Math.PI * 8) % (Math.PI * 2);
+  }
+  static trueDelinearized(rgbComponent) {
+    const normalized = rgbComponent / 100;
+    let delinearized = 0;
+    if (normalized <= 31308e-7) {
+      delinearized = normalized * 12.92;
+    } else {
+      delinearized = 1.055 * Math.pow(normalized, 1 / 2.4) - 0.055;
+    }
+    return delinearized * 255;
+  }
+  static chromaticAdaptation(component) {
+    const af = Math.pow(Math.abs(component), 0.42);
+    return signum(component) * 400 * af / (af + 27.13);
+  }
+  static hueOf(linrgb) {
+    const scaledDiscount = matrixMultiply(linrgb, _HctSolver.SCALED_DISCOUNT_FROM_LINRGB);
+    const rA = _HctSolver.chromaticAdaptation(scaledDiscount[0]);
+    const gA = _HctSolver.chromaticAdaptation(scaledDiscount[1]);
+    const bA = _HctSolver.chromaticAdaptation(scaledDiscount[2]);
+    const a = (11 * rA + -12 * gA + bA) / 11;
+    const b = (rA + gA - 2 * bA) / 9;
+    return Math.atan2(b, a);
+  }
+  static areInCyclicOrder(a, b, c) {
+    const deltaAB = _HctSolver.sanitizeRadians(b - a);
+    const deltaAC = _HctSolver.sanitizeRadians(c - a);
+    return deltaAB < deltaAC;
+  }
+  static intercept(source, mid, target) {
+    return (mid - source) / (target - source);
+  }
+  static lerpPoint(source, t, target) {
+    return [
+      source[0] + (target[0] - source[0]) * t,
+      source[1] + (target[1] - source[1]) * t,
+      source[2] + (target[2] - source[2]) * t
+    ];
+  }
+  static setCoordinate(source, coordinate, target, axis) {
+    const t = _HctSolver.intercept(source[axis], coordinate, target[axis]);
+    return _HctSolver.lerpPoint(source, t, target);
+  }
+  static isBounded(x) {
+    return 0 <= x && x <= 100;
+  }
+  static nthVertex(y, n) {
+    const kR = _HctSolver.Y_FROM_LINRGB[0];
+    const kG = _HctSolver.Y_FROM_LINRGB[1];
+    const kB = _HctSolver.Y_FROM_LINRGB[2];
+    const coordA = n % 4 <= 1 ? 0 : 100;
+    const coordB = n % 2 === 0 ? 0 : 100;
+    if (n < 4) {
+      const g = coordA;
+      const b = coordB;
+      const r = (y - g * kG - b * kB) / kR;
+      if (_HctSolver.isBounded(r)) {
+        return [r, g, b];
+      } else {
+        return [-1, -1, -1];
+      }
+    } else if (n < 8) {
+      const b = coordA;
+      const r = coordB;
+      const g = (y - r * kR - b * kB) / kG;
+      if (_HctSolver.isBounded(g)) {
+        return [r, g, b];
+      } else {
+        return [-1, -1, -1];
+      }
+    } else {
+      const r = coordA;
+      const g = coordB;
+      const b = (y - r * kR - g * kG) / kB;
+      if (_HctSolver.isBounded(b)) {
+        return [r, g, b];
+      } else {
+        return [-1, -1, -1];
+      }
+    }
+  }
+  static bisectToSegment(y, targetHue) {
+    let left = [-1, -1, -1];
+    let right = left;
+    let leftHue = 0;
+    let rightHue = 0;
+    let initialized = false;
+    let uncut = true;
+    for (let n = 0; n < 12; n++) {
+      const mid = _HctSolver.nthVertex(y, n);
+      if (mid[0] < 0) {
+        continue;
+      }
+      const midHue = _HctSolver.hueOf(mid);
+      if (!initialized) {
+        left = mid;
+        right = mid;
+        leftHue = midHue;
+        rightHue = midHue;
+        initialized = true;
+        continue;
+      }
+      if (uncut || _HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {
+        uncut = false;
+        if (_HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
+          right = mid;
+          rightHue = midHue;
+        } else {
+          left = mid;
+          leftHue = midHue;
+        }
+      }
+    }
+    return [left, right];
+  }
+  static midpoint(a, b) {
+    return [
+      (a[0] + b[0]) / 2,
+      (a[1] + b[1]) / 2,
+      (a[2] + b[2]) / 2
+    ];
+  }
+  static criticalPlaneBelow(x) {
+    return Math.floor(x - 0.5);
+  }
+  static criticalPlaneAbove(x) {
+    return Math.ceil(x - 0.5);
+  }
+  static bisectToLimit(y, targetHue) {
+    const segment = _HctSolver.bisectToSegment(y, targetHue);
+    let left = segment[0];
+    let leftHue = _HctSolver.hueOf(left);
+    let right = segment[1];
+    for (let axis = 0; axis < 3; axis++) {
+      if (left[axis] !== right[axis]) {
+        let lPlane = -1;
+        let rPlane = 255;
+        if (left[axis] < right[axis]) {
+          lPlane = _HctSolver.criticalPlaneBelow(
+            _HctSolver.trueDelinearized(left[axis])
+          );
+          rPlane = _HctSolver.criticalPlaneAbove(
+            _HctSolver.trueDelinearized(right[axis])
+          );
+        } else {
+          lPlane = _HctSolver.criticalPlaneAbove(
+            _HctSolver.trueDelinearized(left[axis])
+          );
+          rPlane = _HctSolver.criticalPlaneBelow(
+            _HctSolver.trueDelinearized(right[axis])
+          );
+        }
+        for (let i = 0; i < 8; i++) {
+          if (Math.abs(rPlane - lPlane) <= 1) {
+            break;
+          } else {
+            const mPlane = Math.floor((lPlane + rPlane) / 2);
+            const midPlaneCoordinate = _HctSolver.CRITICAL_PLANES[mPlane];
+            const mid = _HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);
+            const midHue = _HctSolver.hueOf(mid);
+            if (_HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
+              right = mid;
+              rPlane = mPlane;
+            } else {
+              left = mid;
+              leftHue = midHue;
+              lPlane = mPlane;
+            }
+          }
+        }
+      }
+    }
+    return _HctSolver.midpoint(left, right);
+  }
+  static inverseChromaticAdaptation(adapted) {
+    const adaptedAbs = Math.abs(adapted);
+    const base = Math.max(0, 27.13 * adaptedAbs / (400 - adaptedAbs));
+    return signum(adapted) * Math.pow(base, 1 / 0.42);
+  }
+  static findResultByJ(hueRadians, chroma, y) {
+    let j = Math.sqrt(y) * 11;
+    const viewingConditions = ViewingConditions.DEFAULT;
+    const tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
+    const eHue = 0.25 * (Math.cos(hueRadians + 2) + 3.8);
+    const p1 = eHue * (5e4 / 13) * viewingConditions.nc * viewingConditions.ncb;
+    const hSin = Math.sin(hueRadians);
+    const hCos = Math.cos(hueRadians);
+    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {
+      const jNormalized = j / 100;
+      const alpha = chroma === 0 || j === 0 ? 0 : chroma / Math.sqrt(jNormalized);
+      const t = Math.pow(alpha * tInnerCoeff, 1 / 0.9);
+      const ac = viewingConditions.aw * Math.pow(
+        jNormalized,
+        1 / viewingConditions.c / viewingConditions.z
+      );
+      const p2 = ac / viewingConditions.nbb;
+      const gamma = 23 * (p2 + 0.305) * t / (23 * p1 + 11 * t * hCos + 108 * t * hSin);
+      const a = gamma * hCos;
+      const b = gamma * hSin;
+      const rA = (460 * p2 + 451 * a + 288 * b) / 1403;
+      const gA = (460 * p2 - 891 * a - 261 * b) / 1403;
+      const bA = (460 * p2 - 220 * a - 6300 * b) / 1403;
+      const rCScaled = _HctSolver.inverseChromaticAdaptation(rA);
+      const gCScaled = _HctSolver.inverseChromaticAdaptation(gA);
+      const bCScaled = _HctSolver.inverseChromaticAdaptation(bA);
+      const linrgb = matrixMultiply(
+        [rCScaled, gCScaled, bCScaled],
+        _HctSolver.LINRGB_FROM_SCALED_DISCOUNT
+      );
+      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {
+        return 0;
+      }
+      const kR = _HctSolver.Y_FROM_LINRGB[0];
+      const kG = _HctSolver.Y_FROM_LINRGB[1];
+      const kB = _HctSolver.Y_FROM_LINRGB[2];
+      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];
+      if (fnj <= 0) {
+        return 0;
+      }
+      if (iterationRound === 4 || Math.abs(fnj - y) < 2e-3) {
+        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {
+          return 0;
+        }
+        return argbFromLinrgb(linrgb);
+      }
+      j = j - (fnj - y) * j / (2 * fnj);
+    }
+    return 0;
+  }
+  static solveToInt(hueDegrees, chroma, lstar) {
+    if (chroma < 1e-4 || lstar < 1e-4 || lstar > 99.9999) {
+      return argbFromLstar(lstar);
+    }
+    hueDegrees = sanitizeDegreesDouble(hueDegrees);
+    const hueRadians = hueDegrees / 180 * Math.PI;
+    const y = yFromLstar(lstar);
+    const exactAnswer = _HctSolver.findResultByJ(hueRadians, chroma, y);
+    if (exactAnswer !== 0) {
+      return exactAnswer;
+    }
+    const linrgb = _HctSolver.bisectToLimit(y, hueRadians);
+    return argbFromLinrgb(linrgb);
+  }
+  static solveToCam(hueDegrees, chroma, lstar) {
+    return Cam16.fromInt(_HctSolver.solveToInt(hueDegrees, chroma, lstar));
+  }
+};
+let HctSolver = _HctSolver;
+HctSolver.SCALED_DISCOUNT_FROM_LINRGB = [
+  [
+    0.001200833568784504,
+    0.002389694492170889,
+    2795742885861124e-19
+  ],
+  [
+    5891086651375999e-19,
+    0.0029785502573438758,
+    3270666104008398e-19
+  ],
+  [
+    10146692491640572e-20,
+    5364214359186694e-19,
+    0.0032979401770712076
+  ]
+];
+HctSolver.LINRGB_FROM_SCALED_DISCOUNT = [
+  [
+    1373.2198709594231,
+    -1100.4251190754821,
+    -7.278681089101213
+  ],
+  [
+    -271.815969077903,
+    559.6580465940733,
+    -32.46047482791194
+  ],
+  [
+    1.9622899599665666,
+    -57.173814538844006,
+    308.7233197812385
+  ]
+];
+HctSolver.Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];
+HctSolver.CRITICAL_PLANES = [
+  0.015176349177441876,
+  0.045529047532325624,
+  0.07588174588720938,
+  0.10623444424209313,
+  0.13658714259697685,
+  0.16693984095186062,
+  0.19729253930674434,
+  0.2276452376616281,
+  0.2579979360165119,
+  0.28835063437139563,
+  0.3188300904430532,
+  0.350925934958123,
+  0.3848314933096426,
+  0.42057480301049466,
+  0.458183274052838,
+  0.4976837250274023,
+  0.5391024159806381,
+  0.5824650784040898,
+  0.6277969426914107,
+  0.6751227633498623,
+  0.7244668422128921,
+  0.775853049866786,
+  0.829304845476233,
+  0.8848452951698498,
+  0.942497089126609,
+  1.0022825574869039,
+  1.0642236851973577,
+  1.1283421258858297,
+  1.1946592148522128,
+  1.2631959812511864,
+  1.3339731595349034,
+  1.407011200216447,
+  1.4823302800086415,
+  1.5599503113873272,
+  1.6398909516233677,
+  1.7221716113234105,
+  1.8068114625156377,
+  1.8938294463134073,
+  1.9832442801866852,
+  2.075074464868551,
+  2.1693382909216234,
+  2.2660538449872063,
+  2.36523901573795,
+  2.4669114995532007,
+  2.5710888059345764,
+  2.6777882626779785,
+  2.7870270208169257,
+  2.898822059350997,
+  3.0131901897720907,
+  3.1301480604002863,
+  3.2497121605402226,
+  3.3718988244681087,
+  3.4967242352587946,
+  3.624204428461639,
+  3.754355295633311,
+  3.887192587735158,
+  4.022731918402185,
+  4.160988767090289,
+  4.301978482107941,
+  4.445716283538092,
+  4.592217266055746,
+  4.741496401646282,
+  4.893568542229298,
+  5.048448422192488,
+  5.20615066083972,
+  5.3666897647573375,
+  5.5300801301023865,
+  5.696336044816294,
+  5.865471690767354,
+  6.037501145825082,
+  6.212438385869475,
+  6.390297286737924,
+  6.571091626112461,
+  6.7548350853498045,
+  6.941541251256611,
+  7.131223617812143,
+  7.323895587840543,
+  7.5195704746346665,
+  7.7182615035334345,
+  7.919981813454504,
+  8.124744458384042,
+  8.332562408825165,
+  8.543448553206703,
+  8.757415699253682,
+  8.974476575321063,
+  9.194643831691977,
+  9.417930041841839,
+  9.644347703669503,
+  9.873909240696694,
+  10.106627003236781,
+  10.342513269534024,
+  10.58158024687427,
+  10.8238400726681,
+  11.069304815507364,
+  11.317986476196008,
+  11.569896988756009,
+  11.825048221409341,
+  12.083451977536606,
+  12.345119996613247,
+  12.610063955123938,
+  12.878295467455942,
+  13.149826086772048,
+  13.42466730586372,
+  13.702830557985108,
+  13.984327217668513,
+  14.269168601521828,
+  14.55736596900856,
+  14.848930523210871,
+  15.143873411576273,
+  15.44220572664832,
+  15.743938506781891,
+  16.04908273684337,
+  16.35764934889634,
+  16.66964922287304,
+  16.985093187232053,
+  17.30399201960269,
+  17.62635644741625,
+  17.95219714852476,
+  18.281524751807332,
+  18.614349837764564,
+  18.95068293910138,
+  19.290534541298456,
+  19.633915083172692,
+  19.98083495742689,
+  20.331304511189067,
+  20.685334046541502,
+  21.042933821039977,
+  21.404114048223256,
+  21.76888489811322,
+  22.137256497705877,
+  22.50923893145328,
+  22.884842241736916,
+  23.264076429332462,
+  23.6469514538663,
+  24.033477234264016,
+  24.42366364919083,
+  24.817520537484558,
+  25.21505769858089,
+  25.61628489293138,
+  26.021211842414342,
+  26.429848230738664,
+  26.842203703840827,
+  27.258287870275353,
+  27.678110301598522,
+  28.10168053274597,
+  28.529008062403893,
+  28.96010235337422,
+  29.39497283293396,
+  29.83362889318845,
+  30.276079891419332,
+  30.722335150426627,
+  31.172403958865512,
+  31.62629557157785,
+  32.08401920991837,
+  32.54558406207592,
+  33.010999283389665,
+  33.4802739966603,
+  33.953417292456834,
+  34.430438229418264,
+  34.911345834551085,
+  35.39614910352207,
+  35.88485700094671,
+  36.37747846067349,
+  36.87402238606382,
+  37.37449765026789,
+  37.87891309649659,
+  38.38727753828926,
+  38.89959975977785,
+  39.41588851594697,
+  39.93615253289054,
+  40.460400508064545,
+  40.98864111053629,
+  41.520882981230194,
+  42.05713473317016,
+  42.597404951718396,
+  43.141702194811224,
+  43.6900349931913,
+  44.24241185063697,
+  44.798841244188324,
+  45.35933162437017,
+  45.92389141541209,
+  46.49252901546552,
+  47.065252796817916,
+  47.64207110610409,
+  48.22299226451468,
+  48.808024568002054,
+  49.3971762874833,
+  49.9904556690408,
+  50.587870934119984,
+  51.189430279724725,
+  51.79514187861014,
+  52.40501387947288,
+  53.0190544071392,
+  53.637271562750364,
+  54.259673423945976,
+  54.88626804504493,
+  55.517063457223934,
+  56.15206766869424,
+  56.79128866487574,
+  57.43473440856916,
+  58.08241284012621,
+  58.734331877617365,
+  59.39049941699807,
+  60.05092333227251,
+  60.715611475655585,
+  61.38457167773311,
+  62.057811747619894,
+  62.7353394731159,
+  63.417162620860914,
+  64.10328893648692,
+  64.79372614476921,
+  65.48848194977529,
+  66.18756403501224,
+  66.89098006357258,
+  67.59873767827808,
+  68.31084450182222,
+  69.02730813691093,
+  69.74813616640164,
+  70.47333615344107,
+  71.20291564160104,
+  71.93688215501312,
+  72.67524319850172,
+  73.41800625771542,
+  74.16517879925733,
+  74.9167682708136,
+  75.67278210128072,
+  76.43322770089146,
+  77.1981124613393,
+  77.96744375590167,
+  78.74122893956174,
+  79.51947534912904,
+  80.30219030335869,
+  81.08938110306934,
+  81.88105503125999,
+  82.67721935322541,
+  83.4778813166706,
+  84.28304815182372,
+  85.09272707154808,
+  85.90692527145302,
+  86.72564993000343,
+  87.54890820862819,
+  88.3767072518277,
+  89.2090541872801,
+  90.04595612594655,
+  90.88742016217518,
+  91.73345337380438,
+  92.58406282226491,
+  93.43925555268066,
+  94.29903859396902,
+  95.16341895893969,
+  96.03240364439274,
+  96.9059996312159,
+  97.78421388448044,
+  98.6670533535366,
+  99.55452497210776
+];
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Hct {
+  constructor(argb) {
+    this.argb = argb;
+    const cam = Cam16.fromInt(argb);
+    this.internalHue = cam.hue;
+    this.internalChroma = cam.chroma;
+    this.internalTone = lstarFromArgb(argb);
+    this.argb = argb;
+  }
+  static from(hue, chroma, tone) {
+    return new Hct(HctSolver.solveToInt(hue, chroma, tone));
+  }
+  static fromInt(argb) {
+    return new Hct(argb);
+  }
+  toInt() {
+    return this.argb;
+  }
+  get hue() {
+    return this.internalHue;
+  }
+  set hue(newHue) {
+    this.setInternalState(
+      HctSolver.solveToInt(
+        newHue,
+        this.internalChroma,
+        this.internalTone
+      )
+    );
+  }
+  get chroma() {
+    return this.internalChroma;
+  }
+  set chroma(newChroma) {
+    this.setInternalState(
+      HctSolver.solveToInt(
+        this.internalHue,
+        newChroma,
+        this.internalTone
+      )
+    );
+  }
+  get tone() {
+    return this.internalTone;
+  }
+  set tone(newTone) {
+    this.setInternalState(
+      HctSolver.solveToInt(
+        this.internalHue,
+        this.internalChroma,
+        newTone
+      )
+    );
+  }
+  setInternalState(argb) {
+    const cam = Cam16.fromInt(argb);
+    this.internalHue = cam.hue;
+    this.internalChroma = cam.chroma;
+    this.internalTone = lstarFromArgb(argb);
+    this.argb = argb;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Blend {
+  static harmonize(designColor, sourceColor) {
+    const fromHct = Hct.fromInt(designColor);
+    const toHct = Hct.fromInt(sourceColor);
+    const differenceDegrees$1 = differenceDegrees(fromHct.hue, toHct.hue);
+    const rotationDegrees = Math.min(differenceDegrees$1 * 0.5, 15);
+    const outputHue = sanitizeDegreesDouble(
+      fromHct.hue + rotationDegrees * rotationDirection(fromHct.hue, toHct.hue)
+    );
+    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();
+  }
+  static hctHue(from, to, amount) {
+    const ucs = Blend.cam16Ucs(from, to, amount);
+    const ucsCam = Cam16.fromInt(ucs);
+    const fromCam = Cam16.fromInt(from);
+    const blended = Hct.from(
+      ucsCam.hue,
+      fromCam.chroma,
+      lstarFromArgb(from)
+    );
+    return blended.toInt();
+  }
+  static cam16Ucs(from, to, amount) {
+    const fromCam = Cam16.fromInt(from);
+    const toCam = Cam16.fromInt(to);
+    const fromJ = fromCam.jstar;
+    const fromA = fromCam.astar;
+    const fromB = fromCam.bstar;
+    const toJ = toCam.jstar;
+    const toA = toCam.astar;
+    const toB = toCam.bstar;
+    const jstar = fromJ + (toJ - fromJ) * amount;
+    const astar = fromA + (toA - fromA) * amount;
+    const bstar = fromB + (toB - fromB) * amount;
+    return Cam16.fromUcs(jstar, astar, bstar).toInt();
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class TonalPalette {
+  constructor(hue, chroma) {
+    this.hue = hue;
+    this.chroma = chroma;
+    this.cache = /* @__PURE__ */ new Map();
+  }
+  static fromInt(argb) {
+    const hct = Hct.fromInt(argb);
+    return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);
+  }
+  static fromHueAndChroma(hue, chroma) {
+    return new TonalPalette(hue, chroma);
+  }
+  tone(tone) {
+    let argb = this.cache.get(tone);
+    if (argb === void 0) {
+      argb = Hct.from(this.hue, this.chroma, tone).toInt();
+      this.cache.set(tone, argb);
+    }
+    return argb;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class CorePalette {
+  static of(argb) {
+    return new CorePalette(argb, false);
+  }
+  static contentOf(argb) {
+    return new CorePalette(argb, true);
+  }
+  constructor(argb, isContent) {
+    const hct = Hct.fromInt(argb);
+    const hue = hct.hue;
+    const chroma = hct.chroma;
+    if (isContent) {
+      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);
+      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);
+      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);
+      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));
+      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));
+    } else {
+      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));
+      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);
+      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);
+      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);
+      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);
+    }
+    this.error = TonalPalette.fromHueAndChroma(25, 84);
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class LabPointProvider {
+  fromInt(argb) {
+    return labFromArgb(argb);
+  }
+  toInt(point) {
+    return argbFromLab(point[0], point[1], point[2]);
+  }
+  distance(from, to) {
+    const dL = from[0] - to[0];
+    const dA = from[1] - to[1];
+    const dB = from[2] - to[2];
+    return dL * dL + dA * dA + dB * dB;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const MAX_ITERATIONS = 10;
+const MIN_MOVEMENT_DISTANCE = 3;
+class QuantizerWsmeans {
+  static quantize(inputPixels, startingClusters, maxColors) {
+    const pixelToCount = /* @__PURE__ */ new Map();
+    const points = new Array();
+    const pixels = new Array();
+    const pointProvider = new LabPointProvider();
+    let pointCount = 0;
+    for (let i = 0; i < inputPixels.length; i++) {
+      const inputPixel = inputPixels[i];
+      const pixelCount = pixelToCount.get(inputPixel);
+      if (pixelCount === void 0) {
+        pointCount++;
+        points.push(pointProvider.fromInt(inputPixel));
+        pixels.push(inputPixel);
+        pixelToCount.set(inputPixel, 1);
+      } else {
+        pixelToCount.set(inputPixel, pixelCount + 1);
+      }
+    }
+    const counts = new Array();
+    for (let i = 0; i < pointCount; i++) {
+      const pixel = pixels[i];
+      const count = pixelToCount.get(pixel);
+      if (count !== void 0) {
+        counts[i] = count;
+      }
+    }
+    let clusterCount = Math.min(maxColors, pointCount);
+    if (startingClusters.length > 0) {
+      clusterCount = Math.min(clusterCount, startingClusters.length);
+    }
+    const clusters = new Array();
+    for (let i = 0; i < startingClusters.length; i++) {
+      clusters.push(pointProvider.fromInt(startingClusters[i]));
+    }
+    const additionalClustersNeeded = clusterCount - clusters.length;
+    if (startingClusters.length === 0 && additionalClustersNeeded > 0) {
+      for (let i = 0; i < additionalClustersNeeded; i++) {
+        const l = Math.random() * 100;
+        const a = Math.random() * (100 - -100 + 1) + -100;
+        const b = Math.random() * (100 - -100 + 1) + -100;
+        clusters.push(new Array(l, a, b));
+      }
+    }
+    const clusterIndices = new Array();
+    for (let i = 0; i < pointCount; i++) {
+      clusterIndices.push(Math.floor(Math.random() * clusterCount));
+    }
+    const indexMatrix = new Array();
+    for (let i = 0; i < clusterCount; i++) {
+      indexMatrix.push(new Array());
+      for (let j = 0; j < clusterCount; j++) {
+        indexMatrix[i].push(0);
+      }
+    }
+    const distanceToIndexMatrix = new Array();
+    for (let i = 0; i < clusterCount; i++) {
+      distanceToIndexMatrix.push(new Array());
+      for (let j = 0; j < clusterCount; j++) {
+        distanceToIndexMatrix[i].push(new DistanceAndIndex());
+      }
+    }
+    const pixelCountSums = new Array();
+    for (let i = 0; i < clusterCount; i++) {
+      pixelCountSums.push(0);
+    }
+    for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {
+      for (let i = 0; i < clusterCount; i++) {
+        for (let j = i + 1; j < clusterCount; j++) {
+          const distance = pointProvider.distance(clusters[i], clusters[j]);
+          distanceToIndexMatrix[j][i].distance = distance;
+          distanceToIndexMatrix[j][i].index = i;
+          distanceToIndexMatrix[i][j].distance = distance;
+          distanceToIndexMatrix[i][j].index = j;
+        }
+        distanceToIndexMatrix[i].sort();
+        for (let j = 0; j < clusterCount; j++) {
+          indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;
+        }
+      }
+      let pointsMoved = 0;
+      for (let i = 0; i < pointCount; i++) {
+        const point = points[i];
+        const previousClusterIndex = clusterIndices[i];
+        const previousCluster = clusters[previousClusterIndex];
+        const previousDistance = pointProvider.distance(point, previousCluster);
+        let minimumDistance = previousDistance;
+        let newClusterIndex = -1;
+        for (let j = 0; j < clusterCount; j++) {
+          if (distanceToIndexMatrix[previousClusterIndex][j].distance >= 4 * previousDistance) {
+            continue;
+          }
+          const distance = pointProvider.distance(point, clusters[j]);
+          if (distance < minimumDistance) {
+            minimumDistance = distance;
+            newClusterIndex = j;
+          }
+        }
+        if (newClusterIndex !== -1) {
+          const distanceChange = Math.abs(
+            Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)
+          );
+          if (distanceChange > MIN_MOVEMENT_DISTANCE) {
+            pointsMoved++;
+            clusterIndices[i] = newClusterIndex;
+          }
+        }
+      }
+      if (pointsMoved === 0 && iteration !== 0) {
+        break;
+      }
+      const componentASums = new Array(clusterCount).fill(0);
+      const componentBSums = new Array(clusterCount).fill(0);
+      const componentCSums = new Array(clusterCount).fill(0);
+      for (let i = 0; i < clusterCount; i++) {
+        pixelCountSums[i] = 0;
+      }
+      for (let i = 0; i < pointCount; i++) {
+        const clusterIndex = clusterIndices[i];
+        const point = points[i];
+        const count = counts[i];
+        pixelCountSums[clusterIndex] += count;
+        componentASums[clusterIndex] += point[0] * count;
+        componentBSums[clusterIndex] += point[1] * count;
+        componentCSums[clusterIndex] += point[2] * count;
+      }
+      for (let i = 0; i < clusterCount; i++) {
+        const count = pixelCountSums[i];
+        if (count === 0) {
+          clusters[i] = [0, 0, 0];
+          continue;
+        }
+        const a = componentASums[i] / count;
+        const b = componentBSums[i] / count;
+        const c = componentCSums[i] / count;
+        clusters[i] = [a, b, c];
+      }
+    }
+    const argbToPopulation = /* @__PURE__ */ new Map();
+    for (let i = 0; i < clusterCount; i++) {
+      const count = pixelCountSums[i];
+      if (count === 0) {
+        continue;
+      }
+      const possibleNewCluster = pointProvider.toInt(clusters[i]);
+      if (argbToPopulation.has(possibleNewCluster)) {
+        continue;
+      }
+      argbToPopulation.set(possibleNewCluster, count);
+    }
+    return argbToPopulation;
+  }
+}
+class DistanceAndIndex {
+  constructor() {
+    this.distance = -1;
+    this.index = -1;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class QuantizerMap {
+  static quantize(pixels) {
+    const countByColor = /* @__PURE__ */ new Map();
+    for (let i = 0; i < pixels.length; i++) {
+      const pixel = pixels[i];
+      const alpha = alphaFromArgb(pixel);
+      if (alpha < 255) {
+        continue;
+      }
+      countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);
+    }
+    return countByColor;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const INDEX_BITS = 5;
+const SIDE_LENGTH = 33;
+const TOTAL_SIZE = 35937;
+const directions = {
+  RED: "red",
+  GREEN: "green",
+  BLUE: "blue"
+};
+class QuantizerWu {
+  constructor(weights = [], momentsR = [], momentsG = [], momentsB = [], moments = [], cubes = []) {
+    this.weights = weights;
+    this.momentsR = momentsR;
+    this.momentsG = momentsG;
+    this.momentsB = momentsB;
+    this.moments = moments;
+    this.cubes = cubes;
+  }
+  quantize(pixels, maxColors) {
+    this.constructHistogram(pixels);
+    this.computeMoments();
+    const createBoxesResult = this.createBoxes(maxColors);
+    const results = this.createResult(createBoxesResult.resultCount);
+    return results;
+  }
+  constructHistogram(pixels) {
+    this.weights = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.momentsR = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.momentsG = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.momentsB = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.moments = Array.from({ length: TOTAL_SIZE }).fill(0);
+    const countByColor = QuantizerMap.quantize(pixels);
+    for (const [pixel, count] of countByColor.entries()) {
+      const red = redFromArgb(pixel);
+      const green = greenFromArgb(pixel);
+      const blue = blueFromArgb(pixel);
+      const bitsToRemove = 8 - INDEX_BITS;
+      const iR = (red >> bitsToRemove) + 1;
+      const iG = (green >> bitsToRemove) + 1;
+      const iB = (blue >> bitsToRemove) + 1;
+      const index = this.getIndex(iR, iG, iB);
+      this.weights[index] = (this.weights[index] ?? 0) + count;
+      this.momentsR[index] += count * red;
+      this.momentsG[index] += count * green;
+      this.momentsB[index] += count * blue;
+      this.moments[index] += count * (red * red + green * green + blue * blue);
+    }
+  }
+  computeMoments() {
+    for (let r = 1; r < SIDE_LENGTH; r++) {
+      const area = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const areaR = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const areaG = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const areaB = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const area2 = Array.from({ length: SIDE_LENGTH }).fill(0);
+      for (let g = 1; g < SIDE_LENGTH; g++) {
+        let line = 0;
+        let lineR = 0;
+        let lineG = 0;
+        let lineB = 0;
+        let line2 = 0;
+        for (let b = 1; b < SIDE_LENGTH; b++) {
+          const index = this.getIndex(r, g, b);
+          line += this.weights[index];
+          lineR += this.momentsR[index];
+          lineG += this.momentsG[index];
+          lineB += this.momentsB[index];
+          line2 += this.moments[index];
+          area[b] += line;
+          areaR[b] += lineR;
+          areaG[b] += lineG;
+          areaB[b] += lineB;
+          area2[b] += line2;
+          const previousIndex = this.getIndex(r - 1, g, b);
+          this.weights[index] = this.weights[previousIndex] + area[b];
+          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];
+          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];
+          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];
+          this.moments[index] = this.moments[previousIndex] + area2[b];
+        }
+      }
+    }
+  }
+  createBoxes(maxColors) {
+    this.cubes = Array.from({ length: maxColors }).fill(0).map(() => new Box());
+    const volumeVariance = Array.from({ length: maxColors }).fill(0);
+    this.cubes[0].r0 = 0;
+    this.cubes[0].g0 = 0;
+    this.cubes[0].b0 = 0;
+    this.cubes[0].r1 = SIDE_LENGTH - 1;
+    this.cubes[0].g1 = SIDE_LENGTH - 1;
+    this.cubes[0].b1 = SIDE_LENGTH - 1;
+    let generatedColorCount = maxColors;
+    let next = 0;
+    for (let i = 1; i < maxColors; i++) {
+      if (this.cut(this.cubes[next], this.cubes[i])) {
+        volumeVariance[next] = this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0;
+        volumeVariance[i] = this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0;
+      } else {
+        volumeVariance[next] = 0;
+        i--;
+      }
+      next = 0;
+      let temp = volumeVariance[0];
+      for (let j = 1; j <= i; j++) {
+        if (volumeVariance[j] > temp) {
+          temp = volumeVariance[j];
+          next = j;
+        }
+      }
+      if (temp <= 0) {
+        generatedColorCount = i + 1;
+        break;
+      }
+    }
+    return new CreateBoxesResult(maxColors, generatedColorCount);
+  }
+  createResult(colorCount) {
+    const colors = [];
+    for (let i = 0; i < colorCount; ++i) {
+      const cube = this.cubes[i];
+      const weight = this.volume(cube, this.weights);
+      if (weight > 0) {
+        const r = Math.round(this.volume(cube, this.momentsR) / weight);
+        const g = Math.round(this.volume(cube, this.momentsG) / weight);
+        const b = Math.round(this.volume(cube, this.momentsB) / weight);
+        const color = 255 << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
+        colors.push(color);
+      }
+    }
+    return colors;
+  }
+  variance(cube) {
+    const dr = this.volume(cube, this.momentsR);
+    const dg = this.volume(cube, this.momentsG);
+    const db = this.volume(cube, this.momentsB);
+    const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] - this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] - this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] + this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] - this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] + this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] + this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] - this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];
+    const hypotenuse = dr * dr + dg * dg + db * db;
+    const volume = this.volume(cube, this.weights);
+    return xx - hypotenuse / volume;
+  }
+  cut(one, two) {
+    const wholeR = this.volume(one, this.momentsR);
+    const wholeG = this.volume(one, this.momentsG);
+    const wholeB = this.volume(one, this.momentsB);
+    const wholeW = this.volume(one, this.weights);
+    const maxRResult = this.maximize(
+      one,
+      directions.RED,
+      one.r0 + 1,
+      one.r1,
+      wholeR,
+      wholeG,
+      wholeB,
+      wholeW
+    );
+    const maxGResult = this.maximize(
+      one,
+      directions.GREEN,
+      one.g0 + 1,
+      one.g1,
+      wholeR,
+      wholeG,
+      wholeB,
+      wholeW
+    );
+    const maxBResult = this.maximize(
+      one,
+      directions.BLUE,
+      one.b0 + 1,
+      one.b1,
+      wholeR,
+      wholeG,
+      wholeB,
+      wholeW
+    );
+    let direction;
+    const maxR = maxRResult.maximum;
+    const maxG = maxGResult.maximum;
+    const maxB = maxBResult.maximum;
+    if (maxR >= maxG && maxR >= maxB) {
+      if (maxRResult.cutLocation < 0) {
+        return false;
+      }
+      direction = directions.RED;
+    } else if (maxG >= maxR && maxG >= maxB) {
+      direction = directions.GREEN;
+    } else {
+      direction = directions.BLUE;
+    }
+    two.r1 = one.r1;
+    two.g1 = one.g1;
+    two.b1 = one.b1;
+    switch (direction) {
+      case directions.RED:
+        one.r1 = maxRResult.cutLocation;
+        two.r0 = one.r1;
+        two.g0 = one.g0;
+        two.b0 = one.b0;
+        break;
+      case directions.GREEN:
+        one.g1 = maxGResult.cutLocation;
+        two.r0 = one.r0;
+        two.g0 = one.g1;
+        two.b0 = one.b0;
+        break;
+      case directions.BLUE:
+        one.b1 = maxBResult.cutLocation;
+        two.r0 = one.r0;
+        two.g0 = one.g0;
+        two.b0 = one.b1;
+        break;
+      default:
+        throw new Error("unexpected direction " + direction);
+    }
+    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);
+    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);
+    return true;
+  }
+  maximize(cube, direction, first, last, wholeR, wholeG, wholeB, wholeW) {
+    const bottomR = this.bottom(cube, direction, this.momentsR);
+    const bottomG = this.bottom(cube, direction, this.momentsG);
+    const bottomB = this.bottom(cube, direction, this.momentsB);
+    const bottomW = this.bottom(cube, direction, this.weights);
+    let max = 0;
+    let cut = -1;
+    let halfR = 0;
+    let halfG = 0;
+    let halfB = 0;
+    let halfW = 0;
+    for (let i = first; i < last; i++) {
+      halfR = bottomR + this.top(cube, direction, i, this.momentsR);
+      halfG = bottomG + this.top(cube, direction, i, this.momentsG);
+      halfB = bottomB + this.top(cube, direction, i, this.momentsB);
+      halfW = bottomW + this.top(cube, direction, i, this.weights);
+      if (halfW === 0) {
+        continue;
+      }
+      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1;
+      let tempDenominator = halfW * 1;
+      let temp = tempNumerator / tempDenominator;
+      halfR = wholeR - halfR;
+      halfG = wholeG - halfG;
+      halfB = wholeB - halfB;
+      halfW = wholeW - halfW;
+      if (halfW === 0) {
+        continue;
+      }
+      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1;
+      tempDenominator = halfW * 1;
+      temp += tempNumerator / tempDenominator;
+      if (temp > max) {
+        max = temp;
+        cut = i;
+      }
+    }
+    return new MaximizeResult(cut, max);
+  }
+  volume(cube, moment) {
+    return moment[this.getIndex(cube.r1, cube.g1, cube.b1)] - moment[this.getIndex(cube.r1, cube.g1, cube.b0)] - moment[this.getIndex(cube.r1, cube.g0, cube.b1)] + moment[this.getIndex(cube.r1, cube.g0, cube.b0)] - moment[this.getIndex(cube.r0, cube.g1, cube.b1)] + moment[this.getIndex(cube.r0, cube.g1, cube.b0)] + moment[this.getIndex(cube.r0, cube.g0, cube.b1)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+  }
+  bottom(cube, direction, moment) {
+    switch (direction) {
+      case directions.RED:
+        return -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] + moment[this.getIndex(cube.r0, cube.g1, cube.b0)] + moment[this.getIndex(cube.r0, cube.g0, cube.b1)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+      case directions.GREEN:
+        return -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] + moment[this.getIndex(cube.r1, cube.g0, cube.b0)] + moment[this.getIndex(cube.r0, cube.g0, cube.b1)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+      case directions.BLUE:
+        return -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] + moment[this.getIndex(cube.r1, cube.g0, cube.b0)] + moment[this.getIndex(cube.r0, cube.g1, cube.b0)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+      default:
+        throw new Error("unexpected direction $direction");
+    }
+  }
+  top(cube, direction, position, moment) {
+    switch (direction) {
+      case directions.RED:
+        return moment[this.getIndex(position, cube.g1, cube.b1)] - moment[this.getIndex(position, cube.g1, cube.b0)] - moment[this.getIndex(position, cube.g0, cube.b1)] + moment[this.getIndex(position, cube.g0, cube.b0)];
+      case directions.GREEN:
+        return moment[this.getIndex(cube.r1, position, cube.b1)] - moment[this.getIndex(cube.r1, position, cube.b0)] - moment[this.getIndex(cube.r0, position, cube.b1)] + moment[this.getIndex(cube.r0, position, cube.b0)];
+      case directions.BLUE:
+        return moment[this.getIndex(cube.r1, cube.g1, position)] - moment[this.getIndex(cube.r1, cube.g0, position)] - moment[this.getIndex(cube.r0, cube.g1, position)] + moment[this.getIndex(cube.r0, cube.g0, position)];
+      default:
+        throw new Error("unexpected direction $direction");
+    }
+  }
+  getIndex(r, g, b) {
+    return (r << INDEX_BITS * 2) + (r << INDEX_BITS + 1) + r + (g << INDEX_BITS) + g + b;
+  }
+}
+class Box {
+  constructor(r0 = 0, r1 = 0, g0 = 0, g1 = 0, b0 = 0, b1 = 0, vol = 0) {
+    this.r0 = r0;
+    this.r1 = r1;
+    this.g0 = g0;
+    this.g1 = g1;
+    this.b0 = b0;
+    this.b1 = b1;
+    this.vol = vol;
+  }
+}
+class CreateBoxesResult {
+  constructor(requestedCount, resultCount) {
+    this.requestedCount = requestedCount;
+    this.resultCount = resultCount;
+  }
+}
+class MaximizeResult {
+  constructor(cutLocation, maximum) {
+    this.cutLocation = cutLocation;
+    this.maximum = maximum;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class QuantizerCelebi {
+  static quantize(pixels, maxColors) {
+    const wu = new QuantizerWu();
+    const wuResult = wu.quantize(pixels, maxColors);
+    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Scheme {
+  constructor(props) {
+    this.props = props;
+  }
+  get primary() {
+    return this.props.primary;
+  }
+  get onPrimary() {
+    return this.props.onPrimary;
+  }
+  get primaryContainer() {
+    return this.props.primaryContainer;
+  }
+  get onPrimaryContainer() {
+    return this.props.onPrimaryContainer;
+  }
+  get secondary() {
+    return this.props.secondary;
+  }
+  get onSecondary() {
+    return this.props.onSecondary;
+  }
+  get secondaryContainer() {
+    return this.props.secondaryContainer;
+  }
+  get onSecondaryContainer() {
+    return this.props.onSecondaryContainer;
+  }
+  get tertiary() {
+    return this.props.tertiary;
+  }
+  get onTertiary() {
+    return this.props.onTertiary;
+  }
+  get tertiaryContainer() {
+    return this.props.tertiaryContainer;
+  }
+  get onTertiaryContainer() {
+    return this.props.onTertiaryContainer;
+  }
+  get error() {
+    return this.props.error;
+  }
+  get onError() {
+    return this.props.onError;
+  }
+  get errorContainer() {
+    return this.props.errorContainer;
+  }
+  get onErrorContainer() {
+    return this.props.onErrorContainer;
+  }
+  get background() {
+    return this.props.background;
+  }
+  get onBackground() {
+    return this.props.onBackground;
+  }
+  get surface() {
+    return this.props.surface;
+  }
+  get onSurface() {
+    return this.props.onSurface;
+  }
+  get surfaceVariant() {
+    return this.props.surfaceVariant;
+  }
+  get onSurfaceVariant() {
+    return this.props.onSurfaceVariant;
+  }
+  get outline() {
+    return this.props.outline;
+  }
+  get outlineVariant() {
+    return this.props.outlineVariant;
+  }
+  get shadow() {
+    return this.props.shadow;
+  }
+  get scrim() {
+    return this.props.scrim;
+  }
+  get inverseSurface() {
+    return this.props.inverseSurface;
+  }
+  get inverseOnSurface() {
+    return this.props.inverseOnSurface;
+  }
+  get inversePrimary() {
+    return this.props.inversePrimary;
+  }
+  static light(argb) {
+    return Scheme.lightFromCorePalette(CorePalette.of(argb));
+  }
+  static dark(argb) {
+    return Scheme.darkFromCorePalette(CorePalette.of(argb));
+  }
+  static lightContent(argb) {
+    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));
+  }
+  static darkContent(argb) {
+    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));
+  }
+  static lightFromCorePalette(core) {
+    return new Scheme({
+      primary: core.a1.tone(40),
+      onPrimary: core.a1.tone(100),
+      primaryContainer: core.a1.tone(90),
+      onPrimaryContainer: core.a1.tone(10),
+      secondary: core.a2.tone(40),
+      onSecondary: core.a2.tone(100),
+      secondaryContainer: core.a2.tone(90),
+      onSecondaryContainer: core.a2.tone(10),
+      tertiary: core.a3.tone(40),
+      onTertiary: core.a3.tone(100),
+      tertiaryContainer: core.a3.tone(90),
+      onTertiaryContainer: core.a3.tone(10),
+      error: core.error.tone(40),
+      onError: core.error.tone(100),
+      errorContainer: core.error.tone(90),
+      onErrorContainer: core.error.tone(10),
+      background: core.n1.tone(99),
+      onBackground: core.n1.tone(10),
+      surface: core.n1.tone(99),
+      onSurface: core.n1.tone(10),
+      surfaceVariant: core.n2.tone(90),
+      onSurfaceVariant: core.n2.tone(30),
+      outline: core.n2.tone(50),
+      outlineVariant: core.n2.tone(80),
+      shadow: core.n1.tone(0),
+      scrim: core.n1.tone(0),
+      inverseSurface: core.n1.tone(20),
+      inverseOnSurface: core.n1.tone(95),
+      inversePrimary: core.a1.tone(80)
+    });
+  }
+  static darkFromCorePalette(core) {
+    return new Scheme({
+      primary: core.a1.tone(80),
+      onPrimary: core.a1.tone(20),
+      primaryContainer: core.a1.tone(30),
+      onPrimaryContainer: core.a1.tone(90),
+      secondary: core.a2.tone(80),
+      onSecondary: core.a2.tone(20),
+      secondaryContainer: core.a2.tone(30),
+      onSecondaryContainer: core.a2.tone(90),
+      tertiary: core.a3.tone(80),
+      onTertiary: core.a3.tone(20),
+      tertiaryContainer: core.a3.tone(30),
+      onTertiaryContainer: core.a3.tone(90),
+      error: core.error.tone(80),
+      onError: core.error.tone(20),
+      errorContainer: core.error.tone(30),
+      onErrorContainer: core.error.tone(80),
+      background: core.n1.tone(10),
+      onBackground: core.n1.tone(90),
+      surface: core.n1.tone(10),
+      onSurface: core.n1.tone(90),
+      surfaceVariant: core.n2.tone(30),
+      onSurfaceVariant: core.n2.tone(80),
+      outline: core.n2.tone(60),
+      outlineVariant: core.n2.tone(30),
+      shadow: core.n1.tone(0),
+      scrim: core.n1.tone(0),
+      inverseSurface: core.n1.tone(90),
+      inverseOnSurface: core.n1.tone(20),
+      inversePrimary: core.a1.tone(40)
+    });
+  }
+  toJSON() {
+    return {
+      ...this.props
+    };
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class SchemeAndroid {
+  constructor(props) {
+    this.props = props;
+  }
+  get colorAccentPrimary() {
+    return this.props.colorAccentPrimary;
+  }
+  get colorAccentPrimaryVariant() {
+    return this.props.colorAccentPrimaryVariant;
+  }
+  get colorAccentSecondary() {
+    return this.props.colorAccentSecondary;
+  }
+  get colorAccentSecondaryVariant() {
+    return this.props.colorAccentSecondaryVariant;
+  }
+  get colorAccentTertiary() {
+    return this.props.colorAccentTertiary;
+  }
+  get colorAccentTertiaryVariant() {
+    return this.props.colorAccentTertiaryVariant;
+  }
+  get textColorPrimary() {
+    return this.props.textColorPrimary;
+  }
+  get textColorSecondary() {
+    return this.props.textColorSecondary;
+  }
+  get textColorTertiary() {
+    return this.props.textColorTertiary;
+  }
+  get textColorPrimaryInverse() {
+    return this.props.textColorPrimaryInverse;
+  }
+  get textColorSecondaryInverse() {
+    return this.props.textColorSecondaryInverse;
+  }
+  get textColorTertiaryInverse() {
+    return this.props.textColorTertiaryInverse;
+  }
+  get colorBackground() {
+    return this.props.colorBackground;
+  }
+  get colorBackgroundFloating() {
+    return this.props.colorBackgroundFloating;
+  }
+  get colorSurface() {
+    return this.props.colorSurface;
+  }
+  get colorSurfaceVariant() {
+    return this.props.colorSurfaceVariant;
+  }
+  get colorSurfaceHighlight() {
+    return this.props.colorSurfaceHighlight;
+  }
+  get surfaceHeader() {
+    return this.props.surfaceHeader;
+  }
+  get underSurface() {
+    return this.props.underSurface;
+  }
+  get offState() {
+    return this.props.offState;
+  }
+  get accentSurface() {
+    return this.props.accentSurface;
+  }
+  get textPrimaryOnAccent() {
+    return this.props.textPrimaryOnAccent;
+  }
+  get textSecondaryOnAccent() {
+    return this.props.textSecondaryOnAccent;
+  }
+  get volumeBackground() {
+    return this.props.volumeBackground;
+  }
+  get scrim() {
+    return this.props.scrim;
+  }
+  static light(argb) {
+    const core = CorePalette.of(argb);
+    return SchemeAndroid.lightFromCorePalette(core);
+  }
+  static dark(argb) {
+    const core = CorePalette.of(argb);
+    return SchemeAndroid.darkFromCorePalette(core);
+  }
+  static lightContent(argb) {
+    const core = CorePalette.contentOf(argb);
+    return SchemeAndroid.lightFromCorePalette(core);
+  }
+  static darkContent(argb) {
+    const core = CorePalette.contentOf(argb);
+    return SchemeAndroid.darkFromCorePalette(core);
+  }
+  static lightFromCorePalette(core) {
+    return new SchemeAndroid({
+      colorAccentPrimary: core.a1.tone(90),
+      colorAccentPrimaryVariant: core.a1.tone(40),
+      colorAccentSecondary: core.a2.tone(90),
+      colorAccentSecondaryVariant: core.a2.tone(40),
+      colorAccentTertiary: core.a3.tone(90),
+      colorAccentTertiaryVariant: core.a3.tone(40),
+      textColorPrimary: core.n1.tone(10),
+      textColorSecondary: core.n2.tone(30),
+      textColorTertiary: core.n2.tone(50),
+      textColorPrimaryInverse: core.n1.tone(95),
+      textColorSecondaryInverse: core.n1.tone(80),
+      textColorTertiaryInverse: core.n1.tone(60),
+      colorBackground: core.n1.tone(95),
+      colorBackgroundFloating: core.n1.tone(98),
+      colorSurface: core.n1.tone(98),
+      colorSurfaceVariant: core.n1.tone(90),
+      colorSurfaceHighlight: core.n1.tone(100),
+      surfaceHeader: core.n1.tone(90),
+      underSurface: core.n1.tone(0),
+      offState: core.n1.tone(20),
+      accentSurface: core.a2.tone(95),
+      textPrimaryOnAccent: core.n1.tone(10),
+      textSecondaryOnAccent: core.n2.tone(30),
+      volumeBackground: core.n1.tone(25),
+      scrim: core.n1.tone(80)
+    });
+  }
+  static darkFromCorePalette(core) {
+    return new SchemeAndroid({
+      colorAccentPrimary: core.a1.tone(90),
+      colorAccentPrimaryVariant: core.a1.tone(70),
+      colorAccentSecondary: core.a2.tone(90),
+      colorAccentSecondaryVariant: core.a2.tone(70),
+      colorAccentTertiary: core.a3.tone(90),
+      colorAccentTertiaryVariant: core.a3.tone(70),
+      textColorPrimary: core.n1.tone(95),
+      textColorSecondary: core.n2.tone(80),
+      textColorTertiary: core.n2.tone(60),
+      textColorPrimaryInverse: core.n1.tone(10),
+      textColorSecondaryInverse: core.n1.tone(30),
+      textColorTertiaryInverse: core.n1.tone(50),
+      colorBackground: core.n1.tone(10),
+      colorBackgroundFloating: core.n1.tone(10),
+      colorSurface: core.n1.tone(20),
+      colorSurfaceVariant: core.n1.tone(30),
+      colorSurfaceHighlight: core.n1.tone(35),
+      surfaceHeader: core.n1.tone(30),
+      underSurface: core.n1.tone(0),
+      offState: core.n1.tone(20),
+      accentSurface: core.a2.tone(95),
+      textPrimaryOnAccent: core.n1.tone(10),
+      textSecondaryOnAccent: core.n2.tone(30),
+      volumeBackground: core.n1.tone(25),
+      scrim: core.n1.tone(80)
+    });
+  }
+  toJSON() {
+    return { ...this.props };
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const _Score = class {
+  constructor() {
+  }
+  static score(colorsToPopulation, contentColor = false) {
+    let populationSum = 0;
+    for (const population of colorsToPopulation.values()) {
+      populationSum += population;
+    }
+    const colorsToProportion = /* @__PURE__ */ new Map();
+    const colorsToCam = /* @__PURE__ */ new Map();
+    const hueProportions = new Array(360).fill(0);
+    for (const [color, population] of colorsToPopulation.entries()) {
+      const proportion = population / populationSum;
+      colorsToProportion.set(color, proportion);
+      const cam = Cam16.fromInt(color);
+      colorsToCam.set(color, cam);
+      const hue = Math.round(cam.hue);
+      hueProportions[hue] += proportion;
+    }
+    const colorsToExcitedProportion = /* @__PURE__ */ new Map();
+    for (const [color, cam] of colorsToCam.entries()) {
+      const hue = Math.round(cam.hue);
+      let excitedProportion = 0;
+      for (let i = hue - 15; i < hue + 15; i++) {
+        const neighborHue = sanitizeDegreesInt(i);
+        excitedProportion += hueProportions[neighborHue];
+      }
+      colorsToExcitedProportion.set(color, excitedProportion);
+    }
+    const colorsToScore = /* @__PURE__ */ new Map();
+    for (const [color, cam] of colorsToCam.entries()) {
+      const proportion = colorsToExcitedProportion.get(color);
+      const proportionScore = proportion * 100 * _Score.WEIGHT_PROPORTION;
+      const chromaWeight = cam.chroma < _Score.TARGET_CHROMA ? _Score.WEIGHT_CHROMA_BELOW : _Score.WEIGHT_CHROMA_ABOVE;
+      const chromaScore = (cam.chroma - _Score.TARGET_CHROMA) * chromaWeight;
+      const score = proportionScore + chromaScore;
+      colorsToScore.set(color, score);
+    }
+    const filteredColors = contentColor ? _Score.filterContent(colorsToCam) : _Score.filter(colorsToExcitedProportion, colorsToCam);
+    const dedupedColorsToScore = /* @__PURE__ */ new Map();
+    for (const color of filteredColors) {
+      let duplicateHue = false;
+      const hue = colorsToCam.get(color).hue;
+      for (const [alreadyChosenColor] of dedupedColorsToScore) {
+        const alreadyChosenHue = colorsToCam.get(alreadyChosenColor).hue;
+        if (differenceDegrees(hue, alreadyChosenHue) < 15) {
+          duplicateHue = true;
+          break;
+        }
+      }
+      if (duplicateHue) {
+        continue;
+      }
+      dedupedColorsToScore.set(color, colorsToScore.get(color));
+    }
+    const colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());
+    colorsByScoreDescending.sort((first, second) => {
+      return second[1] - first[1];
+    });
+    const answer = colorsByScoreDescending.map((entry) => {
+      return entry[0];
+    });
+    if (answer.length === 0) {
+      answer.push(4282549748);
+    }
+    return answer;
+  }
+  static filter(colorsToExcitedProportion, colorsToCam) {
+    const filtered = new Array();
+    for (const [color, cam] of colorsToCam.entries()) {
+      const proportion = colorsToExcitedProportion.get(color);
+      if (cam.chroma >= _Score.CUTOFF_CHROMA && lstarFromArgb(color) >= _Score.CUTOFF_TONE && proportion >= _Score.CUTOFF_EXCITED_PROPORTION) {
+        filtered.push(color);
+      }
+    }
+    return filtered;
+  }
+  static filterContent(colorsToCam) {
+    return Array.from(colorsToCam.keys());
+  }
+};
+let Score = _Score;
+Score.TARGET_CHROMA = 48;
+Score.WEIGHT_PROPORTION = 0.7;
+Score.WEIGHT_CHROMA_ABOVE = 0.3;
+Score.WEIGHT_CHROMA_BELOW = 0.1;
+Score.CUTOFF_CHROMA = 15;
+Score.CUTOFF_TONE = 10;
+Score.CUTOFF_EXCITED_PROPORTION = 0.01;
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const hexFromArgb = (argb) => {
+  const r = redFromArgb(argb);
+  const g = greenFromArgb(argb);
+  const b = blueFromArgb(argb);
+  const outParts = [r.toString(16), g.toString(16), b.toString(16)];
+  for (const [i, part] of outParts.entries()) {
+    if (part.length === 1) {
+      outParts[i] = "0" + part;
+    }
+  }
+  return "#" + outParts.join("");
+};
+const argbFromHex = (hex) => {
+  hex = hex.replace("#", "");
+  const isThree = hex.length === 3;
+  const isSix = hex.length === 6;
+  const isEight = hex.length === 8;
+  if (!isThree && !isSix && !isEight) {
+    throw new Error("unexpected hex " + hex);
+  }
+  let r = 0;
+  let g = 0;
+  let b = 0;
+  if (isThree) {
+    r = parseIntHex(hex.slice(0, 1).repeat(2));
+    g = parseIntHex(hex.slice(1, 2).repeat(2));
+    b = parseIntHex(hex.slice(2, 3).repeat(2));
+  } else if (isSix) {
+    r = parseIntHex(hex.slice(0, 2));
+    g = parseIntHex(hex.slice(2, 4));
+    b = parseIntHex(hex.slice(4, 6));
+  } else if (isEight) {
+    r = parseIntHex(hex.slice(2, 4));
+    g = parseIntHex(hex.slice(4, 6));
+    b = parseIntHex(hex.slice(6, 8));
+  }
+  return (255 << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255) >>> 0;
+};
+function parseIntHex(value) {
+  return parseInt(value, 16);
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+async function sourceColorFromImage(image) {
+  const imageBytes = await new Promise((resolve, reject) => {
+    const canvas = document.createElement("canvas");
+    const context = canvas.getContext("2d");
+    if (!context) {
+      return reject(new Error("Could not get canvas context"));
+    }
+    image.onload = () => {
+      canvas.width = image.width;
+      canvas.height = image.height;
+      context.drawImage(image, 0, 0);
+      resolve(context.getImageData(0, 0, image.width, image.height).data);
+    };
+  });
+  const pixels = [];
+  for (let i = 0; i < imageBytes.length; i += 4) {
+    const r = imageBytes[i];
+    const g = imageBytes[i + 1];
+    const b = imageBytes[i + 2];
+    const a = imageBytes[i + 3];
+    if (a < 255) {
+      continue;
+    }
+    const argb = argbFromRgb(r, g, b);
+    pixels.push(argb);
+  }
+  const result = QuantizerCelebi.quantize(pixels, 128);
+  const ranked = Score.score(result);
+  const top = ranked[0];
+  return top;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function themeFromSourceColor(source, customColors = []) {
+  const palette = CorePalette.of(source);
+  return {
+    source,
+    schemes: {
+      light: Scheme.light(source),
+      dark: Scheme.dark(source)
+    },
+    palettes: {
+      primary: palette.a1,
+      secondary: palette.a2,
+      tertiary: palette.a3,
+      neutral: palette.n1,
+      neutralVariant: palette.n2,
+      error: palette.error
+    },
+    customColors: customColors.map((c) => customColor(source, c))
+  };
+}
+async function themeFromImage(image, customColors = []) {
+  const source = await sourceColorFromImage(image);
+  return themeFromSourceColor(source, customColors);
+}
+function customColor(source, color) {
+  let value = color.value;
+  const from = value;
+  const to = source;
+  if (color.blend) {
+    value = Blend.harmonize(from, to);
+  }
+  const palette = CorePalette.of(value);
+  const tones = palette.a1;
+  return {
+    color,
+    value,
+    light: {
+      color: tones.tone(40),
+      onColor: tones.tone(100),
+      colorContainer: tones.tone(90),
+      onColorContainer: tones.tone(10)
+    },
+    dark: {
+      color: tones.tone(80),
+      onColor: tones.tone(20),
+      colorContainer: tones.tone(30),
+      onColorContainer: tones.tone(90)
+    }
+  };
+}
+function applyTheme(theme, options) {
+  const target = options?.target || document.body;
+  const isDark = options?.dark ?? false;
+  const scheme = isDark ? theme.schemes.dark : theme.schemes.light;
+  setSchemeProperties(target, scheme);
+  if (options?.brightnessSuffix) {
+    setSchemeProperties(target, theme.schemes.dark, "-dark");
+    setSchemeProperties(target, theme.schemes.light, "-light");
+  }
+  if (options?.paletteTones) {
+    const tones = options?.paletteTones ?? [];
+    for (const [key, palette] of Object.entries(theme.palettes)) {
+      const paletteKey = key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
+      for (const tone of tones) {
+        const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;
+        const color = hexFromArgb(palette.tone(tone));
+        target.style.setProperty(token, color);
+      }
+    }
+  }
+}
+function setSchemeProperties(target, scheme, suffix = "") {
+  for (const [key, value] of Object.entries(scheme.toJSON())) {
+    const token = key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
+    const color = hexFromArgb(value);
+    target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);
+  }
+}
+
+exports.Blend = Blend;
+exports.Cam16 = Cam16;
+exports.CorePalette = CorePalette;
+exports.Hct = Hct;
+exports.QuantizerCelebi = QuantizerCelebi;
+exports.QuantizerMap = QuantizerMap;
+exports.QuantizerWsmeans = QuantizerWsmeans;
+exports.QuantizerWu = QuantizerWu;
+exports.Scheme = Scheme;
+exports.SchemeAndroid = SchemeAndroid;
+exports.Score = Score;
+exports.TonalPalette = TonalPalette;
+exports.ViewingConditions = ViewingConditions;
+exports.alphaFromArgb = alphaFromArgb;
+exports.applyTheme = applyTheme;
+exports.argbFromHex = argbFromHex;
+exports.argbFromLab = argbFromLab;
+exports.argbFromLinrgb = argbFromLinrgb;
+exports.argbFromLstar = argbFromLstar;
+exports.argbFromRgb = argbFromRgb;
+exports.argbFromXyz = argbFromXyz;
+exports.blueFromArgb = blueFromArgb;
+exports.clampDouble = clampDouble;
+exports.clampInt = clampInt;
+exports.customColor = customColor;
+exports.delinearized = delinearized;
+exports.differenceDegrees = differenceDegrees;
+exports.greenFromArgb = greenFromArgb;
+exports.hexFromArgb = hexFromArgb;
+exports.isOpaque = isOpaque;
+exports.labFromArgb = labFromArgb;
+exports.lerp = lerp;
+exports.linearized = linearized;
+exports.lstarFromArgb = lstarFromArgb;
+exports.matrixMultiply = matrixMultiply;
+exports.redFromArgb = redFromArgb;
+exports.rotationDirection = rotationDirection;
+exports.sanitizeDegreesDouble = sanitizeDegreesDouble;
+exports.sanitizeDegreesInt = sanitizeDegreesInt;
+exports.signum = signum;
+exports.sourceColorFromImage = sourceColorFromImage;
+exports.themeFromImage = themeFromImage;
+exports.themeFromSourceColor = themeFromSourceColor;
+exports.whitePointD65 = whitePointD65;
+exports.xyzFromArgb = xyzFromArgb;
+exports.yFromLstar = yFromLstar;
diff --git a/node_modules/@material/material-color-utilities/dist/index.d.ts b/node_modules/@material/material-color-utilities/dist/index.d.ts
index fbe6133..39a6174 100644
--- a/node_modules/@material/material-color-utilities/dist/index.d.ts
+++ b/node_modules/@material/material-color-utilities/dist/index.d.ts
@@ -14,21 +14,1204 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-export * from './blend/blend';
-export * from './hct/cam16';
-export * from './hct/hct';
-export * from './hct/viewing_conditions';
-export * from './palettes/core_palette';
-export * from './palettes/tonal_palette';
-export * from './quantize/quantizer_celebi';
-export * from './quantize/quantizer_map';
-export * from './quantize/quantizer_wsmeans';
-export * from './quantize/quantizer_wu';
-export * from './scheme/scheme';
-export * from './scheme/scheme_android';
-export * from './score/score';
-export * from './utils/color_utils';
-export * from './utils/math_utils';
-export * from './utils/string_utils';
-export * from './utils/image_utils';
-export * from './utils/theme_utils';
+/**
+ * Functions for blending in HCT and CAM16.
+ */
+declare class Blend {
+    /**
+     * Blend the design color's HCT hue towards the key color's HCT
+     * hue, in a way that leaves the original color recognizable and
+     * recognizably shifted towards the key color.
+     *
+     * @param designColor ARGB representation of an arbitrary color.
+     * @param sourceColor ARGB representation of the main theme color.
+     * @return The design color with a hue shifted towards the
+     * system's color, a slightly warmer/cooler variant of the design
+     * color's hue.
+     */
+    static harmonize(designColor: number, sourceColor: number): number;
+    /**
+     * Blends hue from one color into another. The chroma and tone of
+     * the original color are maintained.
+     *
+     * @param from ARGB representation of color
+     * @param to ARGB representation of color
+     * @param amount how much blending to perform; 0.0 >= and <= 1.0
+     * @return from, with a hue blended towards to. Chroma and tone
+     * are constant.
+     */
+    static hctHue(from: number, to: number, amount: number): number;
+    /**
+     * Blend in CAM16-UCS space.
+     *
+     * @param from ARGB representation of color
+     * @param to ARGB representation of color
+     * @param amount how much blending to perform; 0.0 >= and <= 1.0
+     * @return from, blended towards to. Hue, chroma, and tone will
+     * change.
+     */
+    static cam16Ucs(from: number, to: number, amount: number): number;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * In traditional color spaces, a color can be identified solely by the
+ * observer's measurement of the color. Color appearance models such as CAM16
+ * also use information about the environment where the color was
+ * observed, known as the viewing conditions.
+ *
+ * For example, white under the traditional assumption of a midday sun white
+ * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
+ * hue 203, chroma 3, lightness 100)
+ *
+ * This class caches intermediate values of the CAM16 conversion process that
+ * depend only on viewing conditions, enabling speed ups.
+ */
+declare class ViewingConditions {
+    n: number;
+    aw: number;
+    nbb: number;
+    ncb: number;
+    c: number;
+    nc: number;
+    rgbD: number[];
+    fl: number;
+    fLRoot: number;
+    z: number;
+    /** sRGB-like viewing conditions.  */
+    static DEFAULT: ViewingConditions;
+    /**
+     * Create ViewingConditions from a simple, physically relevant, set of
+     * parameters.
+     *
+     * @param whitePoint White point, measured in the XYZ color space.
+     *     default = D65, or sunny day afternoon
+     * @param adaptingLuminance The luminance of the adapting field. Informally,
+     *     how bright it is in the room where the color is viewed. Can be
+     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,
+     *     or 200 lux.
+     * @param backgroundLstar The lightness of the area surrounding the color.
+     *     measured by L* in L*a*b*. default = 50.0
+     * @param surround A general description of the lighting surrounding the
+     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a
+     *     dimly light room, like watching TV at home at night. 2.0 means there
+     *     is no difference between the lighting on the color and around it.
+     *     default = 2.0
+     * @param discountingIlluminant Whether the eye accounts for the tint of the
+     *     ambient lighting, such as knowing an apple is still red in green light.
+     *     default = false, the eye does not perform this process on
+     *       self-luminous objects like displays.
+     */
+    static make(whitePoint?: number[], adaptingLuminance?: number, backgroundLstar?: number, surround?: number, discountingIlluminant?: boolean): ViewingConditions;
+    /**
+     * Parameters are intermediate values of the CAM16 conversion process. Their
+     * names are shorthand for technical color science terminology, this class
+     * would not benefit from documenting them individually. A brief overview
+     * is available in the CAM16 specification, and a complete overview requires
+     * a color science textbook, such as Fairchild's Color Appearance Models.
+     */
+    private constructor();
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * CAM16, a color appearance model. Colors are not just defined by their hex
+ * code, but rather, a hex code and viewing conditions.
+ *
+ * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,
+ * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
+ * specification, and should be used when measuring distances between colors.
+ *
+ * In traditional color spaces, a color can be identified solely by the
+ * observer's measurement of the color. Color appearance models such as CAM16
+ * also use information about the environment where the color was
+ * observed, known as the viewing conditions.
+ *
+ * For example, white under the traditional assumption of a midday sun white
+ * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,
+ * hue 203, chroma 3, lightness 100)
+ */
+declare class Cam16 {
+    readonly hue: number;
+    readonly chroma: number;
+    readonly j: number;
+    readonly q: number;
+    readonly m: number;
+    readonly s: number;
+    readonly jstar: number;
+    readonly astar: number;
+    readonly bstar: number;
+    /**
+     * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in
+     * the following combinations:
+     *      -  {j or q} and {c, m, or s} and hue
+     *      - jstar, astar, bstar
+     * Prefer using a static method that constructs from 3 of those dimensions.
+     * This constructor is intended for those methods to use to return all
+     * possible dimensions.
+     *
+     * @param hue
+     * @param chroma informally, colorfulness / color intensity. like saturation
+     *     in HSL, except perceptually accurate.
+     * @param j lightness
+     * @param q brightness; ratio of lightness to white point's lightness
+     * @param m colorfulness
+     * @param s saturation; ratio of chroma to white point's chroma
+     * @param jstar CAM16-UCS J coordinate
+     * @param astar CAM16-UCS a coordinate
+     * @param bstar CAM16-UCS b coordinate
+     */
+    constructor(hue: number, chroma: number, j: number, q: number, m: number, s: number, jstar: number, astar: number, bstar: number);
+    /**
+     * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,
+     * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16
+     * specification, and is used to measure distances between colors.
+     */
+    distance(other: Cam16): number;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return CAM16 color, assuming the color was viewed in default viewing
+     *     conditions.
+     */
+    static fromInt(argb: number): Cam16;
+    /**
+     * @param argb ARGB representation of a color.
+     * @param viewingConditions Information about the environment where the color
+     *     was observed.
+     * @return CAM16 color.
+     */
+    static fromIntInViewingConditions(argb: number, viewingConditions: ViewingConditions): Cam16;
+    /**
+     * @param j CAM16 lightness
+     * @param c CAM16 chroma
+     * @param h CAM16 hue
+     */
+    static fromJch(j: number, c: number, h: number): Cam16;
+    /**
+     * @param j CAM16 lightness
+     * @param c CAM16 chroma
+     * @param h CAM16 hue
+     * @param viewingConditions Information about the environment where the color
+     *     was observed.
+     */
+    static fromJchInViewingConditions(j: number, c: number, h: number, viewingConditions: ViewingConditions): Cam16;
+    /**
+     * @param jstar CAM16-UCS lightness.
+     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
+     *     coordinate on the Y axis.
+     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
+     *     coordinate on the X axis.
+     */
+    static fromUcs(jstar: number, astar: number, bstar: number): Cam16;
+    /**
+     * @param jstar CAM16-UCS lightness.
+     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian
+     *     coordinate on the Y axis.
+     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian
+     *     coordinate on the X axis.
+     * @param viewingConditions Information about the environment where the color
+     *     was observed.
+     */
+    static fromUcsInViewingConditions(jstar: number, astar: number, bstar: number, viewingConditions: ViewingConditions): Cam16;
+    /**
+     *  @return ARGB representation of color, assuming the color was viewed in
+     *     default viewing conditions, which are near-identical to the default
+     *     viewing conditions for sRGB.
+     */
+    toInt(): number;
+    /**
+     * @param viewingConditions Information about the environment where the color
+     *     will be viewed.
+     * @return ARGB representation of color
+     */
+    viewed(viewingConditions: ViewingConditions): number;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * HCT, hue, chroma, and tone. A color system that provides a perceptually
+ * accurate color measurement system that can also accurately render what colors
+ * will appear as in different lighting environments.
+ */
+declare class Hct {
+    private argb;
+    /**
+     * @param hue 0 <= hue < 360; invalid values are corrected.
+     * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color
+     *     returned may be lower than the requested chroma. Chroma has a different
+     *     maximum for any given hue and tone.
+     * @param tone 0 <= tone <= 100; invalid values are corrected.
+     * @return HCT representation of a color in default viewing conditions.
+     */
+    internalHue: number;
+    internalChroma: number;
+    internalTone: number;
+    static from(hue: number, chroma: number, tone: number): Hct;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return HCT representation of a color in default viewing conditions
+     */
+    static fromInt(argb: number): Hct;
+    toInt(): number;
+    /**
+     * A number, in degrees, representing ex. red, orange, yellow, etc.
+     * Ranges from 0 <= hue < 360.
+     */
+    get hue(): number;
+    /**
+     * @param newHue 0 <= newHue < 360; invalid values are corrected.
+     * Chroma may decrease because chroma has a different maximum for any given
+     * hue and tone.
+     */
+    set hue(newHue: number);
+    get chroma(): number;
+    /**
+     * @param newChroma 0 <= newChroma < ?
+     * Chroma may decrease because chroma has a different maximum for any given
+     * hue and tone.
+     */
+    set chroma(newChroma: number);
+    /** Lightness. Ranges from 0 to 100. */
+    get tone(): number;
+    /**
+     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.
+     * Chroma may decrease because chroma has a different maximum for any given
+     * hue and tone.
+     */
+    set tone(newTone: number);
+    private constructor();
+    private setInternalState;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *  A convenience class for retrieving colors that are constant in hue and
+ *  chroma, but vary in tone.
+ */
+declare class TonalPalette {
+    private readonly hue;
+    private readonly chroma;
+    private readonly cache;
+    /**
+     * @param argb ARGB representation of a color
+     * @return Tones matching that color's hue and chroma.
+     */
+    static fromInt(argb: number): TonalPalette;
+    /**
+     * @param hue HCT hue
+     * @param chroma HCT chroma
+     * @return Tones matching hue and chroma.
+     */
+    static fromHueAndChroma(hue: number, chroma: number): TonalPalette;
+    private constructor();
+    /**
+     * @param tone HCT tone, measured from 0 to 100.
+     * @return ARGB representation of a color with that tone.
+     */
+    tone(tone: number): number;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * An intermediate concept between the key color for a UI theme, and a full
+ * color scheme. 5 sets of tones are generated, all except one use the same hue
+ * as the key color, and all vary in chroma.
+ */
+declare class CorePalette {
+    a1: TonalPalette;
+    a2: TonalPalette;
+    a3: TonalPalette;
+    n1: TonalPalette;
+    n2: TonalPalette;
+    error: TonalPalette;
+    /**
+     * @param argb ARGB representation of a color
+     */
+    static of(argb: number): CorePalette;
+    /**
+     * @param argb ARGB representation of a color
+     */
+    static contentOf(argb: number): CorePalette;
+    private constructor();
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * An image quantizer that improves on the quality of a standard K-Means
+ * algorithm by setting the K-Means initial state to the output of a Wu
+ * quantizer, instead of random centroids. Improves on speed by several
+ * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means
+ * with those optimizations.
+ *
+ * This algorithm was designed by M. Emre Celebi, and was found in their 2011
+ * paper, Improving the Performance of K-Means for Color Quantization.
+ * https://arxiv.org/abs/1101.0395
+ */
+declare class QuantizerCelebi {
+    /**
+     * @param pixels Colors in ARGB format.
+     * @param maxColors The number of colors to divide the image into. A lower
+     *     number of colors may be returned.
+     * @return Map with keys of colors in ARGB format, and values of number of
+     *     pixels in the original image that correspond to the color in the
+     *     quantized image.
+     */
+    static quantize(pixels: number[], maxColors: number): Map<number, number>;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * Quantizes an image into a map, with keys of ARGB colors, and values of the
+ * number of times that color appears in the image.
+ */
+declare class QuantizerMap {
+    /**
+     * @param pixels Colors in ARGB format.
+     * @return A Map with keys of ARGB colors, and values of the number of times
+     *     the color appears in the image.
+     */
+    static quantize(pixels: number[]): Map<number, number>;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * An image quantizer that improves on the speed of a standard K-Means algorithm
+ * by implementing several optimizations, including deduping identical pixels
+ * and a triangle inequality rule that reduces the number of comparisons needed
+ * to identify which cluster a point should be moved to.
+ *
+ * Wsmeans stands for Weighted Square Means.
+ *
+ * This algorithm was designed by M. Emre Celebi, and was found in their 2011
+ * paper, Improving the Performance of K-Means for Color Quantization.
+ * https://arxiv.org/abs/1101.0395
+ */
+declare class QuantizerWsmeans {
+    /**
+     * @param inputPixels Colors in ARGB format.
+     * @param startingClusters Defines the initial state of the quantizer. Passing
+     *     an empty array is fine, the implementation will create its own initial
+     *     state that leads to reproducible results for the same inputs.
+     *     Passing an array that is the result of Wu quantization leads to higher
+     *     quality results.
+     * @param maxColors The number of colors to divide the image into. A lower
+     *     number of colors may be returned.
+     * @return Colors in ARGB format.
+     */
+    static quantize(inputPixels: number[], startingClusters: number[], maxColors: number): Map<number, number>;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * An image quantizer that divides the image's pixels into clusters by
+ * recursively cutting an RGB cube, based on the weight of pixels in each area
+ * of the cube.
+ *
+ * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in
+ * 1991.
+ */
+declare class QuantizerWu {
+    private weights;
+    private momentsR;
+    private momentsG;
+    private momentsB;
+    private moments;
+    private cubes;
+    constructor(weights?: number[], momentsR?: number[], momentsG?: number[], momentsB?: number[], moments?: number[], cubes?: Box[]);
+    /**
+     * @param pixels Colors in ARGB format.
+     * @param maxColors The number of colors to divide the image into. A lower
+     *     number of colors may be returned.
+     * @return Colors in ARGB format.
+     */
+    quantize(pixels: number[], maxColors: number): number[];
+    private constructHistogram;
+    private computeMoments;
+    private createBoxes;
+    private createResult;
+    private variance;
+    private cut;
+    private maximize;
+    private volume;
+    private bottom;
+    private top;
+    private getIndex;
+}
+/**
+ * Keeps track of the state of each box created as the Wu  quantization
+ * algorithm progresses through dividing the image's pixels as plotted in RGB.
+ */
+declare class Box {
+    r0: number;
+    r1: number;
+    g0: number;
+    g1: number;
+    b0: number;
+    b1: number;
+    vol: number;
+    constructor(r0?: number, r1?: number, g0?: number, g1?: number, b0?: number, b1?: number, vol?: number);
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Represents a Material color scheme, a mapping of color roles to colors.
+ */
+declare class Scheme {
+    private readonly props;
+    get primary(): number;
+    get onPrimary(): number;
+    get primaryContainer(): number;
+    get onPrimaryContainer(): number;
+    get secondary(): number;
+    get onSecondary(): number;
+    get secondaryContainer(): number;
+    get onSecondaryContainer(): number;
+    get tertiary(): number;
+    get onTertiary(): number;
+    get tertiaryContainer(): number;
+    get onTertiaryContainer(): number;
+    get error(): number;
+    get onError(): number;
+    get errorContainer(): number;
+    get onErrorContainer(): number;
+    get background(): number;
+    get onBackground(): number;
+    get surface(): number;
+    get onSurface(): number;
+    get surfaceVariant(): number;
+    get onSurfaceVariant(): number;
+    get outline(): number;
+    get outlineVariant(): number;
+    get shadow(): number;
+    get scrim(): number;
+    get inverseSurface(): number;
+    get inverseOnSurface(): number;
+    get inversePrimary(): number;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Light Material color scheme, based on the color's hue.
+     */
+    static light(argb: number): Scheme;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Dark Material color scheme, based on the color's hue.
+     */
+    static dark(argb: number): Scheme;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Light Material content color scheme, based on the color's hue.
+     */
+    static lightContent(argb: number): Scheme;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Dark Material content color scheme, based on the color's hue.
+     */
+    static darkContent(argb: number): Scheme;
+    /**
+     * Light scheme from core palette
+     */
+    static lightFromCorePalette(core: CorePalette): Scheme;
+    /**
+     * Dark scheme from core palette
+     */
+    static darkFromCorePalette(core: CorePalette): Scheme;
+    private constructor();
+    toJSON(): {
+        primary: number;
+        onPrimary: number;
+        primaryContainer: number;
+        onPrimaryContainer: number;
+        secondary: number;
+        onSecondary: number;
+        secondaryContainer: number;
+        onSecondaryContainer: number;
+        tertiary: number;
+        onTertiary: number;
+        tertiaryContainer: number;
+        onTertiaryContainer: number;
+        error: number;
+        onError: number;
+        errorContainer: number;
+        onErrorContainer: number;
+        background: number;
+        onBackground: number;
+        surface: number;
+        onSurface: number;
+        surfaceVariant: number;
+        onSurfaceVariant: number;
+        outline: number;
+        outlineVariant: number;
+        shadow: number;
+        scrim: number;
+        inverseSurface: number;
+        inverseOnSurface: number;
+        inversePrimary: number;
+    };
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Represents an Android 12 color scheme, a mapping of color roles to colors.
+ */
+declare class SchemeAndroid {
+    private readonly props;
+    get colorAccentPrimary(): number;
+    get colorAccentPrimaryVariant(): number;
+    get colorAccentSecondary(): number;
+    get colorAccentSecondaryVariant(): number;
+    get colorAccentTertiary(): number;
+    get colorAccentTertiaryVariant(): number;
+    get textColorPrimary(): number;
+    get textColorSecondary(): number;
+    get textColorTertiary(): number;
+    get textColorPrimaryInverse(): number;
+    get textColorSecondaryInverse(): number;
+    get textColorTertiaryInverse(): number;
+    get colorBackground(): number;
+    get colorBackgroundFloating(): number;
+    get colorSurface(): number;
+    get colorSurfaceVariant(): number;
+    get colorSurfaceHighlight(): number;
+    get surfaceHeader(): number;
+    get underSurface(): number;
+    get offState(): number;
+    get accentSurface(): number;
+    get textPrimaryOnAccent(): number;
+    get textSecondaryOnAccent(): number;
+    get volumeBackground(): number;
+    get scrim(): number;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Light Material color scheme, based on the color's hue.
+     */
+    static light(argb: number): SchemeAndroid;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Dark Material color scheme, based on the color's hue.
+     */
+    static dark(argb: number): SchemeAndroid;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Light Android color scheme, based on the color's hue.
+     */
+    static lightContent(argb: number): SchemeAndroid;
+    /**
+     * @param argb ARGB representation of a color.
+     * @return Dark Android color scheme, based on the color's hue.
+     */
+    static darkContent(argb: number): SchemeAndroid;
+    /**
+     * Light scheme from core palette
+     */
+    static lightFromCorePalette(core: CorePalette): SchemeAndroid;
+    /**
+     * Dark scheme from core palette
+     */
+    static darkFromCorePalette(core: CorePalette): SchemeAndroid;
+    private constructor();
+    toJSON(): {
+        colorAccentPrimary: number;
+        colorAccentPrimaryVariant: number;
+        colorAccentSecondary: number;
+        colorAccentSecondaryVariant: number;
+        colorAccentTertiary: number;
+        colorAccentTertiaryVariant: number;
+        textColorPrimary: number;
+        textColorSecondary: number;
+        textColorTertiary: number;
+        textColorPrimaryInverse: number;
+        textColorSecondaryInverse: number;
+        textColorTertiaryInverse: number;
+        colorBackground: number;
+        colorBackgroundFloating: number;
+        colorSurface: number;
+        colorSurfaceVariant: number;
+        colorSurfaceHighlight: number;
+        surfaceHeader: number;
+        underSurface: number;
+        offState: number;
+        accentSurface: number;
+        textPrimaryOnAccent: number;
+        textSecondaryOnAccent: number;
+        volumeBackground: number;
+        scrim: number;
+    };
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ *  Given a large set of colors, remove colors that are unsuitable for a UI
+ *  theme, and rank the rest based on suitability.
+ *
+ *  Enables use of a high cluster count for image quantization, thus ensuring
+ *  colors aren't muddied, while curating the high cluster count to a much
+ *  smaller number of appropriate choices.
+ */
+declare class Score {
+    private static readonly TARGET_CHROMA;
+    private static readonly WEIGHT_PROPORTION;
+    private static readonly WEIGHT_CHROMA_ABOVE;
+    private static readonly WEIGHT_CHROMA_BELOW;
+    private static readonly CUTOFF_CHROMA;
+    private static readonly CUTOFF_TONE;
+    private static readonly CUTOFF_EXCITED_PROPORTION;
+    private constructor();
+    /**
+     * Given a map with keys of colors and values of how often the color appears,
+     * rank the colors based on suitability for being used for a UI theme.
+     *
+     * @param colorsToPopulation map with keys of colors and values of how often
+     *     the color appears, usually from a source image.
+     * @return Colors sorted by suitability for a UI theme. The most suitable
+     *     color is the first item, the least suitable is the last. There will
+     *     always be at least one color returned. If all the input colors
+     *     were not suitable for a theme, a default fallback color will be
+     *     provided, Google Blue.
+     */
+    static score(colorsToPopulation: Map<number, number>, contentColor?: boolean): number[];
+    private static filter;
+    private static filterContent;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * Converts a color from RGB components to ARGB format.
+ */
+declare function argbFromRgb(red: number, green: number, blue: number): number;
+/**
+ * Converts a color from linear RGB components to ARGB format.
+ */
+declare function argbFromLinrgb(linrgb: number[]): number;
+/**
+ * Returns the alpha component of a color in ARGB format.
+ */
+declare function alphaFromArgb(argb: number): number;
+/**
+ * Returns the red component of a color in ARGB format.
+ */
+declare function redFromArgb(argb: number): number;
+/**
+ * Returns the green component of a color in ARGB format.
+ */
+declare function greenFromArgb(argb: number): number;
+/**
+ * Returns the blue component of a color in ARGB format.
+ */
+declare function blueFromArgb(argb: number): number;
+/**
+ * Returns whether a color in ARGB format is opaque.
+ */
+declare function isOpaque(argb: number): boolean;
+/**
+ * Converts a color from ARGB to XYZ.
+ */
+declare function argbFromXyz(x: number, y: number, z: number): number;
+/**
+ * Converts a color from XYZ to ARGB.
+ */
+declare function xyzFromArgb(argb: number): number[];
+/**
+ * Converts a color represented in Lab color space into an ARGB
+ * integer.
+ */
+declare function argbFromLab(l: number, a: number, b: number): number;
+/**
+ * Converts a color from ARGB representation to L*a*b*
+ * representation.
+ *
+ * @param argb the ARGB representation of a color
+ * @return a Lab object representing the color
+ */
+declare function labFromArgb(argb: number): number[];
+/**
+ * Converts an L* value to an ARGB representation.
+ *
+ * @param lstar L* in L*a*b*
+ * @return ARGB representation of grayscale color with lightness
+ * matching L*
+ */
+declare function argbFromLstar(lstar: number): number;
+/**
+ * Computes the L* value of a color in ARGB representation.
+ *
+ * @param argb ARGB representation of a color
+ * @return L*, from L*a*b*, coordinate of the color
+ */
+declare function lstarFromArgb(argb: number): number;
+/**
+ * Converts an L* value to a Y value.
+ *
+ * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.
+ *
+ * L* measures perceptual luminance, a linear scale. Y in XYZ
+ * measures relative luminance, a logarithmic scale.
+ *
+ * @param lstar L* in L*a*b*
+ * @return Y in XYZ
+ */
+declare function yFromLstar(lstar: number): number;
+/**
+ * Linearizes an RGB component.
+ *
+ * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B
+ * channel
+ * @return 0.0 <= output <= 100.0, color channel converted to
+ * linear RGB space
+ */
+declare function linearized(rgbComponent: number): number;
+/**
+ * Delinearizes an RGB component.
+ *
+ * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
+ * linear R/G/B channel
+ * @return 0 <= output <= 255, color channel converted to regular
+ * RGB space
+ */
+declare function delinearized(rgbComponent: number): number;
+/**
+ * Returns the standard white point; white on a sunny day.
+ *
+ * @return The white point
+ */
+declare function whitePointD65(): number[];
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * Utility methods for mathematical operations.
+ */
+/**
+ * The signum function.
+ *
+ * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0
+ */
+declare function signum(num: number): number;
+/**
+ * The linear interpolation function.
+ *
+ * @return start if amount = 0 and stop if amount = 1
+ */
+declare function lerp(start: number, stop: number, amount: number): number;
+/**
+ * Clamps an integer between two integers.
+ *
+ * @return input when min <= input <= max, and either min or max
+ * otherwise.
+ */
+declare function clampInt(min: number, max: number, input: number): number;
+/**
+ * Clamps an integer between two floating-point numbers.
+ *
+ * @return input when min <= input <= max, and either min or max
+ * otherwise.
+ */
+declare function clampDouble(min: number, max: number, input: number): number;
+/**
+ * Sanitizes a degree measure as an integer.
+ *
+ * @return a degree measure between 0 (inclusive) and 360
+ * (exclusive).
+ */
+declare function sanitizeDegreesInt(degrees: number): number;
+/**
+ * Sanitizes a degree measure as a floating-point number.
+ *
+ * @return a degree measure between 0.0 (inclusive) and 360.0
+ * (exclusive).
+ */
+declare function sanitizeDegreesDouble(degrees: number): number;
+/**
+ * Sign of direction change needed to travel from one angle to
+ * another.
+ *
+ * For angles that are 180 degrees apart from each other, both
+ * directions have the same travel distance, so either direction is
+ * shortest. The value 1.0 is returned in this case.
+ *
+ * @param from The angle travel starts from, in degrees.
+ * @param to The angle travel ends at, in degrees.
+ * @return -1 if decreasing from leads to the shortest travel
+ * distance, 1 if increasing from leads to the shortest travel
+ * distance.
+ */
+declare function rotationDirection(from: number, to: number): number;
+/**
+ * Distance of two points on a circle, represented using degrees.
+ */
+declare function differenceDegrees(a: number, b: number): number;
+/**
+ * Multiplies a 1x3 row vector with a 3x3 matrix.
+ */
+declare function matrixMultiply(row: number[], matrix: number[][]): number[];
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * Utility methods for hexadecimal representations of colors.
+ */
+/**
+ * @param argb ARGB representation of a color.
+ * @return Hex string representing color, ex. #ff0000 for red.
+ */
+declare const hexFromArgb: (argb: number) => string;
+/**
+ * @param hex String representing color as hex code. Accepts strings with or
+ *     without leading #, and string representing the color using 3, 6, or 8
+ *     hex characters.
+ * @return ARGB representation of color.
+ */
+declare const argbFromHex: (hex: string) => number;
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * Get the source color from an image.
+ *
+ * @param image The image element
+ * @return Source color - the color most suitable for creating a UI theme
+ */
+declare function sourceColorFromImage(image: HTMLImageElement): Promise<number>;
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Custom color used to pair with a theme
+ */
+interface CustomColor {
+    value: number;
+    name: string;
+    blend: boolean;
+}
+/**
+ * Color group
+ */
+interface ColorGroup {
+    color: number;
+    onColor: number;
+    colorContainer: number;
+    onColorContainer: number;
+}
+/**
+ * Custom Color Group
+ */
+interface CustomColorGroup {
+    color: CustomColor;
+    value: number;
+    light: ColorGroup;
+    dark: ColorGroup;
+}
+/**
+ * Theme
+ */
+interface Theme {
+    source: number;
+    schemes: {
+        light: Scheme;
+        dark: Scheme;
+    };
+    palettes: {
+        primary: TonalPalette;
+        secondary: TonalPalette;
+        tertiary: TonalPalette;
+        neutral: TonalPalette;
+        neutralVariant: TonalPalette;
+        error: TonalPalette;
+    };
+    customColors: CustomColorGroup[];
+}
+/**
+ * Generate a theme from a source color
+ *
+ * @param source Source color
+ * @param customColors Array of custom colors
+ * @return Theme object
+ */
+declare function themeFromSourceColor(source: number, customColors?: CustomColor[]): Theme;
+/**
+ * Generate a theme from an image source
+ *
+ * @param image Image element
+ * @param customColors Array of custom colors
+ * @return Theme object
+ */
+declare function themeFromImage(image: HTMLImageElement, customColors?: CustomColor[]): Promise<Theme>;
+/**
+ * Generate custom color group from source and target color
+ *
+ * @param source Source color
+ * @param color Custom color
+ * @return Custom color group
+ *
+ * @link https://m3.material.io/styles/color/the-color-system/color-roles
+ */
+declare function customColor(source: number, color: CustomColor): CustomColorGroup;
+/**
+ * Apply a theme to an element
+ *
+ * @param theme Theme object
+ * @param options Options
+ */
+declare function applyTheme(theme: Theme, options?: {
+    dark?: boolean;
+    target?: HTMLElement;
+    brightnessSuffix?: boolean;
+    paletteTones?: number[];
+}): void;
+
+export { Blend, Cam16, ColorGroup, CorePalette, CustomColor, CustomColorGroup, Hct, QuantizerCelebi, QuantizerMap, QuantizerWsmeans, QuantizerWu, Scheme, SchemeAndroid, Score, Theme, TonalPalette, ViewingConditions, alphaFromArgb, applyTheme, argbFromHex, argbFromLab, argbFromLinrgb, argbFromLstar, argbFromRgb, argbFromXyz, blueFromArgb, clampDouble, clampInt, customColor, delinearized, differenceDegrees, greenFromArgb, hexFromArgb, isOpaque, labFromArgb, lerp, linearized, lstarFromArgb, matrixMultiply, redFromArgb, rotationDirection, sanitizeDegreesDouble, sanitizeDegreesInt, signum, sourceColorFromImage, themeFromImage, themeFromSourceColor, whitePointD65, xyzFromArgb, yFromLstar };
diff --git a/node_modules/@material/material-color-utilities/dist/index.js b/node_modules/@material/material-color-utilities/dist/index.js
deleted file mode 100644
index cce3c67..0000000
--- a/node_modules/@material/material-color-utilities/dist/index.js
+++ /dev/null
@@ -1,35 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-export * from './blend/blend';
-export * from './hct/cam16';
-export * from './hct/hct';
-export * from './hct/viewing_conditions';
-export * from './palettes/core_palette';
-export * from './palettes/tonal_palette';
-export * from './quantize/quantizer_celebi';
-export * from './quantize/quantizer_map';
-export * from './quantize/quantizer_wsmeans';
-export * from './quantize/quantizer_wu';
-export * from './scheme/scheme';
-export * from './scheme/scheme_android';
-export * from './score/score';
-export * from './utils/color_utils';
-export * from './utils/math_utils';
-export * from './utils/string_utils';
-export * from './utils/image_utils';
-export * from './utils/theme_utils';
-//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/index.js.map b/node_modules/@material/material-color-utilities/dist/index.js.map
deleted file mode 100644
index 9fd22c2..0000000
--- a/node_modules/@material/material-color-utilities/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,cAAc,eAAe,CAAC;AAC9B,cAAc,aAAa,CAAC;AAC5B,cAAc,WAAW,CAAC;AAC1B,cAAc,0BAA0B,CAAC;AACzC,cAAc,yBAAyB,CAAC;AACxC,cAAc,0BAA0B,CAAC;AACzC,cAAc,6BAA6B,CAAC;AAC5C,cAAc,0BAA0B,CAAC;AACzC,cAAc,8BAA8B,CAAC;AAC7C,cAAc,yBAAyB,CAAC;AACxC,cAAc,iBAAiB,CAAC;AAChC,cAAc,yBAAyB,CAAC;AACxC,cAAc,eAAe,CAAC;AAC9B,cAAc,qBAAqB,CAAC;AACpC,cAAc,oBAAoB,CAAC;AACnC,cAAc,sBAAsB,CAAC;AACrC,cAAc,qBAAqB,CAAC;AACpC,cAAc,qBAAqB,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './blend/blend';\nexport * from './hct/cam16';\nexport * from './hct/hct';\nexport * from './hct/viewing_conditions';\nexport * from './palettes/core_palette';\nexport * from './palettes/tonal_palette';\nexport * from './quantize/quantizer_celebi';\nexport * from './quantize/quantizer_map';\nexport * from './quantize/quantizer_wsmeans';\nexport * from './quantize/quantizer_wu';\nexport * from './scheme/scheme';\nexport * from './scheme/scheme_android';\nexport * from './score/score';\nexport * from './utils/color_utils';\nexport * from './utils/math_utils';\nexport * from './utils/string_utils';\nexport * from './utils/image_utils';\nexport * from './utils/theme_utils';"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/index.mjs b/node_modules/@material/material-color-utilities/dist/index.mjs
new file mode 100644
index 0000000..4ac4610
--- /dev/null
+++ b/node_modules/@material/material-color-utilities/dist/index.mjs
@@ -0,0 +1,2525 @@
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function signum(num) {
+  if (num < 0) {
+    return -1;
+  } else if (num === 0) {
+    return 0;
+  } else {
+    return 1;
+  }
+}
+function lerp(start, stop, amount) {
+  return (1 - amount) * start + amount * stop;
+}
+function clampInt(min, max, input) {
+  if (input < min) {
+    return min;
+  } else if (input > max) {
+    return max;
+  }
+  return input;
+}
+function clampDouble(min, max, input) {
+  if (input < min) {
+    return min;
+  } else if (input > max) {
+    return max;
+  }
+  return input;
+}
+function sanitizeDegreesInt(degrees) {
+  degrees = degrees % 360;
+  if (degrees < 0) {
+    degrees = degrees + 360;
+  }
+  return degrees;
+}
+function sanitizeDegreesDouble(degrees) {
+  degrees = degrees % 360;
+  if (degrees < 0) {
+    degrees = degrees + 360;
+  }
+  return degrees;
+}
+function rotationDirection(from, to) {
+  const increasingDifference = sanitizeDegreesDouble(to - from);
+  return increasingDifference <= 180 ? 1 : -1;
+}
+function differenceDegrees(a, b) {
+  return 180 - Math.abs(Math.abs(a - b) - 180);
+}
+function matrixMultiply(row, matrix) {
+  const a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];
+  const b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];
+  const c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];
+  return [a, b, c];
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const SRGB_TO_XYZ = [
+  [0.41233895, 0.35762064, 0.18051042],
+  [0.2126, 0.7152, 0.0722],
+  [0.01932141, 0.11916382, 0.95034478]
+];
+const XYZ_TO_SRGB = [
+  [
+    3.2413774792388685,
+    -1.5376652402851851,
+    -0.49885366846268053
+  ],
+  [
+    -0.9691452513005321,
+    1.8758853451067872,
+    0.04156585616912061
+  ],
+  [
+    0.05562093689691305,
+    -0.20395524564742123,
+    1.0571799111220335
+  ]
+];
+const WHITE_POINT_D65 = [95.047, 100, 108.883];
+function argbFromRgb(red, green, blue) {
+  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;
+}
+function argbFromLinrgb(linrgb) {
+  const r = delinearized(linrgb[0]);
+  const g = delinearized(linrgb[1]);
+  const b = delinearized(linrgb[2]);
+  return argbFromRgb(r, g, b);
+}
+function alphaFromArgb(argb) {
+  return argb >> 24 & 255;
+}
+function redFromArgb(argb) {
+  return argb >> 16 & 255;
+}
+function greenFromArgb(argb) {
+  return argb >> 8 & 255;
+}
+function blueFromArgb(argb) {
+  return argb & 255;
+}
+function isOpaque(argb) {
+  return alphaFromArgb(argb) >= 255;
+}
+function argbFromXyz(x, y, z) {
+  const matrix = XYZ_TO_SRGB;
+  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;
+  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;
+  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;
+  const r = delinearized(linearR);
+  const g = delinearized(linearG);
+  const b = delinearized(linearB);
+  return argbFromRgb(r, g, b);
+}
+function xyzFromArgb(argb) {
+  const r = linearized(redFromArgb(argb));
+  const g = linearized(greenFromArgb(argb));
+  const b = linearized(blueFromArgb(argb));
+  return matrixMultiply([r, g, b], SRGB_TO_XYZ);
+}
+function argbFromLab(l, a, b) {
+  const whitePoint = WHITE_POINT_D65;
+  const fy = (l + 16) / 116;
+  const fx = a / 500 + fy;
+  const fz = fy - b / 200;
+  const xNormalized = labInvf(fx);
+  const yNormalized = labInvf(fy);
+  const zNormalized = labInvf(fz);
+  const x = xNormalized * whitePoint[0];
+  const y = yNormalized * whitePoint[1];
+  const z = zNormalized * whitePoint[2];
+  return argbFromXyz(x, y, z);
+}
+function labFromArgb(argb) {
+  const linearR = linearized(redFromArgb(argb));
+  const linearG = linearized(greenFromArgb(argb));
+  const linearB = linearized(blueFromArgb(argb));
+  const matrix = SRGB_TO_XYZ;
+  const x = matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;
+  const y = matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;
+  const z = matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;
+  const whitePoint = WHITE_POINT_D65;
+  const xNormalized = x / whitePoint[0];
+  const yNormalized = y / whitePoint[1];
+  const zNormalized = z / whitePoint[2];
+  const fx = labF(xNormalized);
+  const fy = labF(yNormalized);
+  const fz = labF(zNormalized);
+  const l = 116 * fy - 16;
+  const a = 500 * (fx - fy);
+  const b = 200 * (fy - fz);
+  return [l, a, b];
+}
+function argbFromLstar(lstar) {
+  const y = yFromLstar(lstar);
+  const component = delinearized(y);
+  return argbFromRgb(component, component, component);
+}
+function lstarFromArgb(argb) {
+  const y = xyzFromArgb(argb)[1];
+  return 116 * labF(y / 100) - 16;
+}
+function yFromLstar(lstar) {
+  return 100 * labInvf((lstar + 16) / 116);
+}
+function linearized(rgbComponent) {
+  const normalized = rgbComponent / 255;
+  if (normalized <= 0.040449936) {
+    return normalized / 12.92 * 100;
+  } else {
+    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100;
+  }
+}
+function delinearized(rgbComponent) {
+  const normalized = rgbComponent / 100;
+  let delinearized2 = 0;
+  if (normalized <= 31308e-7) {
+    delinearized2 = normalized * 12.92;
+  } else {
+    delinearized2 = 1.055 * Math.pow(normalized, 1 / 2.4) - 0.055;
+  }
+  return clampInt(0, 255, Math.round(delinearized2 * 255));
+}
+function whitePointD65() {
+  return WHITE_POINT_D65;
+}
+function labF(t) {
+  const e = 216 / 24389;
+  const kappa = 24389 / 27;
+  if (t > e) {
+    return Math.pow(t, 1 / 3);
+  } else {
+    return (kappa * t + 16) / 116;
+  }
+}
+function labInvf(ft) {
+  const e = 216 / 24389;
+  const kappa = 24389 / 27;
+  const ft3 = ft * ft * ft;
+  if (ft3 > e) {
+    return ft3;
+  } else {
+    return (116 * ft - 16) / kappa;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const _ViewingConditions = class {
+  constructor(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {
+    this.n = n;
+    this.aw = aw;
+    this.nbb = nbb;
+    this.ncb = ncb;
+    this.c = c;
+    this.nc = nc;
+    this.rgbD = rgbD;
+    this.fl = fl;
+    this.fLRoot = fLRoot;
+    this.z = z;
+  }
+  static make(whitePoint = whitePointD65(), adaptingLuminance = 200 / Math.PI * yFromLstar(50) / 100, backgroundLstar = 50, surround = 2, discountingIlluminant = false) {
+    const xyz = whitePoint;
+    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;
+    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;
+    const bW = xyz[0] * -2079e-6 + xyz[1] * 0.048952 + xyz[2] * 0.953127;
+    const f = 0.8 + surround / 10;
+    const c = f >= 0.9 ? lerp(0.59, 0.69, (f - 0.9) * 10) : lerp(0.525, 0.59, (f - 0.8) * 10);
+    let d = discountingIlluminant ? 1 : f * (1 - 1 / 3.6 * Math.exp((-adaptingLuminance - 42) / 92));
+    d = d > 1 ? 1 : d < 0 ? 0 : d;
+    const nc = f;
+    const rgbD = [
+      d * (100 / rW) + 1 - d,
+      d * (100 / gW) + 1 - d,
+      d * (100 / bW) + 1 - d
+    ];
+    const k = 1 / (5 * adaptingLuminance + 1);
+    const k4 = k * k * k * k;
+    const k4F = 1 - k4;
+    const fl = k4 * adaptingLuminance + 0.1 * k4F * k4F * Math.cbrt(5 * adaptingLuminance);
+    const n = yFromLstar(backgroundLstar) / whitePoint[1];
+    const z = 1.48 + Math.sqrt(n);
+    const nbb = 0.725 / Math.pow(n, 0.2);
+    const ncb = nbb;
+    const rgbAFactors = [
+      Math.pow(fl * rgbD[0] * rW / 100, 0.42),
+      Math.pow(fl * rgbD[1] * gW / 100, 0.42),
+      Math.pow(fl * rgbD[2] * bW / 100, 0.42)
+    ];
+    const rgbA = [
+      400 * rgbAFactors[0] / (rgbAFactors[0] + 27.13),
+      400 * rgbAFactors[1] / (rgbAFactors[1] + 27.13),
+      400 * rgbAFactors[2] / (rgbAFactors[2] + 27.13)
+    ];
+    const aw = (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;
+    return new _ViewingConditions(
+      n,
+      aw,
+      nbb,
+      ncb,
+      c,
+      nc,
+      rgbD,
+      fl,
+      Math.pow(fl, 0.25),
+      z
+    );
+  }
+};
+let ViewingConditions = _ViewingConditions;
+ViewingConditions.DEFAULT = _ViewingConditions.make();
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Cam16 {
+  constructor(hue, chroma, j, q, m, s, jstar, astar, bstar) {
+    this.hue = hue;
+    this.chroma = chroma;
+    this.j = j;
+    this.q = q;
+    this.m = m;
+    this.s = s;
+    this.jstar = jstar;
+    this.astar = astar;
+    this.bstar = bstar;
+  }
+  distance(other) {
+    const dJ = this.jstar - other.jstar;
+    const dA = this.astar - other.astar;
+    const dB = this.bstar - other.bstar;
+    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);
+    const dE = 1.41 * Math.pow(dEPrime, 0.63);
+    return dE;
+  }
+  static fromInt(argb) {
+    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);
+  }
+  static fromIntInViewingConditions(argb, viewingConditions) {
+    const red = (argb & 16711680) >> 16;
+    const green = (argb & 65280) >> 8;
+    const blue = argb & 255;
+    const redL = linearized(red);
+    const greenL = linearized(green);
+    const blueL = linearized(blue);
+    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;
+    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;
+    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;
+    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;
+    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;
+    const bC = -2079e-6 * x + 0.048952 * y + 0.953127 * z;
+    const rD = viewingConditions.rgbD[0] * rC;
+    const gD = viewingConditions.rgbD[1] * gC;
+    const bD = viewingConditions.rgbD[2] * bC;
+    const rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100, 0.42);
+    const gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100, 0.42);
+    const bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100, 0.42);
+    const rA = signum(rD) * 400 * rAF / (rAF + 27.13);
+    const gA = signum(gD) * 400 * gAF / (gAF + 27.13);
+    const bA = signum(bD) * 400 * bAF / (bAF + 27.13);
+    const a = (11 * rA + -12 * gA + bA) / 11;
+    const b = (rA + gA - 2 * bA) / 9;
+    const u = (20 * rA + 20 * gA + 21 * bA) / 20;
+    const p2 = (40 * rA + 20 * gA + bA) / 20;
+    const atan2 = Math.atan2(b, a);
+    const atanDegrees = atan2 * 180 / Math.PI;
+    const hue = atanDegrees < 0 ? atanDegrees + 360 : atanDegrees >= 360 ? atanDegrees - 360 : atanDegrees;
+    const hueRadians = hue * Math.PI / 180;
+    const ac = p2 * viewingConditions.nbb;
+    const j = 100 * Math.pow(
+      ac / viewingConditions.aw,
+      viewingConditions.c * viewingConditions.z
+    );
+    const q = 4 / viewingConditions.c * Math.sqrt(j / 100) * (viewingConditions.aw + 4) * viewingConditions.fLRoot;
+    const huePrime = hue < 20.14 ? hue + 360 : hue;
+    const eHue = 0.25 * (Math.cos(huePrime * Math.PI / 180 + 2) + 3.8);
+    const p1 = 5e4 / 13 * eHue * viewingConditions.nc * viewingConditions.ncb;
+    const t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);
+    const alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
+    const c = alpha * Math.sqrt(j / 100);
+    const m = c * viewingConditions.fLRoot;
+    const s = 50 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4));
+    const jstar = (1 + 100 * 7e-3) * j / (1 + 7e-3 * j);
+    const mstar = 1 / 0.0228 * Math.log(1 + 0.0228 * m);
+    const astar = mstar * Math.cos(hueRadians);
+    const bstar = mstar * Math.sin(hueRadians);
+    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);
+  }
+  static fromJch(j, c, h) {
+    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);
+  }
+  static fromJchInViewingConditions(j, c, h, viewingConditions) {
+    const q = 4 / viewingConditions.c * Math.sqrt(j / 100) * (viewingConditions.aw + 4) * viewingConditions.fLRoot;
+    const m = c * viewingConditions.fLRoot;
+    const alpha = c / Math.sqrt(j / 100);
+    const s = 50 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4));
+    const hueRadians = h * Math.PI / 180;
+    const jstar = (1 + 100 * 7e-3) * j / (1 + 7e-3 * j);
+    const mstar = 1 / 0.0228 * Math.log(1 + 0.0228 * m);
+    const astar = mstar * Math.cos(hueRadians);
+    const bstar = mstar * Math.sin(hueRadians);
+    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);
+  }
+  static fromUcs(jstar, astar, bstar) {
+    return Cam16.fromUcsInViewingConditions(
+      jstar,
+      astar,
+      bstar,
+      ViewingConditions.DEFAULT
+    );
+  }
+  static fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {
+    const a = astar;
+    const b = bstar;
+    const m = Math.sqrt(a * a + b * b);
+    const M = (Math.exp(m * 0.0228) - 1) / 0.0228;
+    const c = M / viewingConditions.fLRoot;
+    let h = Math.atan2(b, a) * (180 / Math.PI);
+    if (h < 0) {
+      h += 360;
+    }
+    const j = jstar / (1 - (jstar - 100) * 7e-3);
+    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);
+  }
+  toInt() {
+    return this.viewed(ViewingConditions.DEFAULT);
+  }
+  viewed(viewingConditions) {
+    const alpha = this.chroma === 0 || this.j === 0 ? 0 : this.chroma / Math.sqrt(this.j / 100);
+    const t = Math.pow(
+      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),
+      1 / 0.9
+    );
+    const hRad = this.hue * Math.PI / 180;
+    const eHue = 0.25 * (Math.cos(hRad + 2) + 3.8);
+    const ac = viewingConditions.aw * Math.pow(
+      this.j / 100,
+      1 / viewingConditions.c / viewingConditions.z
+    );
+    const p1 = eHue * (5e4 / 13) * viewingConditions.nc * viewingConditions.ncb;
+    const p2 = ac / viewingConditions.nbb;
+    const hSin = Math.sin(hRad);
+    const hCos = Math.cos(hRad);
+    const gamma = 23 * (p2 + 0.305) * t / (23 * p1 + 11 * t * hCos + 108 * t * hSin);
+    const a = gamma * hCos;
+    const b = gamma * hSin;
+    const rA = (460 * p2 + 451 * a + 288 * b) / 1403;
+    const gA = (460 * p2 - 891 * a - 261 * b) / 1403;
+    const bA = (460 * p2 - 220 * a - 6300 * b) / 1403;
+    const rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400 - Math.abs(rA)));
+    const rC = signum(rA) * (100 / viewingConditions.fl) * Math.pow(rCBase, 1 / 0.42);
+    const gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400 - Math.abs(gA)));
+    const gC = signum(gA) * (100 / viewingConditions.fl) * Math.pow(gCBase, 1 / 0.42);
+    const bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400 - Math.abs(bA)));
+    const bC = signum(bA) * (100 / viewingConditions.fl) * Math.pow(bCBase, 1 / 0.42);
+    const rF = rC / viewingConditions.rgbD[0];
+    const gF = gC / viewingConditions.rgbD[1];
+    const bF = bC / viewingConditions.rgbD[2];
+    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;
+    const y = 0.38752654 * rF + 0.62144744 * gF - 897398e-8 * bF;
+    const z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;
+    const argb = argbFromXyz(x, y, z);
+    return argb;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const _HctSolver = class {
+  static sanitizeRadians(angle) {
+    return (angle + Math.PI * 8) % (Math.PI * 2);
+  }
+  static trueDelinearized(rgbComponent) {
+    const normalized = rgbComponent / 100;
+    let delinearized = 0;
+    if (normalized <= 31308e-7) {
+      delinearized = normalized * 12.92;
+    } else {
+      delinearized = 1.055 * Math.pow(normalized, 1 / 2.4) - 0.055;
+    }
+    return delinearized * 255;
+  }
+  static chromaticAdaptation(component) {
+    const af = Math.pow(Math.abs(component), 0.42);
+    return signum(component) * 400 * af / (af + 27.13);
+  }
+  static hueOf(linrgb) {
+    const scaledDiscount = matrixMultiply(linrgb, _HctSolver.SCALED_DISCOUNT_FROM_LINRGB);
+    const rA = _HctSolver.chromaticAdaptation(scaledDiscount[0]);
+    const gA = _HctSolver.chromaticAdaptation(scaledDiscount[1]);
+    const bA = _HctSolver.chromaticAdaptation(scaledDiscount[2]);
+    const a = (11 * rA + -12 * gA + bA) / 11;
+    const b = (rA + gA - 2 * bA) / 9;
+    return Math.atan2(b, a);
+  }
+  static areInCyclicOrder(a, b, c) {
+    const deltaAB = _HctSolver.sanitizeRadians(b - a);
+    const deltaAC = _HctSolver.sanitizeRadians(c - a);
+    return deltaAB < deltaAC;
+  }
+  static intercept(source, mid, target) {
+    return (mid - source) / (target - source);
+  }
+  static lerpPoint(source, t, target) {
+    return [
+      source[0] + (target[0] - source[0]) * t,
+      source[1] + (target[1] - source[1]) * t,
+      source[2] + (target[2] - source[2]) * t
+    ];
+  }
+  static setCoordinate(source, coordinate, target, axis) {
+    const t = _HctSolver.intercept(source[axis], coordinate, target[axis]);
+    return _HctSolver.lerpPoint(source, t, target);
+  }
+  static isBounded(x) {
+    return 0 <= x && x <= 100;
+  }
+  static nthVertex(y, n) {
+    const kR = _HctSolver.Y_FROM_LINRGB[0];
+    const kG = _HctSolver.Y_FROM_LINRGB[1];
+    const kB = _HctSolver.Y_FROM_LINRGB[2];
+    const coordA = n % 4 <= 1 ? 0 : 100;
+    const coordB = n % 2 === 0 ? 0 : 100;
+    if (n < 4) {
+      const g = coordA;
+      const b = coordB;
+      const r = (y - g * kG - b * kB) / kR;
+      if (_HctSolver.isBounded(r)) {
+        return [r, g, b];
+      } else {
+        return [-1, -1, -1];
+      }
+    } else if (n < 8) {
+      const b = coordA;
+      const r = coordB;
+      const g = (y - r * kR - b * kB) / kG;
+      if (_HctSolver.isBounded(g)) {
+        return [r, g, b];
+      } else {
+        return [-1, -1, -1];
+      }
+    } else {
+      const r = coordA;
+      const g = coordB;
+      const b = (y - r * kR - g * kG) / kB;
+      if (_HctSolver.isBounded(b)) {
+        return [r, g, b];
+      } else {
+        return [-1, -1, -1];
+      }
+    }
+  }
+  static bisectToSegment(y, targetHue) {
+    let left = [-1, -1, -1];
+    let right = left;
+    let leftHue = 0;
+    let rightHue = 0;
+    let initialized = false;
+    let uncut = true;
+    for (let n = 0; n < 12; n++) {
+      const mid = _HctSolver.nthVertex(y, n);
+      if (mid[0] < 0) {
+        continue;
+      }
+      const midHue = _HctSolver.hueOf(mid);
+      if (!initialized) {
+        left = mid;
+        right = mid;
+        leftHue = midHue;
+        rightHue = midHue;
+        initialized = true;
+        continue;
+      }
+      if (uncut || _HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {
+        uncut = false;
+        if (_HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
+          right = mid;
+          rightHue = midHue;
+        } else {
+          left = mid;
+          leftHue = midHue;
+        }
+      }
+    }
+    return [left, right];
+  }
+  static midpoint(a, b) {
+    return [
+      (a[0] + b[0]) / 2,
+      (a[1] + b[1]) / 2,
+      (a[2] + b[2]) / 2
+    ];
+  }
+  static criticalPlaneBelow(x) {
+    return Math.floor(x - 0.5);
+  }
+  static criticalPlaneAbove(x) {
+    return Math.ceil(x - 0.5);
+  }
+  static bisectToLimit(y, targetHue) {
+    const segment = _HctSolver.bisectToSegment(y, targetHue);
+    let left = segment[0];
+    let leftHue = _HctSolver.hueOf(left);
+    let right = segment[1];
+    for (let axis = 0; axis < 3; axis++) {
+      if (left[axis] !== right[axis]) {
+        let lPlane = -1;
+        let rPlane = 255;
+        if (left[axis] < right[axis]) {
+          lPlane = _HctSolver.criticalPlaneBelow(
+            _HctSolver.trueDelinearized(left[axis])
+          );
+          rPlane = _HctSolver.criticalPlaneAbove(
+            _HctSolver.trueDelinearized(right[axis])
+          );
+        } else {
+          lPlane = _HctSolver.criticalPlaneAbove(
+            _HctSolver.trueDelinearized(left[axis])
+          );
+          rPlane = _HctSolver.criticalPlaneBelow(
+            _HctSolver.trueDelinearized(right[axis])
+          );
+        }
+        for (let i = 0; i < 8; i++) {
+          if (Math.abs(rPlane - lPlane) <= 1) {
+            break;
+          } else {
+            const mPlane = Math.floor((lPlane + rPlane) / 2);
+            const midPlaneCoordinate = _HctSolver.CRITICAL_PLANES[mPlane];
+            const mid = _HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);
+            const midHue = _HctSolver.hueOf(mid);
+            if (_HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {
+              right = mid;
+              rPlane = mPlane;
+            } else {
+              left = mid;
+              leftHue = midHue;
+              lPlane = mPlane;
+            }
+          }
+        }
+      }
+    }
+    return _HctSolver.midpoint(left, right);
+  }
+  static inverseChromaticAdaptation(adapted) {
+    const adaptedAbs = Math.abs(adapted);
+    const base = Math.max(0, 27.13 * adaptedAbs / (400 - adaptedAbs));
+    return signum(adapted) * Math.pow(base, 1 / 0.42);
+  }
+  static findResultByJ(hueRadians, chroma, y) {
+    let j = Math.sqrt(y) * 11;
+    const viewingConditions = ViewingConditions.DEFAULT;
+    const tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);
+    const eHue = 0.25 * (Math.cos(hueRadians + 2) + 3.8);
+    const p1 = eHue * (5e4 / 13) * viewingConditions.nc * viewingConditions.ncb;
+    const hSin = Math.sin(hueRadians);
+    const hCos = Math.cos(hueRadians);
+    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {
+      const jNormalized = j / 100;
+      const alpha = chroma === 0 || j === 0 ? 0 : chroma / Math.sqrt(jNormalized);
+      const t = Math.pow(alpha * tInnerCoeff, 1 / 0.9);
+      const ac = viewingConditions.aw * Math.pow(
+        jNormalized,
+        1 / viewingConditions.c / viewingConditions.z
+      );
+      const p2 = ac / viewingConditions.nbb;
+      const gamma = 23 * (p2 + 0.305) * t / (23 * p1 + 11 * t * hCos + 108 * t * hSin);
+      const a = gamma * hCos;
+      const b = gamma * hSin;
+      const rA = (460 * p2 + 451 * a + 288 * b) / 1403;
+      const gA = (460 * p2 - 891 * a - 261 * b) / 1403;
+      const bA = (460 * p2 - 220 * a - 6300 * b) / 1403;
+      const rCScaled = _HctSolver.inverseChromaticAdaptation(rA);
+      const gCScaled = _HctSolver.inverseChromaticAdaptation(gA);
+      const bCScaled = _HctSolver.inverseChromaticAdaptation(bA);
+      const linrgb = matrixMultiply(
+        [rCScaled, gCScaled, bCScaled],
+        _HctSolver.LINRGB_FROM_SCALED_DISCOUNT
+      );
+      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {
+        return 0;
+      }
+      const kR = _HctSolver.Y_FROM_LINRGB[0];
+      const kG = _HctSolver.Y_FROM_LINRGB[1];
+      const kB = _HctSolver.Y_FROM_LINRGB[2];
+      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];
+      if (fnj <= 0) {
+        return 0;
+      }
+      if (iterationRound === 4 || Math.abs(fnj - y) < 2e-3) {
+        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {
+          return 0;
+        }
+        return argbFromLinrgb(linrgb);
+      }
+      j = j - (fnj - y) * j / (2 * fnj);
+    }
+    return 0;
+  }
+  static solveToInt(hueDegrees, chroma, lstar) {
+    if (chroma < 1e-4 || lstar < 1e-4 || lstar > 99.9999) {
+      return argbFromLstar(lstar);
+    }
+    hueDegrees = sanitizeDegreesDouble(hueDegrees);
+    const hueRadians = hueDegrees / 180 * Math.PI;
+    const y = yFromLstar(lstar);
+    const exactAnswer = _HctSolver.findResultByJ(hueRadians, chroma, y);
+    if (exactAnswer !== 0) {
+      return exactAnswer;
+    }
+    const linrgb = _HctSolver.bisectToLimit(y, hueRadians);
+    return argbFromLinrgb(linrgb);
+  }
+  static solveToCam(hueDegrees, chroma, lstar) {
+    return Cam16.fromInt(_HctSolver.solveToInt(hueDegrees, chroma, lstar));
+  }
+};
+let HctSolver = _HctSolver;
+HctSolver.SCALED_DISCOUNT_FROM_LINRGB = [
+  [
+    0.001200833568784504,
+    0.002389694492170889,
+    2795742885861124e-19
+  ],
+  [
+    5891086651375999e-19,
+    0.0029785502573438758,
+    3270666104008398e-19
+  ],
+  [
+    10146692491640572e-20,
+    5364214359186694e-19,
+    0.0032979401770712076
+  ]
+];
+HctSolver.LINRGB_FROM_SCALED_DISCOUNT = [
+  [
+    1373.2198709594231,
+    -1100.4251190754821,
+    -7.278681089101213
+  ],
+  [
+    -271.815969077903,
+    559.6580465940733,
+    -32.46047482791194
+  ],
+  [
+    1.9622899599665666,
+    -57.173814538844006,
+    308.7233197812385
+  ]
+];
+HctSolver.Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];
+HctSolver.CRITICAL_PLANES = [
+  0.015176349177441876,
+  0.045529047532325624,
+  0.07588174588720938,
+  0.10623444424209313,
+  0.13658714259697685,
+  0.16693984095186062,
+  0.19729253930674434,
+  0.2276452376616281,
+  0.2579979360165119,
+  0.28835063437139563,
+  0.3188300904430532,
+  0.350925934958123,
+  0.3848314933096426,
+  0.42057480301049466,
+  0.458183274052838,
+  0.4976837250274023,
+  0.5391024159806381,
+  0.5824650784040898,
+  0.6277969426914107,
+  0.6751227633498623,
+  0.7244668422128921,
+  0.775853049866786,
+  0.829304845476233,
+  0.8848452951698498,
+  0.942497089126609,
+  1.0022825574869039,
+  1.0642236851973577,
+  1.1283421258858297,
+  1.1946592148522128,
+  1.2631959812511864,
+  1.3339731595349034,
+  1.407011200216447,
+  1.4823302800086415,
+  1.5599503113873272,
+  1.6398909516233677,
+  1.7221716113234105,
+  1.8068114625156377,
+  1.8938294463134073,
+  1.9832442801866852,
+  2.075074464868551,
+  2.1693382909216234,
+  2.2660538449872063,
+  2.36523901573795,
+  2.4669114995532007,
+  2.5710888059345764,
+  2.6777882626779785,
+  2.7870270208169257,
+  2.898822059350997,
+  3.0131901897720907,
+  3.1301480604002863,
+  3.2497121605402226,
+  3.3718988244681087,
+  3.4967242352587946,
+  3.624204428461639,
+  3.754355295633311,
+  3.887192587735158,
+  4.022731918402185,
+  4.160988767090289,
+  4.301978482107941,
+  4.445716283538092,
+  4.592217266055746,
+  4.741496401646282,
+  4.893568542229298,
+  5.048448422192488,
+  5.20615066083972,
+  5.3666897647573375,
+  5.5300801301023865,
+  5.696336044816294,
+  5.865471690767354,
+  6.037501145825082,
+  6.212438385869475,
+  6.390297286737924,
+  6.571091626112461,
+  6.7548350853498045,
+  6.941541251256611,
+  7.131223617812143,
+  7.323895587840543,
+  7.5195704746346665,
+  7.7182615035334345,
+  7.919981813454504,
+  8.124744458384042,
+  8.332562408825165,
+  8.543448553206703,
+  8.757415699253682,
+  8.974476575321063,
+  9.194643831691977,
+  9.417930041841839,
+  9.644347703669503,
+  9.873909240696694,
+  10.106627003236781,
+  10.342513269534024,
+  10.58158024687427,
+  10.8238400726681,
+  11.069304815507364,
+  11.317986476196008,
+  11.569896988756009,
+  11.825048221409341,
+  12.083451977536606,
+  12.345119996613247,
+  12.610063955123938,
+  12.878295467455942,
+  13.149826086772048,
+  13.42466730586372,
+  13.702830557985108,
+  13.984327217668513,
+  14.269168601521828,
+  14.55736596900856,
+  14.848930523210871,
+  15.143873411576273,
+  15.44220572664832,
+  15.743938506781891,
+  16.04908273684337,
+  16.35764934889634,
+  16.66964922287304,
+  16.985093187232053,
+  17.30399201960269,
+  17.62635644741625,
+  17.95219714852476,
+  18.281524751807332,
+  18.614349837764564,
+  18.95068293910138,
+  19.290534541298456,
+  19.633915083172692,
+  19.98083495742689,
+  20.331304511189067,
+  20.685334046541502,
+  21.042933821039977,
+  21.404114048223256,
+  21.76888489811322,
+  22.137256497705877,
+  22.50923893145328,
+  22.884842241736916,
+  23.264076429332462,
+  23.6469514538663,
+  24.033477234264016,
+  24.42366364919083,
+  24.817520537484558,
+  25.21505769858089,
+  25.61628489293138,
+  26.021211842414342,
+  26.429848230738664,
+  26.842203703840827,
+  27.258287870275353,
+  27.678110301598522,
+  28.10168053274597,
+  28.529008062403893,
+  28.96010235337422,
+  29.39497283293396,
+  29.83362889318845,
+  30.276079891419332,
+  30.722335150426627,
+  31.172403958865512,
+  31.62629557157785,
+  32.08401920991837,
+  32.54558406207592,
+  33.010999283389665,
+  33.4802739966603,
+  33.953417292456834,
+  34.430438229418264,
+  34.911345834551085,
+  35.39614910352207,
+  35.88485700094671,
+  36.37747846067349,
+  36.87402238606382,
+  37.37449765026789,
+  37.87891309649659,
+  38.38727753828926,
+  38.89959975977785,
+  39.41588851594697,
+  39.93615253289054,
+  40.460400508064545,
+  40.98864111053629,
+  41.520882981230194,
+  42.05713473317016,
+  42.597404951718396,
+  43.141702194811224,
+  43.6900349931913,
+  44.24241185063697,
+  44.798841244188324,
+  45.35933162437017,
+  45.92389141541209,
+  46.49252901546552,
+  47.065252796817916,
+  47.64207110610409,
+  48.22299226451468,
+  48.808024568002054,
+  49.3971762874833,
+  49.9904556690408,
+  50.587870934119984,
+  51.189430279724725,
+  51.79514187861014,
+  52.40501387947288,
+  53.0190544071392,
+  53.637271562750364,
+  54.259673423945976,
+  54.88626804504493,
+  55.517063457223934,
+  56.15206766869424,
+  56.79128866487574,
+  57.43473440856916,
+  58.08241284012621,
+  58.734331877617365,
+  59.39049941699807,
+  60.05092333227251,
+  60.715611475655585,
+  61.38457167773311,
+  62.057811747619894,
+  62.7353394731159,
+  63.417162620860914,
+  64.10328893648692,
+  64.79372614476921,
+  65.48848194977529,
+  66.18756403501224,
+  66.89098006357258,
+  67.59873767827808,
+  68.31084450182222,
+  69.02730813691093,
+  69.74813616640164,
+  70.47333615344107,
+  71.20291564160104,
+  71.93688215501312,
+  72.67524319850172,
+  73.41800625771542,
+  74.16517879925733,
+  74.9167682708136,
+  75.67278210128072,
+  76.43322770089146,
+  77.1981124613393,
+  77.96744375590167,
+  78.74122893956174,
+  79.51947534912904,
+  80.30219030335869,
+  81.08938110306934,
+  81.88105503125999,
+  82.67721935322541,
+  83.4778813166706,
+  84.28304815182372,
+  85.09272707154808,
+  85.90692527145302,
+  86.72564993000343,
+  87.54890820862819,
+  88.3767072518277,
+  89.2090541872801,
+  90.04595612594655,
+  90.88742016217518,
+  91.73345337380438,
+  92.58406282226491,
+  93.43925555268066,
+  94.29903859396902,
+  95.16341895893969,
+  96.03240364439274,
+  96.9059996312159,
+  97.78421388448044,
+  98.6670533535366,
+  99.55452497210776
+];
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Hct {
+  constructor(argb) {
+    this.argb = argb;
+    const cam = Cam16.fromInt(argb);
+    this.internalHue = cam.hue;
+    this.internalChroma = cam.chroma;
+    this.internalTone = lstarFromArgb(argb);
+    this.argb = argb;
+  }
+  static from(hue, chroma, tone) {
+    return new Hct(HctSolver.solveToInt(hue, chroma, tone));
+  }
+  static fromInt(argb) {
+    return new Hct(argb);
+  }
+  toInt() {
+    return this.argb;
+  }
+  get hue() {
+    return this.internalHue;
+  }
+  set hue(newHue) {
+    this.setInternalState(
+      HctSolver.solveToInt(
+        newHue,
+        this.internalChroma,
+        this.internalTone
+      )
+    );
+  }
+  get chroma() {
+    return this.internalChroma;
+  }
+  set chroma(newChroma) {
+    this.setInternalState(
+      HctSolver.solveToInt(
+        this.internalHue,
+        newChroma,
+        this.internalTone
+      )
+    );
+  }
+  get tone() {
+    return this.internalTone;
+  }
+  set tone(newTone) {
+    this.setInternalState(
+      HctSolver.solveToInt(
+        this.internalHue,
+        this.internalChroma,
+        newTone
+      )
+    );
+  }
+  setInternalState(argb) {
+    const cam = Cam16.fromInt(argb);
+    this.internalHue = cam.hue;
+    this.internalChroma = cam.chroma;
+    this.internalTone = lstarFromArgb(argb);
+    this.argb = argb;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Blend {
+  static harmonize(designColor, sourceColor) {
+    const fromHct = Hct.fromInt(designColor);
+    const toHct = Hct.fromInt(sourceColor);
+    const differenceDegrees$1 = differenceDegrees(fromHct.hue, toHct.hue);
+    const rotationDegrees = Math.min(differenceDegrees$1 * 0.5, 15);
+    const outputHue = sanitizeDegreesDouble(
+      fromHct.hue + rotationDegrees * rotationDirection(fromHct.hue, toHct.hue)
+    );
+    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();
+  }
+  static hctHue(from, to, amount) {
+    const ucs = Blend.cam16Ucs(from, to, amount);
+    const ucsCam = Cam16.fromInt(ucs);
+    const fromCam = Cam16.fromInt(from);
+    const blended = Hct.from(
+      ucsCam.hue,
+      fromCam.chroma,
+      lstarFromArgb(from)
+    );
+    return blended.toInt();
+  }
+  static cam16Ucs(from, to, amount) {
+    const fromCam = Cam16.fromInt(from);
+    const toCam = Cam16.fromInt(to);
+    const fromJ = fromCam.jstar;
+    const fromA = fromCam.astar;
+    const fromB = fromCam.bstar;
+    const toJ = toCam.jstar;
+    const toA = toCam.astar;
+    const toB = toCam.bstar;
+    const jstar = fromJ + (toJ - fromJ) * amount;
+    const astar = fromA + (toA - fromA) * amount;
+    const bstar = fromB + (toB - fromB) * amount;
+    return Cam16.fromUcs(jstar, astar, bstar).toInt();
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class TonalPalette {
+  constructor(hue, chroma) {
+    this.hue = hue;
+    this.chroma = chroma;
+    this.cache = /* @__PURE__ */ new Map();
+  }
+  static fromInt(argb) {
+    const hct = Hct.fromInt(argb);
+    return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);
+  }
+  static fromHueAndChroma(hue, chroma) {
+    return new TonalPalette(hue, chroma);
+  }
+  tone(tone) {
+    let argb = this.cache.get(tone);
+    if (argb === void 0) {
+      argb = Hct.from(this.hue, this.chroma, tone).toInt();
+      this.cache.set(tone, argb);
+    }
+    return argb;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class CorePalette {
+  static of(argb) {
+    return new CorePalette(argb, false);
+  }
+  static contentOf(argb) {
+    return new CorePalette(argb, true);
+  }
+  constructor(argb, isContent) {
+    const hct = Hct.fromInt(argb);
+    const hue = hct.hue;
+    const chroma = hct.chroma;
+    if (isContent) {
+      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);
+      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);
+      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);
+      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));
+      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));
+    } else {
+      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));
+      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);
+      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);
+      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);
+      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);
+    }
+    this.error = TonalPalette.fromHueAndChroma(25, 84);
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class LabPointProvider {
+  fromInt(argb) {
+    return labFromArgb(argb);
+  }
+  toInt(point) {
+    return argbFromLab(point[0], point[1], point[2]);
+  }
+  distance(from, to) {
+    const dL = from[0] - to[0];
+    const dA = from[1] - to[1];
+    const dB = from[2] - to[2];
+    return dL * dL + dA * dA + dB * dB;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const MAX_ITERATIONS = 10;
+const MIN_MOVEMENT_DISTANCE = 3;
+class QuantizerWsmeans {
+  static quantize(inputPixels, startingClusters, maxColors) {
+    const pixelToCount = /* @__PURE__ */ new Map();
+    const points = new Array();
+    const pixels = new Array();
+    const pointProvider = new LabPointProvider();
+    let pointCount = 0;
+    for (let i = 0; i < inputPixels.length; i++) {
+      const inputPixel = inputPixels[i];
+      const pixelCount = pixelToCount.get(inputPixel);
+      if (pixelCount === void 0) {
+        pointCount++;
+        points.push(pointProvider.fromInt(inputPixel));
+        pixels.push(inputPixel);
+        pixelToCount.set(inputPixel, 1);
+      } else {
+        pixelToCount.set(inputPixel, pixelCount + 1);
+      }
+    }
+    const counts = new Array();
+    for (let i = 0; i < pointCount; i++) {
+      const pixel = pixels[i];
+      const count = pixelToCount.get(pixel);
+      if (count !== void 0) {
+        counts[i] = count;
+      }
+    }
+    let clusterCount = Math.min(maxColors, pointCount);
+    if (startingClusters.length > 0) {
+      clusterCount = Math.min(clusterCount, startingClusters.length);
+    }
+    const clusters = new Array();
+    for (let i = 0; i < startingClusters.length; i++) {
+      clusters.push(pointProvider.fromInt(startingClusters[i]));
+    }
+    const additionalClustersNeeded = clusterCount - clusters.length;
+    if (startingClusters.length === 0 && additionalClustersNeeded > 0) {
+      for (let i = 0; i < additionalClustersNeeded; i++) {
+        const l = Math.random() * 100;
+        const a = Math.random() * (100 - -100 + 1) + -100;
+        const b = Math.random() * (100 - -100 + 1) + -100;
+        clusters.push(new Array(l, a, b));
+      }
+    }
+    const clusterIndices = new Array();
+    for (let i = 0; i < pointCount; i++) {
+      clusterIndices.push(Math.floor(Math.random() * clusterCount));
+    }
+    const indexMatrix = new Array();
+    for (let i = 0; i < clusterCount; i++) {
+      indexMatrix.push(new Array());
+      for (let j = 0; j < clusterCount; j++) {
+        indexMatrix[i].push(0);
+      }
+    }
+    const distanceToIndexMatrix = new Array();
+    for (let i = 0; i < clusterCount; i++) {
+      distanceToIndexMatrix.push(new Array());
+      for (let j = 0; j < clusterCount; j++) {
+        distanceToIndexMatrix[i].push(new DistanceAndIndex());
+      }
+    }
+    const pixelCountSums = new Array();
+    for (let i = 0; i < clusterCount; i++) {
+      pixelCountSums.push(0);
+    }
+    for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {
+      for (let i = 0; i < clusterCount; i++) {
+        for (let j = i + 1; j < clusterCount; j++) {
+          const distance = pointProvider.distance(clusters[i], clusters[j]);
+          distanceToIndexMatrix[j][i].distance = distance;
+          distanceToIndexMatrix[j][i].index = i;
+          distanceToIndexMatrix[i][j].distance = distance;
+          distanceToIndexMatrix[i][j].index = j;
+        }
+        distanceToIndexMatrix[i].sort();
+        for (let j = 0; j < clusterCount; j++) {
+          indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;
+        }
+      }
+      let pointsMoved = 0;
+      for (let i = 0; i < pointCount; i++) {
+        const point = points[i];
+        const previousClusterIndex = clusterIndices[i];
+        const previousCluster = clusters[previousClusterIndex];
+        const previousDistance = pointProvider.distance(point, previousCluster);
+        let minimumDistance = previousDistance;
+        let newClusterIndex = -1;
+        for (let j = 0; j < clusterCount; j++) {
+          if (distanceToIndexMatrix[previousClusterIndex][j].distance >= 4 * previousDistance) {
+            continue;
+          }
+          const distance = pointProvider.distance(point, clusters[j]);
+          if (distance < minimumDistance) {
+            minimumDistance = distance;
+            newClusterIndex = j;
+          }
+        }
+        if (newClusterIndex !== -1) {
+          const distanceChange = Math.abs(
+            Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)
+          );
+          if (distanceChange > MIN_MOVEMENT_DISTANCE) {
+            pointsMoved++;
+            clusterIndices[i] = newClusterIndex;
+          }
+        }
+      }
+      if (pointsMoved === 0 && iteration !== 0) {
+        break;
+      }
+      const componentASums = new Array(clusterCount).fill(0);
+      const componentBSums = new Array(clusterCount).fill(0);
+      const componentCSums = new Array(clusterCount).fill(0);
+      for (let i = 0; i < clusterCount; i++) {
+        pixelCountSums[i] = 0;
+      }
+      for (let i = 0; i < pointCount; i++) {
+        const clusterIndex = clusterIndices[i];
+        const point = points[i];
+        const count = counts[i];
+        pixelCountSums[clusterIndex] += count;
+        componentASums[clusterIndex] += point[0] * count;
+        componentBSums[clusterIndex] += point[1] * count;
+        componentCSums[clusterIndex] += point[2] * count;
+      }
+      for (let i = 0; i < clusterCount; i++) {
+        const count = pixelCountSums[i];
+        if (count === 0) {
+          clusters[i] = [0, 0, 0];
+          continue;
+        }
+        const a = componentASums[i] / count;
+        const b = componentBSums[i] / count;
+        const c = componentCSums[i] / count;
+        clusters[i] = [a, b, c];
+      }
+    }
+    const argbToPopulation = /* @__PURE__ */ new Map();
+    for (let i = 0; i < clusterCount; i++) {
+      const count = pixelCountSums[i];
+      if (count === 0) {
+        continue;
+      }
+      const possibleNewCluster = pointProvider.toInt(clusters[i]);
+      if (argbToPopulation.has(possibleNewCluster)) {
+        continue;
+      }
+      argbToPopulation.set(possibleNewCluster, count);
+    }
+    return argbToPopulation;
+  }
+}
+class DistanceAndIndex {
+  constructor() {
+    this.distance = -1;
+    this.index = -1;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class QuantizerMap {
+  static quantize(pixels) {
+    const countByColor = /* @__PURE__ */ new Map();
+    for (let i = 0; i < pixels.length; i++) {
+      const pixel = pixels[i];
+      const alpha = alphaFromArgb(pixel);
+      if (alpha < 255) {
+        continue;
+      }
+      countByColor.set(pixel, ((countByColor.get(pixel) !== null && countByColor.get(pixel) !== undefined) ? countByColor.get(pixel) : 0) + 1);
+    }
+    return countByColor;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const INDEX_BITS = 5;
+const SIDE_LENGTH = 33;
+const TOTAL_SIZE = 35937;
+const directions = {
+  RED: "red",
+  GREEN: "green",
+  BLUE: "blue"
+};
+class QuantizerWu {
+  constructor(weights = [], momentsR = [], momentsG = [], momentsB = [], moments = [], cubes = []) {
+    this.weights = weights;
+    this.momentsR = momentsR;
+    this.momentsG = momentsG;
+    this.momentsB = momentsB;
+    this.moments = moments;
+    this.cubes = cubes;
+  }
+  quantize(pixels, maxColors) {
+    this.constructHistogram(pixels);
+    this.computeMoments();
+    const createBoxesResult = this.createBoxes(maxColors);
+    const results = this.createResult(createBoxesResult.resultCount);
+    return results;
+  }
+  constructHistogram(pixels) {
+    this.weights = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.momentsR = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.momentsG = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.momentsB = Array.from({ length: TOTAL_SIZE }).fill(0);
+    this.moments = Array.from({ length: TOTAL_SIZE }).fill(0);
+    const countByColor = QuantizerMap.quantize(pixels);
+    for (const [pixel, count] of countByColor.entries()) {
+      const red = redFromArgb(pixel);
+      const green = greenFromArgb(pixel);
+      const blue = blueFromArgb(pixel);
+      const bitsToRemove = 8 - INDEX_BITS;
+      const iR = (red >> bitsToRemove) + 1;
+      const iG = (green >> bitsToRemove) + 1;
+      const iB = (blue >> bitsToRemove) + 1;
+      const index = this.getIndex(iR, iG, iB);
+      this.weights[index] = ((this.weights[index] !== null && this.weights[index] !== undefined) ? this.weights[index] : 0) + count;
+      this.momentsR[index] += count * red;
+      this.momentsG[index] += count * green;
+      this.momentsB[index] += count * blue;
+      this.moments[index] += count * (red * red + green * green + blue * blue);
+    }
+  }
+  computeMoments() {
+    for (let r = 1; r < SIDE_LENGTH; r++) {
+      const area = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const areaR = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const areaG = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const areaB = Array.from({ length: SIDE_LENGTH }).fill(0);
+      const area2 = Array.from({ length: SIDE_LENGTH }).fill(0);
+      for (let g = 1; g < SIDE_LENGTH; g++) {
+        let line = 0;
+        let lineR = 0;
+        let lineG = 0;
+        let lineB = 0;
+        let line2 = 0;
+        for (let b = 1; b < SIDE_LENGTH; b++) {
+          const index = this.getIndex(r, g, b);
+          line += this.weights[index];
+          lineR += this.momentsR[index];
+          lineG += this.momentsG[index];
+          lineB += this.momentsB[index];
+          line2 += this.moments[index];
+          area[b] += line;
+          areaR[b] += lineR;
+          areaG[b] += lineG;
+          areaB[b] += lineB;
+          area2[b] += line2;
+          const previousIndex = this.getIndex(r - 1, g, b);
+          this.weights[index] = this.weights[previousIndex] + area[b];
+          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];
+          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];
+          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];
+          this.moments[index] = this.moments[previousIndex] + area2[b];
+        }
+      }
+    }
+  }
+  createBoxes(maxColors) {
+    this.cubes = Array.from({ length: maxColors }).fill(0).map(() => new Box());
+    const volumeVariance = Array.from({ length: maxColors }).fill(0);
+    this.cubes[0].r0 = 0;
+    this.cubes[0].g0 = 0;
+    this.cubes[0].b0 = 0;
+    this.cubes[0].r1 = SIDE_LENGTH - 1;
+    this.cubes[0].g1 = SIDE_LENGTH - 1;
+    this.cubes[0].b1 = SIDE_LENGTH - 1;
+    let generatedColorCount = maxColors;
+    let next = 0;
+    for (let i = 1; i < maxColors; i++) {
+      if (this.cut(this.cubes[next], this.cubes[i])) {
+        volumeVariance[next] = this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0;
+        volumeVariance[i] = this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0;
+      } else {
+        volumeVariance[next] = 0;
+        i--;
+      }
+      next = 0;
+      let temp = volumeVariance[0];
+      for (let j = 1; j <= i; j++) {
+        if (volumeVariance[j] > temp) {
+          temp = volumeVariance[j];
+          next = j;
+        }
+      }
+      if (temp <= 0) {
+        generatedColorCount = i + 1;
+        break;
+      }
+    }
+    return new CreateBoxesResult(maxColors, generatedColorCount);
+  }
+  createResult(colorCount) {
+    const colors = [];
+    for (let i = 0; i < colorCount; ++i) {
+      const cube = this.cubes[i];
+      const weight = this.volume(cube, this.weights);
+      if (weight > 0) {
+        const r = Math.round(this.volume(cube, this.momentsR) / weight);
+        const g = Math.round(this.volume(cube, this.momentsG) / weight);
+        const b = Math.round(this.volume(cube, this.momentsB) / weight);
+        const color = 255 << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
+        colors.push(color);
+      }
+    }
+    return colors;
+  }
+  variance(cube) {
+    const dr = this.volume(cube, this.momentsR);
+    const dg = this.volume(cube, this.momentsG);
+    const db = this.volume(cube, this.momentsB);
+    const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] - this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] - this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] + this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] - this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] + this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] + this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] - this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];
+    const hypotenuse = dr * dr + dg * dg + db * db;
+    const volume = this.volume(cube, this.weights);
+    return xx - hypotenuse / volume;
+  }
+  cut(one, two) {
+    const wholeR = this.volume(one, this.momentsR);
+    const wholeG = this.volume(one, this.momentsG);
+    const wholeB = this.volume(one, this.momentsB);
+    const wholeW = this.volume(one, this.weights);
+    const maxRResult = this.maximize(
+      one,
+      directions.RED,
+      one.r0 + 1,
+      one.r1,
+      wholeR,
+      wholeG,
+      wholeB,
+      wholeW
+    );
+    const maxGResult = this.maximize(
+      one,
+      directions.GREEN,
+      one.g0 + 1,
+      one.g1,
+      wholeR,
+      wholeG,
+      wholeB,
+      wholeW
+    );
+    const maxBResult = this.maximize(
+      one,
+      directions.BLUE,
+      one.b0 + 1,
+      one.b1,
+      wholeR,
+      wholeG,
+      wholeB,
+      wholeW
+    );
+    let direction;
+    const maxR = maxRResult.maximum;
+    const maxG = maxGResult.maximum;
+    const maxB = maxBResult.maximum;
+    if (maxR >= maxG && maxR >= maxB) {
+      if (maxRResult.cutLocation < 0) {
+        return false;
+      }
+      direction = directions.RED;
+    } else if (maxG >= maxR && maxG >= maxB) {
+      direction = directions.GREEN;
+    } else {
+      direction = directions.BLUE;
+    }
+    two.r1 = one.r1;
+    two.g1 = one.g1;
+    two.b1 = one.b1;
+    switch (direction) {
+      case directions.RED:
+        one.r1 = maxRResult.cutLocation;
+        two.r0 = one.r1;
+        two.g0 = one.g0;
+        two.b0 = one.b0;
+        break;
+      case directions.GREEN:
+        one.g1 = maxGResult.cutLocation;
+        two.r0 = one.r0;
+        two.g0 = one.g1;
+        two.b0 = one.b0;
+        break;
+      case directions.BLUE:
+        one.b1 = maxBResult.cutLocation;
+        two.r0 = one.r0;
+        two.g0 = one.g0;
+        two.b0 = one.b1;
+        break;
+      default:
+        throw new Error("unexpected direction " + direction);
+    }
+    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);
+    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);
+    return true;
+  }
+  maximize(cube, direction, first, last, wholeR, wholeG, wholeB, wholeW) {
+    const bottomR = this.bottom(cube, direction, this.momentsR);
+    const bottomG = this.bottom(cube, direction, this.momentsG);
+    const bottomB = this.bottom(cube, direction, this.momentsB);
+    const bottomW = this.bottom(cube, direction, this.weights);
+    let max = 0;
+    let cut = -1;
+    let halfR = 0;
+    let halfG = 0;
+    let halfB = 0;
+    let halfW = 0;
+    for (let i = first; i < last; i++) {
+      halfR = bottomR + this.top(cube, direction, i, this.momentsR);
+      halfG = bottomG + this.top(cube, direction, i, this.momentsG);
+      halfB = bottomB + this.top(cube, direction, i, this.momentsB);
+      halfW = bottomW + this.top(cube, direction, i, this.weights);
+      if (halfW === 0) {
+        continue;
+      }
+      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1;
+      let tempDenominator = halfW * 1;
+      let temp = tempNumerator / tempDenominator;
+      halfR = wholeR - halfR;
+      halfG = wholeG - halfG;
+      halfB = wholeB - halfB;
+      halfW = wholeW - halfW;
+      if (halfW === 0) {
+        continue;
+      }
+      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1;
+      tempDenominator = halfW * 1;
+      temp += tempNumerator / tempDenominator;
+      if (temp > max) {
+        max = temp;
+        cut = i;
+      }
+    }
+    return new MaximizeResult(cut, max);
+  }
+  volume(cube, moment) {
+    return moment[this.getIndex(cube.r1, cube.g1, cube.b1)] - moment[this.getIndex(cube.r1, cube.g1, cube.b0)] - moment[this.getIndex(cube.r1, cube.g0, cube.b1)] + moment[this.getIndex(cube.r1, cube.g0, cube.b0)] - moment[this.getIndex(cube.r0, cube.g1, cube.b1)] + moment[this.getIndex(cube.r0, cube.g1, cube.b0)] + moment[this.getIndex(cube.r0, cube.g0, cube.b1)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+  }
+  bottom(cube, direction, moment) {
+    switch (direction) {
+      case directions.RED:
+        return -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] + moment[this.getIndex(cube.r0, cube.g1, cube.b0)] + moment[this.getIndex(cube.r0, cube.g0, cube.b1)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+      case directions.GREEN:
+        return -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] + moment[this.getIndex(cube.r1, cube.g0, cube.b0)] + moment[this.getIndex(cube.r0, cube.g0, cube.b1)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+      case directions.BLUE:
+        return -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] + moment[this.getIndex(cube.r1, cube.g0, cube.b0)] + moment[this.getIndex(cube.r0, cube.g1, cube.b0)] - moment[this.getIndex(cube.r0, cube.g0, cube.b0)];
+      default:
+        throw new Error("unexpected direction $direction");
+    }
+  }
+  top(cube, direction, position, moment) {
+    switch (direction) {
+      case directions.RED:
+        return moment[this.getIndex(position, cube.g1, cube.b1)] - moment[this.getIndex(position, cube.g1, cube.b0)] - moment[this.getIndex(position, cube.g0, cube.b1)] + moment[this.getIndex(position, cube.g0, cube.b0)];
+      case directions.GREEN:
+        return moment[this.getIndex(cube.r1, position, cube.b1)] - moment[this.getIndex(cube.r1, position, cube.b0)] - moment[this.getIndex(cube.r0, position, cube.b1)] + moment[this.getIndex(cube.r0, position, cube.b0)];
+      case directions.BLUE:
+        return moment[this.getIndex(cube.r1, cube.g1, position)] - moment[this.getIndex(cube.r1, cube.g0, position)] - moment[this.getIndex(cube.r0, cube.g1, position)] + moment[this.getIndex(cube.r0, cube.g0, position)];
+      default:
+        throw new Error("unexpected direction $direction");
+    }
+  }
+  getIndex(r, g, b) {
+    return (r << INDEX_BITS * 2) + (r << INDEX_BITS + 1) + r + (g << INDEX_BITS) + g + b;
+  }
+}
+class Box {
+  constructor(r0 = 0, r1 = 0, g0 = 0, g1 = 0, b0 = 0, b1 = 0, vol = 0) {
+    this.r0 = r0;
+    this.r1 = r1;
+    this.g0 = g0;
+    this.g1 = g1;
+    this.b0 = b0;
+    this.b1 = b1;
+    this.vol = vol;
+  }
+}
+class CreateBoxesResult {
+  constructor(requestedCount, resultCount) {
+    this.requestedCount = requestedCount;
+    this.resultCount = resultCount;
+  }
+}
+class MaximizeResult {
+  constructor(cutLocation, maximum) {
+    this.cutLocation = cutLocation;
+    this.maximum = maximum;
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class QuantizerCelebi {
+  static quantize(pixels, maxColors) {
+    const wu = new QuantizerWu();
+    const wuResult = wu.quantize(pixels, maxColors);
+    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class Scheme {
+  constructor(props) {
+    this.props = props;
+  }
+  get primary() {
+    return this.props.primary;
+  }
+  get onPrimary() {
+    return this.props.onPrimary;
+  }
+  get primaryContainer() {
+    return this.props.primaryContainer;
+  }
+  get onPrimaryContainer() {
+    return this.props.onPrimaryContainer;
+  }
+  get secondary() {
+    return this.props.secondary;
+  }
+  get onSecondary() {
+    return this.props.onSecondary;
+  }
+  get secondaryContainer() {
+    return this.props.secondaryContainer;
+  }
+  get onSecondaryContainer() {
+    return this.props.onSecondaryContainer;
+  }
+  get tertiary() {
+    return this.props.tertiary;
+  }
+  get onTertiary() {
+    return this.props.onTertiary;
+  }
+  get tertiaryContainer() {
+    return this.props.tertiaryContainer;
+  }
+  get onTertiaryContainer() {
+    return this.props.onTertiaryContainer;
+  }
+  get error() {
+    return this.props.error;
+  }
+  get onError() {
+    return this.props.onError;
+  }
+  get errorContainer() {
+    return this.props.errorContainer;
+  }
+  get onErrorContainer() {
+    return this.props.onErrorContainer;
+  }
+  get background() {
+    return this.props.background;
+  }
+  get onBackground() {
+    return this.props.onBackground;
+  }
+  get surface() {
+    return this.props.surface;
+  }
+  get onSurface() {
+    return this.props.onSurface;
+  }
+  get surfaceVariant() {
+    return this.props.surfaceVariant;
+  }
+  get onSurfaceVariant() {
+    return this.props.onSurfaceVariant;
+  }
+  get outline() {
+    return this.props.outline;
+  }
+  get outlineVariant() {
+    return this.props.outlineVariant;
+  }
+  get shadow() {
+    return this.props.shadow;
+  }
+  get scrim() {
+    return this.props.scrim;
+  }
+  get inverseSurface() {
+    return this.props.inverseSurface;
+  }
+  get inverseOnSurface() {
+    return this.props.inverseOnSurface;
+  }
+  get inversePrimary() {
+    return this.props.inversePrimary;
+  }
+  static light(argb) {
+    return Scheme.lightFromCorePalette(CorePalette.of(argb));
+  }
+  static dark(argb) {
+    return Scheme.darkFromCorePalette(CorePalette.of(argb));
+  }
+  static lightContent(argb) {
+    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));
+  }
+  static darkContent(argb) {
+    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));
+  }
+  static lightFromCorePalette(core) {
+    return new Scheme({
+      primary: core.a1.tone(40),
+      onPrimary: core.a1.tone(100),
+      primaryContainer: core.a1.tone(90),
+      onPrimaryContainer: core.a1.tone(10),
+      secondary: core.a2.tone(40),
+      onSecondary: core.a2.tone(100),
+      secondaryContainer: core.a2.tone(90),
+      onSecondaryContainer: core.a2.tone(10),
+      tertiary: core.a3.tone(40),
+      onTertiary: core.a3.tone(100),
+      tertiaryContainer: core.a3.tone(90),
+      onTertiaryContainer: core.a3.tone(10),
+      error: core.error.tone(40),
+      onError: core.error.tone(100),
+      errorContainer: core.error.tone(90),
+      onErrorContainer: core.error.tone(10),
+      background: core.n1.tone(99),
+      onBackground: core.n1.tone(10),
+      surface: core.n1.tone(99),
+      onSurface: core.n1.tone(10),
+      surfaceVariant: core.n2.tone(90),
+      onSurfaceVariant: core.n2.tone(30),
+      outline: core.n2.tone(50),
+      outlineVariant: core.n2.tone(80),
+      shadow: core.n1.tone(0),
+      scrim: core.n1.tone(0),
+      inverseSurface: core.n1.tone(20),
+      inverseOnSurface: core.n1.tone(95),
+      inversePrimary: core.a1.tone(80)
+    });
+  }
+  static darkFromCorePalette(core) {
+    return new Scheme({
+      primary: core.a1.tone(80),
+      onPrimary: core.a1.tone(20),
+      primaryContainer: core.a1.tone(30),
+      onPrimaryContainer: core.a1.tone(90),
+      secondary: core.a2.tone(80),
+      onSecondary: core.a2.tone(20),
+      secondaryContainer: core.a2.tone(30),
+      onSecondaryContainer: core.a2.tone(90),
+      tertiary: core.a3.tone(80),
+      onTertiary: core.a3.tone(20),
+      tertiaryContainer: core.a3.tone(30),
+      onTertiaryContainer: core.a3.tone(90),
+      error: core.error.tone(80),
+      onError: core.error.tone(20),
+      errorContainer: core.error.tone(30),
+      onErrorContainer: core.error.tone(80),
+      background: core.n1.tone(10),
+      onBackground: core.n1.tone(90),
+      surface: core.n1.tone(10),
+      onSurface: core.n1.tone(90),
+      surfaceVariant: core.n2.tone(30),
+      onSurfaceVariant: core.n2.tone(80),
+      outline: core.n2.tone(60),
+      outlineVariant: core.n2.tone(30),
+      shadow: core.n1.tone(0),
+      scrim: core.n1.tone(0),
+      inverseSurface: core.n1.tone(90),
+      inverseOnSurface: core.n1.tone(20),
+      inversePrimary: core.a1.tone(40)
+    });
+  }
+  toJSON() {
+    return {
+      ...this.props
+    };
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+class SchemeAndroid {
+  constructor(props) {
+    this.props = props;
+  }
+  get colorAccentPrimary() {
+    return this.props.colorAccentPrimary;
+  }
+  get colorAccentPrimaryVariant() {
+    return this.props.colorAccentPrimaryVariant;
+  }
+  get colorAccentSecondary() {
+    return this.props.colorAccentSecondary;
+  }
+  get colorAccentSecondaryVariant() {
+    return this.props.colorAccentSecondaryVariant;
+  }
+  get colorAccentTertiary() {
+    return this.props.colorAccentTertiary;
+  }
+  get colorAccentTertiaryVariant() {
+    return this.props.colorAccentTertiaryVariant;
+  }
+  get textColorPrimary() {
+    return this.props.textColorPrimary;
+  }
+  get textColorSecondary() {
+    return this.props.textColorSecondary;
+  }
+  get textColorTertiary() {
+    return this.props.textColorTertiary;
+  }
+  get textColorPrimaryInverse() {
+    return this.props.textColorPrimaryInverse;
+  }
+  get textColorSecondaryInverse() {
+    return this.props.textColorSecondaryInverse;
+  }
+  get textColorTertiaryInverse() {
+    return this.props.textColorTertiaryInverse;
+  }
+  get colorBackground() {
+    return this.props.colorBackground;
+  }
+  get colorBackgroundFloating() {
+    return this.props.colorBackgroundFloating;
+  }
+  get colorSurface() {
+    return this.props.colorSurface;
+  }
+  get colorSurfaceVariant() {
+    return this.props.colorSurfaceVariant;
+  }
+  get colorSurfaceHighlight() {
+    return this.props.colorSurfaceHighlight;
+  }
+  get surfaceHeader() {
+    return this.props.surfaceHeader;
+  }
+  get underSurface() {
+    return this.props.underSurface;
+  }
+  get offState() {
+    return this.props.offState;
+  }
+  get accentSurface() {
+    return this.props.accentSurface;
+  }
+  get textPrimaryOnAccent() {
+    return this.props.textPrimaryOnAccent;
+  }
+  get textSecondaryOnAccent() {
+    return this.props.textSecondaryOnAccent;
+  }
+  get volumeBackground() {
+    return this.props.volumeBackground;
+  }
+  get scrim() {
+    return this.props.scrim;
+  }
+  static light(argb) {
+    const core = CorePalette.of(argb);
+    return SchemeAndroid.lightFromCorePalette(core);
+  }
+  static dark(argb) {
+    const core = CorePalette.of(argb);
+    return SchemeAndroid.darkFromCorePalette(core);
+  }
+  static lightContent(argb) {
+    const core = CorePalette.contentOf(argb);
+    return SchemeAndroid.lightFromCorePalette(core);
+  }
+  static darkContent(argb) {
+    const core = CorePalette.contentOf(argb);
+    return SchemeAndroid.darkFromCorePalette(core);
+  }
+  static lightFromCorePalette(core) {
+    return new SchemeAndroid({
+      colorAccentPrimary: core.a1.tone(90),
+      colorAccentPrimaryVariant: core.a1.tone(40),
+      colorAccentSecondary: core.a2.tone(90),
+      colorAccentSecondaryVariant: core.a2.tone(40),
+      colorAccentTertiary: core.a3.tone(90),
+      colorAccentTertiaryVariant: core.a3.tone(40),
+      textColorPrimary: core.n1.tone(10),
+      textColorSecondary: core.n2.tone(30),
+      textColorTertiary: core.n2.tone(50),
+      textColorPrimaryInverse: core.n1.tone(95),
+      textColorSecondaryInverse: core.n1.tone(80),
+      textColorTertiaryInverse: core.n1.tone(60),
+      colorBackground: core.n1.tone(95),
+      colorBackgroundFloating: core.n1.tone(98),
+      colorSurface: core.n1.tone(98),
+      colorSurfaceVariant: core.n1.tone(90),
+      colorSurfaceHighlight: core.n1.tone(100),
+      surfaceHeader: core.n1.tone(90),
+      underSurface: core.n1.tone(0),
+      offState: core.n1.tone(20),
+      accentSurface: core.a2.tone(95),
+      textPrimaryOnAccent: core.n1.tone(10),
+      textSecondaryOnAccent: core.n2.tone(30),
+      volumeBackground: core.n1.tone(25),
+      scrim: core.n1.tone(80)
+    });
+  }
+  static darkFromCorePalette(core) {
+    return new SchemeAndroid({
+      colorAccentPrimary: core.a1.tone(90),
+      colorAccentPrimaryVariant: core.a1.tone(70),
+      colorAccentSecondary: core.a2.tone(90),
+      colorAccentSecondaryVariant: core.a2.tone(70),
+      colorAccentTertiary: core.a3.tone(90),
+      colorAccentTertiaryVariant: core.a3.tone(70),
+      textColorPrimary: core.n1.tone(95),
+      textColorSecondary: core.n2.tone(80),
+      textColorTertiary: core.n2.tone(60),
+      textColorPrimaryInverse: core.n1.tone(10),
+      textColorSecondaryInverse: core.n1.tone(30),
+      textColorTertiaryInverse: core.n1.tone(50),
+      colorBackground: core.n1.tone(10),
+      colorBackgroundFloating: core.n1.tone(10),
+      colorSurface: core.n1.tone(20),
+      colorSurfaceVariant: core.n1.tone(30),
+      colorSurfaceHighlight: core.n1.tone(35),
+      surfaceHeader: core.n1.tone(30),
+      underSurface: core.n1.tone(0),
+      offState: core.n1.tone(20),
+      accentSurface: core.a2.tone(95),
+      textPrimaryOnAccent: core.n1.tone(10),
+      textSecondaryOnAccent: core.n2.tone(30),
+      volumeBackground: core.n1.tone(25),
+      scrim: core.n1.tone(80)
+    });
+  }
+  toJSON() {
+    return { ...this.props };
+  }
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const _Score = class {
+  constructor() {
+  }
+  static score(colorsToPopulation, contentColor = false) {
+    let populationSum = 0;
+    for (const population of colorsToPopulation.values()) {
+      populationSum += population;
+    }
+    const colorsToProportion = /* @__PURE__ */ new Map();
+    const colorsToCam = /* @__PURE__ */ new Map();
+    const hueProportions = new Array(360).fill(0);
+    for (const [color, population] of colorsToPopulation.entries()) {
+      const proportion = population / populationSum;
+      colorsToProportion.set(color, proportion);
+      const cam = Cam16.fromInt(color);
+      colorsToCam.set(color, cam);
+      const hue = Math.round(cam.hue);
+      hueProportions[hue] += proportion;
+    }
+    const colorsToExcitedProportion = /* @__PURE__ */ new Map();
+    for (const [color, cam] of colorsToCam.entries()) {
+      const hue = Math.round(cam.hue);
+      let excitedProportion = 0;
+      for (let i = hue - 15; i < hue + 15; i++) {
+        const neighborHue = sanitizeDegreesInt(i);
+        excitedProportion += hueProportions[neighborHue];
+      }
+      colorsToExcitedProportion.set(color, excitedProportion);
+    }
+    const colorsToScore = /* @__PURE__ */ new Map();
+    for (const [color, cam] of colorsToCam.entries()) {
+      const proportion = colorsToExcitedProportion.get(color);
+      const proportionScore = proportion * 100 * _Score.WEIGHT_PROPORTION;
+      const chromaWeight = cam.chroma < _Score.TARGET_CHROMA ? _Score.WEIGHT_CHROMA_BELOW : _Score.WEIGHT_CHROMA_ABOVE;
+      const chromaScore = (cam.chroma - _Score.TARGET_CHROMA) * chromaWeight;
+      const score = proportionScore + chromaScore;
+      colorsToScore.set(color, score);
+    }
+    const filteredColors = contentColor ? _Score.filterContent(colorsToCam) : _Score.filter(colorsToExcitedProportion, colorsToCam);
+    const dedupedColorsToScore = /* @__PURE__ */ new Map();
+    for (const color of filteredColors) {
+      let duplicateHue = false;
+      const hue = colorsToCam.get(color).hue;
+      for (const [alreadyChosenColor] of dedupedColorsToScore) {
+        const alreadyChosenHue = colorsToCam.get(alreadyChosenColor).hue;
+        if (differenceDegrees(hue, alreadyChosenHue) < 15) {
+          duplicateHue = true;
+          break;
+        }
+      }
+      if (duplicateHue) {
+        continue;
+      }
+      dedupedColorsToScore.set(color, colorsToScore.get(color));
+    }
+    const colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());
+    colorsByScoreDescending.sort((first, second) => {
+      return second[1] - first[1];
+    });
+    const answer = colorsByScoreDescending.map((entry) => {
+      return entry[0];
+    });
+    if (answer.length === 0) {
+      answer.push(4282549748);
+    }
+    return answer;
+  }
+  static filter(colorsToExcitedProportion, colorsToCam) {
+    const filtered = new Array();
+    for (const [color, cam] of colorsToCam.entries()) {
+      const proportion = colorsToExcitedProportion.get(color);
+      if (cam.chroma >= _Score.CUTOFF_CHROMA && lstarFromArgb(color) >= _Score.CUTOFF_TONE && proportion >= _Score.CUTOFF_EXCITED_PROPORTION) {
+        filtered.push(color);
+      }
+    }
+    return filtered;
+  }
+  static filterContent(colorsToCam) {
+    return Array.from(colorsToCam.keys());
+  }
+};
+let Score = _Score;
+Score.TARGET_CHROMA = 48;
+Score.WEIGHT_PROPORTION = 0.7;
+Score.WEIGHT_CHROMA_ABOVE = 0.3;
+Score.WEIGHT_CHROMA_BELOW = 0.1;
+Score.CUTOFF_CHROMA = 15;
+Score.CUTOFF_TONE = 10;
+Score.CUTOFF_EXCITED_PROPORTION = 0.01;
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+const hexFromArgb = (argb) => {
+  const r = redFromArgb(argb);
+  const g = greenFromArgb(argb);
+  const b = blueFromArgb(argb);
+  const outParts = [r.toString(16), g.toString(16), b.toString(16)];
+  for (const [i, part] of outParts.entries()) {
+    if (part.length === 1) {
+      outParts[i] = "0" + part;
+    }
+  }
+  return "#" + outParts.join("");
+};
+const argbFromHex = (hex) => {
+  hex = hex.replace("#", "");
+  const isThree = hex.length === 3;
+  const isSix = hex.length === 6;
+  const isEight = hex.length === 8;
+  if (!isThree && !isSix && !isEight) {
+    throw new Error("unexpected hex " + hex);
+  }
+  let r = 0;
+  let g = 0;
+  let b = 0;
+  if (isThree) {
+    r = parseIntHex(hex.slice(0, 1).repeat(2));
+    g = parseIntHex(hex.slice(1, 2).repeat(2));
+    b = parseIntHex(hex.slice(2, 3).repeat(2));
+  } else if (isSix) {
+    r = parseIntHex(hex.slice(0, 2));
+    g = parseIntHex(hex.slice(2, 4));
+    b = parseIntHex(hex.slice(4, 6));
+  } else if (isEight) {
+    r = parseIntHex(hex.slice(2, 4));
+    g = parseIntHex(hex.slice(4, 6));
+    b = parseIntHex(hex.slice(6, 8));
+  }
+  return (255 << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255) >>> 0;
+};
+function parseIntHex(value) {
+  return parseInt(value, 16);
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+async function sourceColorFromImage(image) {
+  const imageBytes = await new Promise((resolve, reject) => {
+    const canvas = document.createElement("canvas");
+    const context = canvas.getContext("2d");
+    if (!context) {
+      return reject(new Error("Could not get canvas context"));
+    }
+    image.onload = () => {
+      canvas.width = image.width;
+      canvas.height = image.height;
+      context.drawImage(image, 0, 0);
+      resolve(context.getImageData(0, 0, image.width, image.height).data);
+    };
+  });
+  const pixels = [];
+  for (let i = 0; i < imageBytes.length; i += 4) {
+    const r = imageBytes[i];
+    const g = imageBytes[i + 1];
+    const b = imageBytes[i + 2];
+    const a = imageBytes[i + 3];
+    if (a < 255) {
+      continue;
+    }
+    const argb = argbFromRgb(r, g, b);
+    pixels.push(argb);
+  }
+  const result = QuantizerCelebi.quantize(pixels, 128);
+  const ranked = Score.score(result);
+  const top = ranked[0];
+  return top;
+}
+
+/**
+ * @license
+ * Copyright 2021 Google LLC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+function themeFromSourceColor(source, customColors = []) {
+  const palette = CorePalette.of(source);
+  return {
+    source,
+    schemes: {
+      light: Scheme.light(source),
+      dark: Scheme.dark(source)
+    },
+    palettes: {
+      primary: palette.a1,
+      secondary: palette.a2,
+      tertiary: palette.a3,
+      neutral: palette.n1,
+      neutralVariant: palette.n2,
+      error: palette.error
+    },
+    customColors: customColors.map((c) => customColor(source, c))
+  };
+}
+async function themeFromImage(image, customColors = []) {
+  const source = await sourceColorFromImage(image);
+  return themeFromSourceColor(source, customColors);
+}
+function customColor(source, color) {
+  let value = color.value;
+  const from = value;
+  const to = source;
+  if (color.blend) {
+    value = Blend.harmonize(from, to);
+  }
+  const palette = CorePalette.of(value);
+  const tones = palette.a1;
+  return {
+    color,
+    value,
+    light: {
+      color: tones.tone(40),
+      onColor: tones.tone(100),
+      colorContainer: tones.tone(90),
+      onColorContainer: tones.tone(10)
+    },
+    dark: {
+      color: tones.tone(80),
+      onColor: tones.tone(20),
+      colorContainer: tones.tone(30),
+      onColorContainer: tones.tone(90)
+    }
+  };
+}
+function applyTheme(theme, options) {
+  const target = (options && options.target) || document.body;
+  const isDark = (options && options.dark !== null && options.dark !== undefined) ? options.dark : false;
+  const scheme = isDark ? theme.schemes.dark : theme.schemes.light;
+  setSchemeProperties(target, scheme);
+  if (options && options.brightnessSuffix) {
+    setSchemeProperties(target, theme.schemes.dark, "-dark");
+    setSchemeProperties(target, theme.schemes.light, "-light");
+  }
+  if (options && options.paletteTones) {
+    const tones = (options.paletteTones !== null && options.paletteTones !== undefined) ? options.paletteTones : [];
+    for (const [key, palette] of Object.entries(theme.palettes)) {
+      const paletteKey = key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
+      for (const tone of tones) {
+        const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;
+        const color = hexFromArgb(palette.tone(tone));
+        target.style.setProperty(token, color);
+      }
+    }
+  }
+}
+function setSchemeProperties(target, scheme, suffix = "") {
+  for (const [key, value] of Object.entries(scheme.toJSON())) {
+    const token = key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
+    const color = hexFromArgb(value);
+    target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);
+  }
+}
+
+export { Blend, Cam16, CorePalette, Hct, QuantizerCelebi, QuantizerMap, QuantizerWsmeans, QuantizerWu, Scheme, SchemeAndroid, Score, TonalPalette, ViewingConditions, alphaFromArgb, applyTheme, argbFromHex, argbFromLab, argbFromLinrgb, argbFromLstar, argbFromRgb, argbFromXyz, blueFromArgb, clampDouble, clampInt, customColor, delinearized, differenceDegrees, greenFromArgb, hexFromArgb, isOpaque, labFromArgb, lerp, linearized, lstarFromArgb, matrixMultiply, redFromArgb, rotationDirection, sanitizeDegreesDouble, sanitizeDegreesInt, signum, sourceColorFromImage, themeFromImage, themeFromSourceColor, whitePointD65, xyzFromArgb, yFromLstar };
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/core_palette.d.ts b/node_modules/@material/material-color-utilities/dist/palettes/core_palette.d.ts
deleted file mode 100644
index a2f7521..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/core_palette.d.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { TonalPalette } from './tonal_palette';
-/**
- * An intermediate concept between the key color for a UI theme, and a full
- * color scheme. 5 sets of tones are generated, all except one use the same hue
- * as the key color, and all vary in chroma.
- */
-export declare class CorePalette {
-    a1: TonalPalette;
-    a2: TonalPalette;
-    a3: TonalPalette;
-    n1: TonalPalette;
-    n2: TonalPalette;
-    error: TonalPalette;
-    /**
-     * @param argb ARGB representation of a color
-     */
-    static of(argb: number): CorePalette;
-    /**
-     * @param argb ARGB representation of a color
-     */
-    static contentOf(argb: number): CorePalette;
-    private constructor();
-}
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/core_palette.js b/node_modules/@material/material-color-utilities/dist/palettes/core_palette.js
deleted file mode 100644
index 768ad9c..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/core_palette.js
+++ /dev/null
@@ -1,58 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Hct } from '../hct/hct';
-import { TonalPalette } from './tonal_palette';
-/**
- * An intermediate concept between the key color for a UI theme, and a full
- * color scheme. 5 sets of tones are generated, all except one use the same hue
- * as the key color, and all vary in chroma.
- */
-export class CorePalette {
-    constructor(argb, isContent) {
-        const hct = Hct.fromInt(argb);
-        const hue = hct.hue;
-        const chroma = hct.chroma;
-        if (isContent) {
-            this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);
-            this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);
-            this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);
-            this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));
-            this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));
-        }
-        else {
-            this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));
-            this.a2 = TonalPalette.fromHueAndChroma(hue, 16);
-            this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);
-            this.n1 = TonalPalette.fromHueAndChroma(hue, 4);
-            this.n2 = TonalPalette.fromHueAndChroma(hue, 8);
-        }
-        this.error = TonalPalette.fromHueAndChroma(25, 84);
-    }
-    /**
-     * @param argb ARGB representation of a color
-     */
-    static of(argb) {
-        return new CorePalette(argb, false);
-    }
-    /**
-     * @param argb ARGB representation of a color
-     */
-    static contentOf(argb) {
-        return new CorePalette(argb, true);
-    }
-}
-//# sourceMappingURL=core_palette.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/core_palette.js.map b/node_modules/@material/material-color-utilities/dist/palettes/core_palette.js.map
deleted file mode 100644
index e9a84e8..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/core_palette.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"core_palette.js","sourceRoot":"","sources":["../../palettes/core_palette.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,GAAG,EAAC,MAAM,YAAY,CAAC;AAE/B,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAE7C;;;;GAIG;AACH,MAAM,OAAO,WAAW;IAsBtB,YAAoB,IAAY,EAAE,SAAkB;QAClD,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACpB,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QAC1B,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACrD,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,GAAG,EAAE,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACvE,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACvE;aAAM;YACL,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;YACnE,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;YACtD,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACrD,CAAC;IAhCD;;OAEG;IACH,MAAM,CAAC,EAAE,CAAC,IAAY;QACpB,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,SAAS,CAAC,IAAY;QAC3B,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CAqBF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct';\n\nimport {TonalPalette} from './tonal_palette';\n\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n */\nexport class CorePalette {\n  a1: TonalPalette;\n  a2: TonalPalette;\n  a3: TonalPalette;\n  n1: TonalPalette;\n  n2: TonalPalette;\n  error: TonalPalette;\n\n  /**\n   * @param argb ARGB representation of a color\n   */\n  static of(argb: number): CorePalette {\n    return new CorePalette(argb, false);\n  }\n\n  /**\n   * @param argb ARGB representation of a color\n   */\n  static contentOf(argb: number): CorePalette {\n    return new CorePalette(argb, true);\n  }\n\n  private constructor(argb: number, isContent: boolean) {\n    const hct = Hct.fromInt(argb);\n    const hue = hct.hue;\n    const chroma = hct.chroma;\n    if (isContent) {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));\n      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n    }\n    this.error = TonalPalette.fromHueAndChroma(25, 84);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.d.ts b/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.js b/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.js
deleted file mode 100644
index aa3cc0f..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.js
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import { CorePalette } from './core_palette';
-import { TonalPalette } from './tonal_palette';
-describe('TonalPalette', () => {
-    it('ofBlue', () => {
-        const blue = TonalPalette.fromInt(0xff0000ff);
-        expect(blue.tone(100)).toBe(0xffffffff);
-        expect(blue.tone(95)).toBe(0xfff1efff);
-        expect(blue.tone(90)).toBe(0xffe0e0ff);
-        expect(blue.tone(80)).toBe(0xffbec2ff);
-        expect(blue.tone(70)).toBe(0xff9da3ff);
-        expect(blue.tone(60)).toBe(0xff7c84ff);
-        expect(blue.tone(50)).toBe(0xff5a64ff);
-        expect(blue.tone(40)).toBe(0xff343dff);
-        expect(blue.tone(30)).toBe(0xff0000ef);
-        expect(blue.tone(20)).toBe(0xff0001ac);
-        expect(blue.tone(10)).toBe(0xff00006e);
-        expect(blue.tone(0)).toBe(0xff000000);
-    });
-});
-describe('CorePalette', () => {
-    it('ofBlue', () => {
-        const core = CorePalette.of(0xff0000ff);
-        expect(core.a1.tone(100)).toBe(0xffffffff);
-        expect(core.a1.tone(95)).toBe(0xfff1efff);
-        expect(core.a1.tone(90)).toBe(0xffe0e0ff);
-        expect(core.a1.tone(80)).toBe(0xffbec2ff);
-        expect(core.a1.tone(70)).toBe(0xff9da3ff);
-        expect(core.a1.tone(60)).toBe(0xff7c84ff);
-        expect(core.a1.tone(50)).toBe(0xff5a64ff);
-        expect(core.a1.tone(40)).toBe(0xff343dff);
-        expect(core.a1.tone(30)).toBe(0xff0000ef);
-        expect(core.a1.tone(20)).toBe(0xff0001ac);
-        expect(core.a1.tone(10)).toBe(0xff00006e);
-        expect(core.a1.tone(0)).toBe(0xff000000);
-        expect(core.a2.tone(100)).toBe(0xffffffff);
-        expect(core.a2.tone(95)).toBe(0xfff1efff);
-        expect(core.a2.tone(90)).toBe(0xffe1e0f9);
-        expect(core.a2.tone(80)).toBe(0xffc5c4dd);
-        expect(core.a2.tone(70)).toBe(0xffa9a9c1);
-        expect(core.a2.tone(60)).toBe(0xff8f8fa6);
-        expect(core.a2.tone(50)).toBe(0xff75758b);
-        expect(core.a2.tone(40)).toBe(0xff5c5d72);
-        expect(core.a2.tone(30)).toBe(0xff444559);
-        expect(core.a2.tone(20)).toBe(0xff2e2f42);
-        expect(core.a2.tone(10)).toBe(0xff191a2c);
-        expect(core.a2.tone(0)).toBe(0xff000000);
-    });
-    it('contentOfBlue', () => {
-        const core = CorePalette.contentOf(0xff0000ff);
-        expect(core.a1.tone(100)).toBe(0xffffffff);
-        expect(core.a1.tone(95)).toBe(0xfff1efff);
-        expect(core.a1.tone(90)).toBe(0xffe0e0ff);
-        expect(core.a1.tone(80)).toBe(0xffbec2ff);
-        expect(core.a1.tone(70)).toBe(0xff9da3ff);
-        expect(core.a1.tone(60)).toBe(0xff7c84ff);
-        expect(core.a1.tone(50)).toBe(0xff5a64ff);
-        expect(core.a1.tone(40)).toBe(0xff343dff);
-        expect(core.a1.tone(30)).toBe(0xff0000ef);
-        expect(core.a1.tone(20)).toBe(0xff0001ac);
-        expect(core.a1.tone(10)).toBe(0xff00006e);
-        expect(core.a1.tone(0)).toBe(0xff000000);
-        expect(core.a2.tone(100)).toBe(0xffffffff);
-        expect(core.a2.tone(95)).toBe(0xfff1efff);
-        expect(core.a2.tone(90)).toBe(0xffe0e0ff);
-        expect(core.a2.tone(80)).toBe(0xffc1c3f4);
-        expect(core.a2.tone(70)).toBe(0xffa5a7d7);
-        expect(core.a2.tone(60)).toBe(0xff8b8dbb);
-        expect(core.a2.tone(50)).toBe(0xff7173a0);
-        expect(core.a2.tone(40)).toBe(0xff585b86);
-        expect(core.a2.tone(30)).toBe(0xff40436d);
-        expect(core.a2.tone(20)).toBe(0xff2a2d55);
-        expect(core.a2.tone(10)).toBe(0xff14173f);
-        expect(core.a2.tone(0)).toBe(0xff000000);
-    });
-});
-//# sourceMappingURL=palettes_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.js.map b/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.js.map
deleted file mode 100644
index db323eb..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/palettes_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"palettes_test.js","sourceRoot":"","sources":["../../palettes/palettes_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport {CorePalette} from './core_palette';\nimport {TonalPalette} from './tonal_palette';\n\ndescribe('TonalPalette', () => {\n  it('ofBlue', () => {\n    const blue = TonalPalette.fromInt(0xff0000ff);\n\n    expect(blue.tone(100)).toBe(0xffffffff);\n    expect(blue.tone(95)).toBe(0xfff1efff);\n    expect(blue.tone(90)).toBe(0xffe0e0ff);\n    expect(blue.tone(80)).toBe(0xffbec2ff);\n    expect(blue.tone(70)).toBe(0xff9da3ff);\n    expect(blue.tone(60)).toBe(0xff7c84ff);\n    expect(blue.tone(50)).toBe(0xff5a64ff);\n    expect(blue.tone(40)).toBe(0xff343dff);\n    expect(blue.tone(30)).toBe(0xff0000ef);\n    expect(blue.tone(20)).toBe(0xff0001ac);\n    expect(blue.tone(10)).toBe(0xff00006e);\n    expect(blue.tone(0)).toBe(0xff000000);\n  });\n});\n\ndescribe('CorePalette', () => {\n  it('ofBlue', () => {\n    const core = CorePalette.of(0xff0000ff);\n\n    expect(core.a1.tone(100)).toBe(0xffffffff);\n    expect(core.a1.tone(95)).toBe(0xfff1efff);\n    expect(core.a1.tone(90)).toBe(0xffe0e0ff);\n    expect(core.a1.tone(80)).toBe(0xffbec2ff);\n    expect(core.a1.tone(70)).toBe(0xff9da3ff);\n    expect(core.a1.tone(60)).toBe(0xff7c84ff);\n    expect(core.a1.tone(50)).toBe(0xff5a64ff);\n    expect(core.a1.tone(40)).toBe(0xff343dff);\n    expect(core.a1.tone(30)).toBe(0xff0000ef);\n    expect(core.a1.tone(20)).toBe(0xff0001ac);\n    expect(core.a1.tone(10)).toBe(0xff00006e);\n    expect(core.a1.tone(0)).toBe(0xff000000);\n\n    expect(core.a2.tone(100)).toBe(0xffffffff);\n    expect(core.a2.tone(95)).toBe(0xfff1efff);\n    expect(core.a2.tone(90)).toBe(0xffe1e0f9);\n    expect(core.a2.tone(80)).toBe(0xffc5c4dd);\n    expect(core.a2.tone(70)).toBe(0xffa9a9c1);\n    expect(core.a2.tone(60)).toBe(0xff8f8fa6);\n    expect(core.a2.tone(50)).toBe(0xff75758b);\n    expect(core.a2.tone(40)).toBe(0xff5c5d72);\n    expect(core.a2.tone(30)).toBe(0xff444559);\n    expect(core.a2.tone(20)).toBe(0xff2e2f42);\n    expect(core.a2.tone(10)).toBe(0xff191a2c);\n    expect(core.a2.tone(0)).toBe(0xff000000);\n  });\n\n  it('contentOfBlue', () => {\n    const core = CorePalette.contentOf(0xff0000ff);\n\n    expect(core.a1.tone(100)).toBe(0xffffffff);\n    expect(core.a1.tone(95)).toBe(0xfff1efff);\n    expect(core.a1.tone(90)).toBe(0xffe0e0ff);\n    expect(core.a1.tone(80)).toBe(0xffbec2ff);\n    expect(core.a1.tone(70)).toBe(0xff9da3ff);\n    expect(core.a1.tone(60)).toBe(0xff7c84ff);\n    expect(core.a1.tone(50)).toBe(0xff5a64ff);\n    expect(core.a1.tone(40)).toBe(0xff343dff);\n    expect(core.a1.tone(30)).toBe(0xff0000ef);\n    expect(core.a1.tone(20)).toBe(0xff0001ac);\n    expect(core.a1.tone(10)).toBe(0xff00006e);\n    expect(core.a1.tone(0)).toBe(0xff000000);\n\n    expect(core.a2.tone(100)).toBe(0xffffffff);\n    expect(core.a2.tone(95)).toBe(0xfff1efff);\n    expect(core.a2.tone(90)).toBe(0xffe0e0ff);\n    expect(core.a2.tone(80)).toBe(0xffc1c3f4);\n    expect(core.a2.tone(70)).toBe(0xffa5a7d7);\n    expect(core.a2.tone(60)).toBe(0xff8b8dbb);\n    expect(core.a2.tone(50)).toBe(0xff7173a0);\n    expect(core.a2.tone(40)).toBe(0xff585b86);\n    expect(core.a2.tone(30)).toBe(0xff40436d);\n    expect(core.a2.tone(20)).toBe(0xff2a2d55);\n    expect(core.a2.tone(10)).toBe(0xff14173f);\n    expect(core.a2.tone(0)).toBe(0xff000000);\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.d.ts b/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.d.ts
deleted file mode 100644
index a511b9f..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.d.ts
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- *  A convenience class for retrieving colors that are constant in hue and
- *  chroma, but vary in tone.
- */
-export declare class TonalPalette {
-    private readonly hue;
-    private readonly chroma;
-    private readonly cache;
-    /**
-     * @param argb ARGB representation of a color
-     * @return Tones matching that color's hue and chroma.
-     */
-    static fromInt(argb: number): TonalPalette;
-    /**
-     * @param hue HCT hue
-     * @param chroma HCT chroma
-     * @return Tones matching hue and chroma.
-     */
-    static fromHueAndChroma(hue: number, chroma: number): TonalPalette;
-    private constructor();
-    /**
-     * @param tone HCT tone, measured from 0 to 100.
-     * @return ARGB representation of a color with that tone.
-     */
-    tone(tone: number): number;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js b/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js
deleted file mode 100644
index 67afe63..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Hct } from '../hct/hct';
-/**
- *  A convenience class for retrieving colors that are constant in hue and
- *  chroma, but vary in tone.
- */
-export class TonalPalette {
-    constructor(hue, chroma) {
-        this.hue = hue;
-        this.chroma = chroma;
-        this.cache = new Map();
-    }
-    /**
-     * @param argb ARGB representation of a color
-     * @return Tones matching that color's hue and chroma.
-     */
-    static fromInt(argb) {
-        const hct = Hct.fromInt(argb);
-        return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);
-    }
-    /**
-     * @param hue HCT hue
-     * @param chroma HCT chroma
-     * @return Tones matching hue and chroma.
-     */
-    static fromHueAndChroma(hue, chroma) {
-        return new TonalPalette(hue, chroma);
-    }
-    /**
-     * @param tone HCT tone, measured from 0 to 100.
-     * @return ARGB representation of a color with that tone.
-     */
-    tone(tone) {
-        let argb = this.cache.get(tone);
-        if (argb === undefined) {
-            argb = Hct.from(this.hue, this.chroma, tone).toInt();
-            this.cache.set(tone, argb);
-        }
-        return argb;
-    }
-}
-//# sourceMappingURL=tonal_palette.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js.map b/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js.map
deleted file mode 100644
index a22ce85..0000000
--- a/node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"tonal_palette.js","sourceRoot":"","sources":["../../palettes/tonal_palette.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,GAAG,EAAC,MAAM,YAAY,CAAC;AAE/B;;;GAGG;AACH,MAAM,OAAO,YAAY;IAqBvB,YACqB,GAAW,EAAmB,MAAc;QAA5C,QAAG,GAAH,GAAG,CAAQ;QAAmB,WAAM,GAAN,MAAM,CAAQ;QArBhD,UAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;IAqBiB,CAAC;IAnBrE;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,gBAAgB,CAAC,GAAW,EAAE,MAAc;QACjD,OAAO,IAAI,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAKD;;;OAGG;IACH,IAAI,CAAC,IAAY;QACf,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;YACrD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC5B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct';\n\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n  private readonly cache = new Map<number, number>();\n\n  /**\n   * @param argb ARGB representation of a color\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromInt(argb: number): TonalPalette {\n    const hct = Hct.fromInt(argb);\n    return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);\n  }\n\n  /**\n   * @param hue HCT hue\n   * @param chroma HCT chroma\n   * @return Tones matching hue and chroma.\n   */\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\n    return new TonalPalette(hue, chroma);\n  }\n\n  private constructor(\n      private readonly hue: number, private readonly chroma: number) {}\n\n  /**\n   * @param tone HCT tone, measured from 0 to 100.\n   * @return ARGB representation of a color with that tone.\n   */\n  tone(tone: number): number {\n    let argb = this.cache.get(tone);\n    if (argb === undefined) {\n      argb = Hct.from(this.hue, this.chroma, tone).toInt();\n      this.cache.set(tone, argb);\n    }\n    return argb;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.d.ts
deleted file mode 100644
index 05871d6..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.d.ts
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import './point_provider';
-/**
- * Provides conversions needed for K-Means quantization. Converting input to
- * points, and converting the final state of the K-Means algorithm to colors.
- */
-export declare class LabPointProvider implements PointProvider {
-    /**
-     * Convert a color represented in ARGB to a 3-element array of L*a*b*
-     * coordinates of the color.
-     */
-    fromInt(argb: number): number[];
-    /**
-     * Convert a 3-element array to a color represented in ARGB.
-     */
-    toInt(point: number[]): number;
-    /**
-     * Standard CIE 1976 delta E formula also takes the square root, unneeded
-     * here. This method is used by quantization algorithms to compare distance,
-     * and the relative ordering is the same, with or without a square root.
-     *
-     * This relatively minor optimization is helpful because this method is
-     * called at least once for each pixel in an image.
-     */
-    distance(from: number[], to: number[]): number;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js b/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js
deleted file mode 100644
index 936eb4c..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js
+++ /dev/null
@@ -1,52 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import './point_provider';
-import * as utils from '../utils/color_utils';
-/**
- * Provides conversions needed for K-Means quantization. Converting input to
- * points, and converting the final state of the K-Means algorithm to colors.
- */
-export class LabPointProvider {
-    /**
-     * Convert a color represented in ARGB to a 3-element array of L*a*b*
-     * coordinates of the color.
-     */
-    fromInt(argb) {
-        return utils.labFromArgb(argb);
-    }
-    /**
-     * Convert a 3-element array to a color represented in ARGB.
-     */
-    toInt(point) {
-        return utils.argbFromLab(point[0], point[1], point[2]);
-    }
-    /**
-     * Standard CIE 1976 delta E formula also takes the square root, unneeded
-     * here. This method is used by quantization algorithms to compare distance,
-     * and the relative ordering is the same, with or without a square root.
-     *
-     * This relatively minor optimization is helpful because this method is
-     * called at least once for each pixel in an image.
-     */
-    distance(from, to) {
-        const dL = from[0] - to[0];
-        const dA = from[1] - to[1];
-        const dB = from[2] - to[2];
-        return dL * dL + dA * dA + dB * dB;
-    }
-}
-//# sourceMappingURL=lab_point_provider.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js.map b/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js.map
deleted file mode 100644
index 7564083..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"lab_point_provider.js","sourceRoot":"","sources":["../../quantize/lab_point_provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,kBAAkB,CAAC;AAE1B,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IAC3B;;;OAGG;IACH,OAAO,CAAC,IAAY;QAClB,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAe;QACnB,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;OAOG;IACH,QAAQ,CAAC,IAAc,EAAE,EAAY;QACnC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACrC,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './point_provider';\n\nimport * as utils from '../utils/color_utils';\n\n/**\n * Provides conversions needed for K-Means quantization. Converting input to\n * points, and converting the final state of the K-Means algorithm to colors.\n */\nexport class LabPointProvider implements PointProvider {\n  /**\n   * Convert a color represented in ARGB to a 3-element array of L*a*b*\n   * coordinates of the color.\n   */\n  fromInt(argb: number): number[] {\n    return utils.labFromArgb(argb);\n  }\n\n  /**\n   * Convert a 3-element array to a color represented in ARGB.\n   */\n  toInt(point: number[]): number {\n    return utils.argbFromLab(point[0], point[1], point[2]);\n  }\n\n  /**\n   * Standard CIE 1976 delta E formula also takes the square root, unneeded\n   * here. This method is used by quantization algorithms to compare distance,\n   * and the relative ordering is the same, with or without a square root.\n   *\n   * This relatively minor optimization is helpful because this method is\n   * called at least once for each pixel in an image.\n   */\n  distance(from: number[], to: number[]): number {\n    const dL = from[0] - to[0];\n    const dA = from[1] - to[1];\n    const dB = from[2] - to[2];\n    return dL * dL + dA * dA + dB * dB;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/point_provider.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/point_provider.d.ts
deleted file mode 100644
index d7b2d9b..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/point_provider.d.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * An interface to allow use of different color spaces by
- * quantizers.
- */
-interface PointProvider {
-    toInt(point: number[]): number;
-    fromInt(argb: number): number[];
-    distance(from: number[], to: number[]): number;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/point_provider.js b/node_modules/@material/material-color-utilities/dist/quantize/point_provider.js
deleted file mode 100644
index 8e6c996..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/point_provider.js
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-//# sourceMappingURL=point_provider.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/point_provider.js.map b/node_modules/@material/material-color-utilities/dist/quantize/point_provider.js.map
deleted file mode 100644
index b0bce56..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/point_provider.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"point_provider.js","sourceRoot":"","sources":["../../quantize/point_provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An interface to allow use of different color spaces by\n * quantizers.\n */\n\ninterface PointProvider {\n  toInt(point: number[]): number;\n  fromInt(argb: number): number[];\n  distance(from: number[], to: number[]): number;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.d.ts
deleted file mode 100644
index e21eb5b..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.d.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * An image quantizer that improves on the quality of a standard K-Means
- * algorithm by setting the K-Means initial state to the output of a Wu
- * quantizer, instead of random centroids. Improves on speed by several
- * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means
- * with those optimizations.
- *
- * This algorithm was designed by M. Emre Celebi, and was found in their 2011
- * paper, Improving the Performance of K-Means for Color Quantization.
- * https://arxiv.org/abs/1101.0395
- */
-export declare class QuantizerCelebi {
-    /**
-     * @param pixels Colors in ARGB format.
-     * @param maxColors The number of colors to divide the image into. A lower
-     *     number of colors may be returned.
-     * @return Map with keys of colors in ARGB format, and values of number of
-     *     pixels in the original image that correspond to the color in the
-     *     quantized image.
-     */
-    static quantize(pixels: number[], maxColors: number): Map<number, number>;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js
deleted file mode 100644
index 1918b53..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { QuantizerWsmeans } from './quantizer_wsmeans';
-import { QuantizerWu } from './quantizer_wu';
-/**
- * An image quantizer that improves on the quality of a standard K-Means
- * algorithm by setting the K-Means initial state to the output of a Wu
- * quantizer, instead of random centroids. Improves on speed by several
- * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means
- * with those optimizations.
- *
- * This algorithm was designed by M. Emre Celebi, and was found in their 2011
- * paper, Improving the Performance of K-Means for Color Quantization.
- * https://arxiv.org/abs/1101.0395
- */
-// libmonet is designed to have a consistent API across platforms
-// and modular components that can be moved around easily. Using a class as a
-// namespace facilitates this.
-//
-// tslint:disable-next-line:class-as-namespace
-export class QuantizerCelebi {
-    /**
-     * @param pixels Colors in ARGB format.
-     * @param maxColors The number of colors to divide the image into. A lower
-     *     number of colors may be returned.
-     * @return Map with keys of colors in ARGB format, and values of number of
-     *     pixels in the original image that correspond to the color in the
-     *     quantized image.
-     */
-    static quantize(pixels, maxColors) {
-        const wu = new QuantizerWu();
-        const wuResult = wu.quantize(pixels, maxColors);
-        return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);
-    }
-}
-//# sourceMappingURL=quantizer_celebi.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js.map b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js.map
deleted file mode 100644
index f809aac..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"quantizer_celebi.js","sourceRoot":"","sources":["../../quantize/quantizer_celebi.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;;;;GAUG;AACH,iEAAiE;AACjE,6EAA6E;AAC7E,8BAA8B;AAC9B,EAAE;AACF,8CAA8C;AAC9C,MAAM,OAAO,eAAe;IAC1B;;;;;;;OAOG;IACH,MAAM,CAAC,QAAQ,CAAC,MAAgB,EAAE,SAAiB;QACjD,MAAM,EAAE,GAAG,IAAI,WAAW,EAAE,CAAC;QAC7B,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAChD,OAAO,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QuantizerWsmeans} from './quantizer_wsmeans';\nimport {QuantizerWu} from './quantizer_wu';\n\n/**\n * An image quantizer that improves on the quality of a standard K-Means\n * algorithm by setting the K-Means initial state to the output of a Wu\n * quantizer, instead of random centroids. Improves on speed by several\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\n * with those optimizations.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerCelebi {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Map with keys of colors in ARGB format, and values of number of\n   *     pixels in the original image that correspond to the color in the\n   *     quantized image.\n   */\n  static quantize(pixels: number[], maxColors: number): Map<number, number> {\n    const wu = new QuantizerWu();\n    const wuResult = wu.quantize(pixels, maxColors);\n    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.js b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.js
deleted file mode 100644
index 9e268e5..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.js
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import { QuantizerCelebi } from './quantizer_celebi';
-const RED = 0xffff0000;
-const GREEN = 0xff00ff00;
-const BLUE = 0xff0000ff;
-describe('QuantizerCelebi', () => {
-    it('1R', () => {
-        const answer = QuantizerCelebi.quantize([RED], 128);
-        expect(answer.size).toBe(1);
-        expect(answer.get(RED)).toBe(1);
-    });
-    it('1G', () => {
-        const answer = QuantizerCelebi.quantize([GREEN], 128);
-        expect(answer.size).toBe(1);
-        expect(answer.get(GREEN)).toBe(1);
-    });
-    it('1B', () => {
-        const answer = QuantizerCelebi.quantize([BLUE], 128);
-        expect(answer.size).toBe(1);
-        expect(answer.get(BLUE)).toBe(1);
-    });
-    it('5B', () => {
-        const answer = QuantizerCelebi.quantize([BLUE, BLUE, BLUE, BLUE, BLUE], 128);
-        expect(answer.size).toBe(1);
-        expect(answer.get(BLUE)).toBe(5);
-    });
-    it('2R 3G', () => {
-        const answer = QuantizerCelebi.quantize([RED, RED, GREEN, GREEN, GREEN], 128);
-        expect(answer.size).toBe(2);
-        expect(answer.get(RED)).toBe(2);
-        expect(answer.get(GREEN)).toBe(3);
-    });
-    it('1R 1G 1B', () => {
-        const answer = QuantizerCelebi.quantize([RED, GREEN, BLUE], 128);
-        expect(answer.size).toBe(3);
-        expect(answer.get(RED)).toBe(1);
-        expect(answer.get(GREEN)).toBe(1);
-        expect(answer.get(BLUE)).toBe(1);
-    });
-});
-//# sourceMappingURL=quantizer_celebi_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.js.map b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.js.map
deleted file mode 100644
index a721d8e..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"quantizer_celebi_test.js","sourceRoot":"","sources":["../../quantize/quantizer_celebi_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport {QuantizerCelebi} from './quantizer_celebi';\n\nconst RED = 0xffff0000;\nconst GREEN = 0xff00ff00;\nconst BLUE = 0xff0000ff;\n\ndescribe('QuantizerCelebi', () => {\n  it('1R', () => {\n    const answer = QuantizerCelebi.quantize([RED], 128);\n    expect(answer.size).toBe(1);\n    expect(answer.get(RED)).toBe(1);\n  });\n\n  it('1G', () => {\n    const answer = QuantizerCelebi.quantize([GREEN], 128);\n    expect(answer.size).toBe(1);\n    expect(answer.get(GREEN)).toBe(1);\n  });\n\n  it('1B', () => {\n    const answer = QuantizerCelebi.quantize([BLUE], 128);\n    expect(answer.size).toBe(1);\n    expect(answer.get(BLUE)).toBe(1);\n  });\n\n  it('5B', () => {\n    const answer =\n        QuantizerCelebi.quantize([BLUE, BLUE, BLUE, BLUE, BLUE], 128);\n    expect(answer.size).toBe(1);\n    expect(answer.get(BLUE)).toBe(5);\n  });\n\n  it('2R 3G', () => {\n    const answer =\n        QuantizerCelebi.quantize([RED, RED, GREEN, GREEN, GREEN], 128);\n    expect(answer.size).toBe(2);\n    expect(answer.get(RED)).toBe(2);\n    expect(answer.get(GREEN)).toBe(3);\n  });\n\n  it('1R 1G 1B', () => {\n    const answer = QuantizerCelebi.quantize([RED, GREEN, BLUE], 128);\n    expect(answer.size).toBe(3);\n    expect(answer.get(RED)).toBe(1);\n    expect(answer.get(GREEN)).toBe(1);\n    expect(answer.get(BLUE)).toBe(1);\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.d.ts
deleted file mode 100644
index b7fc37b..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.d.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Quantizes an image into a map, with keys of ARGB colors, and values of the
- * number of times that color appears in the image.
- */
-export declare class QuantizerMap {
-    /**
-     * @param pixels Colors in ARGB format.
-     * @return A Map with keys of ARGB colors, and values of the number of times
-     *     the color appears in the image.
-     */
-    static quantize(pixels: number[]): Map<number, number>;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js
deleted file mode 100644
index 1ca74fa..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js
+++ /dev/null
@@ -1,47 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as utils from '../utils/color_utils';
-/**
- * Quantizes an image into a map, with keys of ARGB colors, and values of the
- * number of times that color appears in the image.
- */
-// libmonet is designed to have a consistent API across platforms
-// and modular components that can be moved around easily. Using a class as a
-// namespace facilitates this.
-//
-// tslint:disable-next-line:class-as-namespace
-export class QuantizerMap {
-    /**
-     * @param pixels Colors in ARGB format.
-     * @return A Map with keys of ARGB colors, and values of the number of times
-     *     the color appears in the image.
-     */
-    static quantize(pixels) {
-        var _a;
-        const countByColor = new Map();
-        for (let i = 0; i < pixels.length; i++) {
-            const pixel = pixels[i];
-            const alpha = utils.alphaFromArgb(pixel);
-            if (alpha < 255) {
-                continue;
-            }
-            countByColor.set(pixel, ((_a = countByColor.get(pixel)) !== null && _a !== void 0 ? _a : 0) + 1);
-        }
-        return countByColor;
-    }
-}
-//# sourceMappingURL=quantizer_map.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js.map b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js.map
deleted file mode 100644
index a00c4cc..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"quantizer_map.js","sourceRoot":"","sources":["../../quantize/quantizer_map.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C;;;GAGG;AACH,iEAAiE;AACjE,6EAA6E;AAC7E,8BAA8B;AAC9B,EAAE;AACF,8CAA8C;AAC9C,MAAM,OAAO,YAAY;IACvB;;;;OAIG;IACH,MAAM,CAAC,QAAQ,CAAC,MAAgB;;QAC9B,MAAM,YAAY,GAAG,IAAI,GAAG,EAAkB,CAAC;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI,KAAK,GAAG,GAAG,EAAE;gBACf,SAAS;aACV;YACD,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,MAAA,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,mCAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC7D;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils';\n\n/**\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\n * number of times that color appears in the image.\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerMap {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @return A Map with keys of ARGB colors, and values of the number of times\n   *     the color appears in the image.\n   */\n  static quantize(pixels: number[]): Map<number, number> {\n    const countByColor = new Map<number, number>();\n    for (let i = 0; i < pixels.length; i++) {\n      const pixel = pixels[i];\n      const alpha = utils.alphaFromArgb(pixel);\n      if (alpha < 255) {\n        continue;\n      }\n      countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);\n    }\n    return countByColor;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.d.ts
deleted file mode 100644
index 356aa8b..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.d.ts
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * An image quantizer that improves on the speed of a standard K-Means algorithm
- * by implementing several optimizations, including deduping identical pixels
- * and a triangle inequality rule that reduces the number of comparisons needed
- * to identify which cluster a point should be moved to.
- *
- * Wsmeans stands for Weighted Square Means.
- *
- * This algorithm was designed by M. Emre Celebi, and was found in their 2011
- * paper, Improving the Performance of K-Means for Color Quantization.
- * https://arxiv.org/abs/1101.0395
- */
-export declare class QuantizerWsmeans {
-    /**
-     * @param inputPixels Colors in ARGB format.
-     * @param startingClusters Defines the initial state of the quantizer. Passing
-     *     an empty array is fine, the implementation will create its own initial
-     *     state that leads to reproducible results for the same inputs.
-     *     Passing an array that is the result of Wu quantization leads to higher
-     *     quality results.
-     * @param maxColors The number of colors to divide the image into. A lower
-     *     number of colors may be returned.
-     * @return Colors in ARGB format.
-     */
-    static quantize(inputPixels: number[], startingClusters: number[], maxColors: number): Map<number, number>;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js
deleted file mode 100644
index 414c556..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js
+++ /dev/null
@@ -1,210 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { LabPointProvider } from './lab_point_provider';
-const MAX_ITERATIONS = 10;
-const MIN_MOVEMENT_DISTANCE = 3.0;
-/**
- * An image quantizer that improves on the speed of a standard K-Means algorithm
- * by implementing several optimizations, including deduping identical pixels
- * and a triangle inequality rule that reduces the number of comparisons needed
- * to identify which cluster a point should be moved to.
- *
- * Wsmeans stands for Weighted Square Means.
- *
- * This algorithm was designed by M. Emre Celebi, and was found in their 2011
- * paper, Improving the Performance of K-Means for Color Quantization.
- * https://arxiv.org/abs/1101.0395
- */
-// libmonet is designed to have a consistent API across platforms
-// and modular components that can be moved around easily. Using a class as a
-// namespace facilitates this.
-//
-// tslint:disable-next-line:class-as-namespace
-export class QuantizerWsmeans {
-    /**
-     * @param inputPixels Colors in ARGB format.
-     * @param startingClusters Defines the initial state of the quantizer. Passing
-     *     an empty array is fine, the implementation will create its own initial
-     *     state that leads to reproducible results for the same inputs.
-     *     Passing an array that is the result of Wu quantization leads to higher
-     *     quality results.
-     * @param maxColors The number of colors to divide the image into. A lower
-     *     number of colors may be returned.
-     * @return Colors in ARGB format.
-     */
-    static quantize(inputPixels, startingClusters, maxColors) {
-        const pixelToCount = new Map();
-        const points = new Array();
-        const pixels = new Array();
-        const pointProvider = new LabPointProvider();
-        let pointCount = 0;
-        for (let i = 0; i < inputPixels.length; i++) {
-            const inputPixel = inputPixels[i];
-            const pixelCount = pixelToCount.get(inputPixel);
-            if (pixelCount === undefined) {
-                pointCount++;
-                points.push(pointProvider.fromInt(inputPixel));
-                pixels.push(inputPixel);
-                pixelToCount.set(inputPixel, 1);
-            }
-            else {
-                pixelToCount.set(inputPixel, pixelCount + 1);
-            }
-        }
-        const counts = new Array();
-        for (let i = 0; i < pointCount; i++) {
-            const pixel = pixels[i];
-            const count = pixelToCount.get(pixel);
-            if (count !== undefined) {
-                counts[i] = count;
-            }
-        }
-        let clusterCount = Math.min(maxColors, pointCount);
-        if (startingClusters.length > 0) {
-            clusterCount = Math.min(clusterCount, startingClusters.length);
-        }
-        const clusters = new Array();
-        for (let i = 0; i < startingClusters.length; i++) {
-            clusters.push(pointProvider.fromInt(startingClusters[i]));
-        }
-        const additionalClustersNeeded = clusterCount - clusters.length;
-        if (startingClusters.length === 0 && additionalClustersNeeded > 0) {
-            for (let i = 0; i < additionalClustersNeeded; i++) {
-                const l = Math.random() * 100.0;
-                const a = Math.random() * (100.0 - (-100.0) + 1) + -100;
-                const b = Math.random() * (100.0 - (-100.0) + 1) + -100;
-                clusters.push(new Array(l, a, b));
-            }
-        }
-        const clusterIndices = new Array();
-        for (let i = 0; i < pointCount; i++) {
-            clusterIndices.push(Math.floor(Math.random() * clusterCount));
-        }
-        const indexMatrix = new Array();
-        for (let i = 0; i < clusterCount; i++) {
-            indexMatrix.push(new Array());
-            for (let j = 0; j < clusterCount; j++) {
-                indexMatrix[i].push(0);
-            }
-        }
-        const distanceToIndexMatrix = new Array();
-        for (let i = 0; i < clusterCount; i++) {
-            distanceToIndexMatrix.push(new Array());
-            for (let j = 0; j < clusterCount; j++) {
-                distanceToIndexMatrix[i].push(new DistanceAndIndex());
-            }
-        }
-        const pixelCountSums = new Array();
-        for (let i = 0; i < clusterCount; i++) {
-            pixelCountSums.push(0);
-        }
-        for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {
-            for (let i = 0; i < clusterCount; i++) {
-                for (let j = i + 1; j < clusterCount; j++) {
-                    const distance = pointProvider.distance(clusters[i], clusters[j]);
-                    distanceToIndexMatrix[j][i].distance = distance;
-                    distanceToIndexMatrix[j][i].index = i;
-                    distanceToIndexMatrix[i][j].distance = distance;
-                    distanceToIndexMatrix[i][j].index = j;
-                }
-                distanceToIndexMatrix[i].sort();
-                for (let j = 0; j < clusterCount; j++) {
-                    indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;
-                }
-            }
-            let pointsMoved = 0;
-            for (let i = 0; i < pointCount; i++) {
-                const point = points[i];
-                const previousClusterIndex = clusterIndices[i];
-                const previousCluster = clusters[previousClusterIndex];
-                const previousDistance = pointProvider.distance(point, previousCluster);
-                let minimumDistance = previousDistance;
-                let newClusterIndex = -1;
-                for (let j = 0; j < clusterCount; j++) {
-                    if (distanceToIndexMatrix[previousClusterIndex][j].distance >=
-                        4 * previousDistance) {
-                        continue;
-                    }
-                    const distance = pointProvider.distance(point, clusters[j]);
-                    if (distance < minimumDistance) {
-                        minimumDistance = distance;
-                        newClusterIndex = j;
-                    }
-                }
-                if (newClusterIndex !== -1) {
-                    const distanceChange = Math.abs((Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)));
-                    if (distanceChange > MIN_MOVEMENT_DISTANCE) {
-                        pointsMoved++;
-                        clusterIndices[i] = newClusterIndex;
-                    }
-                }
-            }
-            if (pointsMoved === 0 && iteration !== 0) {
-                break;
-            }
-            const componentASums = new Array(clusterCount).fill(0);
-            const componentBSums = new Array(clusterCount).fill(0);
-            const componentCSums = new Array(clusterCount).fill(0);
-            for (let i = 0; i < clusterCount; i++) {
-                pixelCountSums[i] = 0;
-            }
-            for (let i = 0; i < pointCount; i++) {
-                const clusterIndex = clusterIndices[i];
-                const point = points[i];
-                const count = counts[i];
-                pixelCountSums[clusterIndex] += count;
-                componentASums[clusterIndex] += (point[0] * count);
-                componentBSums[clusterIndex] += (point[1] * count);
-                componentCSums[clusterIndex] += (point[2] * count);
-            }
-            for (let i = 0; i < clusterCount; i++) {
-                const count = pixelCountSums[i];
-                if (count === 0) {
-                    clusters[i] = [0.0, 0.0, 0.0];
-                    continue;
-                }
-                const a = componentASums[i] / count;
-                const b = componentBSums[i] / count;
-                const c = componentCSums[i] / count;
-                clusters[i] = [a, b, c];
-            }
-        }
-        const argbToPopulation = new Map();
-        for (let i = 0; i < clusterCount; i++) {
-            const count = pixelCountSums[i];
-            if (count === 0) {
-                continue;
-            }
-            const possibleNewCluster = pointProvider.toInt(clusters[i]);
-            if (argbToPopulation.has(possibleNewCluster)) {
-                continue;
-            }
-            argbToPopulation.set(possibleNewCluster, count);
-        }
-        return argbToPopulation;
-    }
-}
-/**
- *  A wrapper for maintaining a table of distances between K-Means clusters.
- */
-class DistanceAndIndex {
-    constructor() {
-        this.distance = -1;
-        this.index = -1;
-    }
-}
-//# sourceMappingURL=quantizer_wsmeans.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js.map b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js.map
deleted file mode 100644
index dd0280a..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"quantizer_wsmeans.js","sourceRoot":"","sources":["../../quantize/quantizer_wsmeans.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LabPointProvider} from './lab_point_provider';\n\nconst MAX_ITERATIONS = 10;\nconst MIN_MOVEMENT_DISTANCE = 3.0;\n\n/**\n * An image quantizer that improves on the speed of a standard K-Means algorithm\n * by implementing several optimizations, including deduping identical pixels\n * and a triangle inequality rule that reduces the number of comparisons needed\n * to identify which cluster a point should be moved to.\n *\n * Wsmeans stands for Weighted Square Means.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerWsmeans {\n  /**\n   * @param inputPixels Colors in ARGB format.\n   * @param startingClusters Defines the initial state of the quantizer. Passing\n   *     an empty array is fine, the implementation will create its own initial\n   *     state that leads to reproducible results for the same inputs.\n   *     Passing an array that is the result of Wu quantization leads to higher\n   *     quality results.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  static quantize(\n      inputPixels: number[], startingClusters: number[],\n      maxColors: number): Map<number, number> {\n    const pixelToCount = new Map<number, number>();\n    const points = new Array<number[]>();\n    const pixels = new Array<number>();\n    const pointProvider = new LabPointProvider();\n    let pointCount = 0;\n    for (let i = 0; i < inputPixels.length; i++) {\n      const inputPixel = inputPixels[i];\n      const pixelCount = pixelToCount.get(inputPixel);\n      if (pixelCount === undefined) {\n        pointCount++;\n        points.push(pointProvider.fromInt(inputPixel));\n        pixels.push(inputPixel);\n        pixelToCount.set(inputPixel, 1);\n      } else {\n        pixelToCount.set(inputPixel, pixelCount + 1);\n      }\n    }\n\n    const counts = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      const pixel = pixels[i];\n      const count = pixelToCount.get(pixel);\n      if (count !== undefined) {\n        counts[i] = count;\n      }\n    }\n\n    let clusterCount = Math.min(maxColors, pointCount);\n    if (startingClusters.length > 0) {\n      clusterCount = Math.min(clusterCount, startingClusters.length);\n    }\n\n    const clusters = new Array<number[]>();\n    for (let i = 0; i < startingClusters.length; i++) {\n      clusters.push(pointProvider.fromInt(startingClusters[i]));\n    }\n    const additionalClustersNeeded = clusterCount - clusters.length;\n    if (startingClusters.length === 0 && additionalClustersNeeded > 0) {\n      for (let i = 0; i < additionalClustersNeeded; i++) {\n        const l = Math.random() * 100.0;\n        const a = Math.random() * (100.0 - (-100.0) + 1) + -100;\n        const b = Math.random() * (100.0 - (-100.0) + 1) + -100;\n\n        clusters.push(new Array(l, a, b));\n      }\n    }\n\n    const clusterIndices = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      clusterIndices.push(Math.floor(Math.random() * clusterCount));\n    }\n\n    const indexMatrix = new Array<number[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      indexMatrix.push(new Array<number>());\n      for (let j = 0; j < clusterCount; j++) {\n        indexMatrix[i].push(0);\n      }\n    }\n\n    const distanceToIndexMatrix = new Array<DistanceAndIndex[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      distanceToIndexMatrix.push(new Array<DistanceAndIndex>());\n      for (let j = 0; j < clusterCount; j++) {\n        distanceToIndexMatrix[i].push(new DistanceAndIndex());\n      }\n    }\n\n\n    const pixelCountSums = new Array<number>();\n    for (let i = 0; i < clusterCount; i++) {\n      pixelCountSums.push(0);\n    }\n    for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n      for (let i = 0; i < clusterCount; i++) {\n        for (let j = i + 1; j < clusterCount; j++) {\n          const distance = pointProvider.distance(clusters[i], clusters[j]);\n          distanceToIndexMatrix[j][i].distance = distance;\n          distanceToIndexMatrix[j][i].index = i;\n          distanceToIndexMatrix[i][j].distance = distance;\n          distanceToIndexMatrix[i][j].index = j;\n        }\n        distanceToIndexMatrix[i].sort();\n        for (let j = 0; j < clusterCount; j++) {\n          indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;\n        }\n      }\n\n      let pointsMoved = 0;\n      for (let i = 0; i < pointCount; i++) {\n        const point = points[i];\n        const previousClusterIndex = clusterIndices[i];\n        const previousCluster = clusters[previousClusterIndex];\n        const previousDistance = pointProvider.distance(point, previousCluster);\n        let minimumDistance = previousDistance;\n        let newClusterIndex = -1;\n        for (let j = 0; j < clusterCount; j++) {\n          if (distanceToIndexMatrix[previousClusterIndex][j].distance >=\n              4 * previousDistance) {\n            continue;\n          }\n          const distance = pointProvider.distance(point, clusters[j]);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n        if (newClusterIndex !== -1) {\n          const distanceChange = Math.abs(\n              (Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)));\n          if (distanceChange > MIN_MOVEMENT_DISTANCE) {\n            pointsMoved++;\n            clusterIndices[i] = newClusterIndex;\n          }\n        }\n      }\n\n      if (pointsMoved === 0 && iteration !== 0) {\n        break;\n      }\n\n      const componentASums = new Array<number>(clusterCount).fill(0);\n      const componentBSums = new Array<number>(clusterCount).fill(0);\n      const componentCSums = new Array<number>(clusterCount).fill(0);\n\n      for (let i = 0; i < clusterCount; i++) {\n        pixelCountSums[i] = 0;\n      }\n      for (let i = 0; i < pointCount; i++) {\n        const clusterIndex = clusterIndices[i];\n        const point = points[i];\n        const count = counts[i];\n        pixelCountSums[clusterIndex] += count;\n        componentASums[clusterIndex] += (point[0] * count);\n        componentBSums[clusterIndex] += (point[1] * count);\n        componentCSums[clusterIndex] += (point[2] * count);\n      }\n\n      for (let i = 0; i < clusterCount; i++) {\n        const count = pixelCountSums[i];\n        if (count === 0) {\n          clusters[i] = [0.0, 0.0, 0.0];\n          continue;\n        }\n        const a = componentASums[i] / count;\n        const b = componentBSums[i] / count;\n        const c = componentCSums[i] / count;\n        clusters[i] = [a, b, c];\n      }\n    }\n\n    const argbToPopulation = new Map<number, number>();\n    for (let i = 0; i < clusterCount; i++) {\n      const count = pixelCountSums[i];\n      if (count === 0) {\n        continue;\n      }\n\n      const possibleNewCluster = pointProvider.toInt(clusters[i]);\n      if (argbToPopulation.has(possibleNewCluster)) {\n        continue;\n      }\n\n      argbToPopulation.set(possibleNewCluster, count);\n    }\n    return argbToPopulation;\n  }\n}\n\n/**\n *  A wrapper for maintaining a table of distances between K-Means clusters.\n */\nclass DistanceAndIndex {\n  distance: number = -1;\n  index: number = -1;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.d.ts b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.d.ts
deleted file mode 100644
index bb63941..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.d.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * An image quantizer that divides the image's pixels into clusters by
- * recursively cutting an RGB cube, based on the weight of pixels in each area
- * of the cube.
- *
- * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in
- * 1991.
- */
-export declare class QuantizerWu {
-    private weights;
-    private momentsR;
-    private momentsG;
-    private momentsB;
-    private moments;
-    private cubes;
-    constructor(weights?: number[], momentsR?: number[], momentsG?: number[], momentsB?: number[], moments?: number[], cubes?: Box[]);
-    /**
-     * @param pixels Colors in ARGB format.
-     * @param maxColors The number of colors to divide the image into. A lower
-     *     number of colors may be returned.
-     * @return Colors in ARGB format.
-     */
-    quantize(pixels: number[], maxColors: number): number[];
-    private constructHistogram;
-    private computeMoments;
-    private createBoxes;
-    private createResult;
-    private variance;
-    private cut;
-    private maximize;
-    private volume;
-    private bottom;
-    private top;
-    private getIndex;
-}
-/**
- * Keeps track of the state of each box created as the Wu  quantization
- * algorithm progresses through dividing the image's pixels as plotted in RGB.
- */
-declare class Box {
-    r0: number;
-    r1: number;
-    g0: number;
-    g1: number;
-    b0: number;
-    b1: number;
-    vol: number;
-    constructor(r0?: number, r1?: number, g0?: number, g1?: number, b0?: number, b1?: number, vol?: number);
-}
-export {};
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js
deleted file mode 100644
index f0c87bf..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js
+++ /dev/null
@@ -1,375 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as utils from '../utils/color_utils';
-import { QuantizerMap } from './quantizer_map';
-const INDEX_BITS = 5;
-const SIDE_LENGTH = 33; // ((1 << INDEX_INDEX_BITS) + 1)
-const TOTAL_SIZE = 35937; // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH
-const directions = {
-    RED: 'red',
-    GREEN: 'green',
-    BLUE: 'blue',
-};
-/**
- * An image quantizer that divides the image's pixels into clusters by
- * recursively cutting an RGB cube, based on the weight of pixels in each area
- * of the cube.
- *
- * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in
- * 1991.
- */
-export class QuantizerWu {
-    constructor(weights = [], momentsR = [], momentsG = [], momentsB = [], moments = [], cubes = []) {
-        this.weights = weights;
-        this.momentsR = momentsR;
-        this.momentsG = momentsG;
-        this.momentsB = momentsB;
-        this.moments = moments;
-        this.cubes = cubes;
-    }
-    /**
-     * @param pixels Colors in ARGB format.
-     * @param maxColors The number of colors to divide the image into. A lower
-     *     number of colors may be returned.
-     * @return Colors in ARGB format.
-     */
-    quantize(pixels, maxColors) {
-        this.constructHistogram(pixels);
-        this.computeMoments();
-        const createBoxesResult = this.createBoxes(maxColors);
-        const results = this.createResult(createBoxesResult.resultCount);
-        return results;
-    }
-    constructHistogram(pixels) {
-        var _a;
-        this.weights = Array.from({ length: TOTAL_SIZE }).fill(0);
-        this.momentsR = Array.from({ length: TOTAL_SIZE }).fill(0);
-        this.momentsG = Array.from({ length: TOTAL_SIZE }).fill(0);
-        this.momentsB = Array.from({ length: TOTAL_SIZE }).fill(0);
-        this.moments = Array.from({ length: TOTAL_SIZE }).fill(0);
-        const countByColor = QuantizerMap.quantize(pixels);
-        for (const [pixel, count] of countByColor.entries()) {
-            const red = utils.redFromArgb(pixel);
-            const green = utils.greenFromArgb(pixel);
-            const blue = utils.blueFromArgb(pixel);
-            const bitsToRemove = 8 - INDEX_BITS;
-            const iR = (red >> bitsToRemove) + 1;
-            const iG = (green >> bitsToRemove) + 1;
-            const iB = (blue >> bitsToRemove) + 1;
-            const index = this.getIndex(iR, iG, iB);
-            this.weights[index] = ((_a = this.weights[index]) !== null && _a !== void 0 ? _a : 0) + count;
-            this.momentsR[index] += count * red;
-            this.momentsG[index] += count * green;
-            this.momentsB[index] += count * blue;
-            this.moments[index] += count * (red * red + green * green + blue * blue);
-        }
-    }
-    computeMoments() {
-        for (let r = 1; r < SIDE_LENGTH; r++) {
-            const area = Array.from({ length: SIDE_LENGTH }).fill(0);
-            const areaR = Array.from({ length: SIDE_LENGTH }).fill(0);
-            const areaG = Array.from({ length: SIDE_LENGTH }).fill(0);
-            const areaB = Array.from({ length: SIDE_LENGTH }).fill(0);
-            const area2 = Array.from({ length: SIDE_LENGTH }).fill(0.0);
-            for (let g = 1; g < SIDE_LENGTH; g++) {
-                let line = 0;
-                let lineR = 0;
-                let lineG = 0;
-                let lineB = 0;
-                let line2 = 0.0;
-                for (let b = 1; b < SIDE_LENGTH; b++) {
-                    const index = this.getIndex(r, g, b);
-                    line += this.weights[index];
-                    lineR += this.momentsR[index];
-                    lineG += this.momentsG[index];
-                    lineB += this.momentsB[index];
-                    line2 += this.moments[index];
-                    area[b] += line;
-                    areaR[b] += lineR;
-                    areaG[b] += lineG;
-                    areaB[b] += lineB;
-                    area2[b] += line2;
-                    const previousIndex = this.getIndex(r - 1, g, b);
-                    this.weights[index] = this.weights[previousIndex] + area[b];
-                    this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];
-                    this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];
-                    this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];
-                    this.moments[index] = this.moments[previousIndex] + area2[b];
-                }
-            }
-        }
-    }
-    createBoxes(maxColors) {
-        this.cubes =
-            Array.from({ length: maxColors }).fill(0).map(() => new Box());
-        const volumeVariance = Array.from({ length: maxColors }).fill(0.0);
-        this.cubes[0].r0 = 0;
-        this.cubes[0].g0 = 0;
-        this.cubes[0].b0 = 0;
-        this.cubes[0].r1 = SIDE_LENGTH - 1;
-        this.cubes[0].g1 = SIDE_LENGTH - 1;
-        this.cubes[0].b1 = SIDE_LENGTH - 1;
-        let generatedColorCount = maxColors;
-        let next = 0;
-        for (let i = 1; i < maxColors; i++) {
-            if (this.cut(this.cubes[next], this.cubes[i])) {
-                volumeVariance[next] =
-                    this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;
-                volumeVariance[i] =
-                    this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;
-            }
-            else {
-                volumeVariance[next] = 0.0;
-                i--;
-            }
-            next = 0;
-            let temp = volumeVariance[0];
-            for (let j = 1; j <= i; j++) {
-                if (volumeVariance[j] > temp) {
-                    temp = volumeVariance[j];
-                    next = j;
-                }
-            }
-            if (temp <= 0.0) {
-                generatedColorCount = i + 1;
-                break;
-            }
-        }
-        return new CreateBoxesResult(maxColors, generatedColorCount);
-    }
-    createResult(colorCount) {
-        const colors = [];
-        for (let i = 0; i < colorCount; ++i) {
-            const cube = this.cubes[i];
-            const weight = this.volume(cube, this.weights);
-            if (weight > 0) {
-                const r = Math.round(this.volume(cube, this.momentsR) / weight);
-                const g = Math.round(this.volume(cube, this.momentsG) / weight);
-                const b = Math.round(this.volume(cube, this.momentsB) / weight);
-                const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |
-                    (b & 0x0ff);
-                colors.push(color);
-            }
-        }
-        return colors;
-    }
-    variance(cube) {
-        const dr = this.volume(cube, this.momentsR);
-        const dg = this.volume(cube, this.momentsG);
-        const db = this.volume(cube, this.momentsB);
-        const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -
-            this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -
-            this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +
-            this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -
-            this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +
-            this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +
-            this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -
-            this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];
-        const hypotenuse = dr * dr + dg * dg + db * db;
-        const volume = this.volume(cube, this.weights);
-        return xx - hypotenuse / volume;
-    }
-    cut(one, two) {
-        const wholeR = this.volume(one, this.momentsR);
-        const wholeG = this.volume(one, this.momentsG);
-        const wholeB = this.volume(one, this.momentsB);
-        const wholeW = this.volume(one, this.weights);
-        const maxRResult = this.maximize(one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB, wholeW);
-        const maxGResult = this.maximize(one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB, wholeW);
-        const maxBResult = this.maximize(one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB, wholeW);
-        let direction;
-        const maxR = maxRResult.maximum;
-        const maxG = maxGResult.maximum;
-        const maxB = maxBResult.maximum;
-        if (maxR >= maxG && maxR >= maxB) {
-            if (maxRResult.cutLocation < 0) {
-                return false;
-            }
-            direction = directions.RED;
-        }
-        else if (maxG >= maxR && maxG >= maxB) {
-            direction = directions.GREEN;
-        }
-        else {
-            direction = directions.BLUE;
-        }
-        two.r1 = one.r1;
-        two.g1 = one.g1;
-        two.b1 = one.b1;
-        switch (direction) {
-            case directions.RED:
-                one.r1 = maxRResult.cutLocation;
-                two.r0 = one.r1;
-                two.g0 = one.g0;
-                two.b0 = one.b0;
-                break;
-            case directions.GREEN:
-                one.g1 = maxGResult.cutLocation;
-                two.r0 = one.r0;
-                two.g0 = one.g1;
-                two.b0 = one.b0;
-                break;
-            case directions.BLUE:
-                one.b1 = maxBResult.cutLocation;
-                two.r0 = one.r0;
-                two.g0 = one.g0;
-                two.b0 = one.b1;
-                break;
-            default:
-                throw new Error('unexpected direction ' + direction);
-        }
-        one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);
-        two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);
-        return true;
-    }
-    maximize(cube, direction, first, last, wholeR, wholeG, wholeB, wholeW) {
-        const bottomR = this.bottom(cube, direction, this.momentsR);
-        const bottomG = this.bottom(cube, direction, this.momentsG);
-        const bottomB = this.bottom(cube, direction, this.momentsB);
-        const bottomW = this.bottom(cube, direction, this.weights);
-        let max = 0.0;
-        let cut = -1;
-        let halfR = 0;
-        let halfG = 0;
-        let halfB = 0;
-        let halfW = 0;
-        for (let i = first; i < last; i++) {
-            halfR = bottomR + this.top(cube, direction, i, this.momentsR);
-            halfG = bottomG + this.top(cube, direction, i, this.momentsG);
-            halfB = bottomB + this.top(cube, direction, i, this.momentsB);
-            halfW = bottomW + this.top(cube, direction, i, this.weights);
-            if (halfW === 0) {
-                continue;
-            }
-            let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;
-            let tempDenominator = halfW * 1.0;
-            let temp = tempNumerator / tempDenominator;
-            halfR = wholeR - halfR;
-            halfG = wholeG - halfG;
-            halfB = wholeB - halfB;
-            halfW = wholeW - halfW;
-            if (halfW === 0) {
-                continue;
-            }
-            tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;
-            tempDenominator = halfW * 1.0;
-            temp += tempNumerator / tempDenominator;
-            if (temp > max) {
-                max = temp;
-                cut = i;
-            }
-        }
-        return new MaximizeResult(cut, max);
-    }
-    volume(cube, moment) {
-        return (moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -
-            moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -
-            moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +
-            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -
-            moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +
-            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +
-            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -
-            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);
-    }
-    bottom(cube, direction, moment) {
-        switch (direction) {
-            case directions.RED:
-                return (-moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +
-                    moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +
-                    moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -
-                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);
-            case directions.GREEN:
-                return (-moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +
-                    moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +
-                    moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -
-                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);
-            case directions.BLUE:
-                return (-moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +
-                    moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +
-                    moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -
-                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);
-            default:
-                throw new Error('unexpected direction $direction');
-        }
-    }
-    top(cube, direction, position, moment) {
-        switch (direction) {
-            case directions.RED:
-                return (moment[this.getIndex(position, cube.g1, cube.b1)] -
-                    moment[this.getIndex(position, cube.g1, cube.b0)] -
-                    moment[this.getIndex(position, cube.g0, cube.b1)] +
-                    moment[this.getIndex(position, cube.g0, cube.b0)]);
-            case directions.GREEN:
-                return (moment[this.getIndex(cube.r1, position, cube.b1)] -
-                    moment[this.getIndex(cube.r1, position, cube.b0)] -
-                    moment[this.getIndex(cube.r0, position, cube.b1)] +
-                    moment[this.getIndex(cube.r0, position, cube.b0)]);
-            case directions.BLUE:
-                return (moment[this.getIndex(cube.r1, cube.g1, position)] -
-                    moment[this.getIndex(cube.r1, cube.g0, position)] -
-                    moment[this.getIndex(cube.r0, cube.g1, position)] +
-                    moment[this.getIndex(cube.r0, cube.g0, position)]);
-            default:
-                throw new Error('unexpected direction $direction');
-        }
-    }
-    getIndex(r, g, b) {
-        return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +
-            (g << INDEX_BITS) + g + b;
-    }
-}
-/**
- * Keeps track of the state of each box created as the Wu  quantization
- * algorithm progresses through dividing the image's pixels as plotted in RGB.
- */
-class Box {
-    constructor(r0 = 0, r1 = 0, g0 = 0, g1 = 0, b0 = 0, b1 = 0, vol = 0) {
-        this.r0 = r0;
-        this.r1 = r1;
-        this.g0 = g0;
-        this.g1 = g1;
-        this.b0 = b0;
-        this.b1 = b1;
-        this.vol = vol;
-    }
-}
-/**
- * Represents final result of Wu algorithm.
- */
-class CreateBoxesResult {
-    /**
-     * @param requestedCount how many colors the caller asked to be returned from
-     *     quantization.
-     * @param resultCount the actual number of colors achieved from quantization.
-     *     May be lower than the requested count.
-     */
-    constructor(requestedCount, resultCount) {
-        this.requestedCount = requestedCount;
-        this.resultCount = resultCount;
-    }
-}
-/**
- * Represents the result of calculating where to cut an existing box in such
- * a way to maximize variance between the two new boxes created by a cut.
- */
-class MaximizeResult {
-    constructor(cutLocation, maximum) {
-        this.cutLocation = cutLocation;
-        this.maximum = maximum;
-    }
-}
-//# sourceMappingURL=quantizer_wu.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js.map b/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js.map
deleted file mode 100644
index 6d4daa4..0000000
--- a/node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"quantizer_wu.js","sourceRoot":"","sources":["../../quantize/quantizer_wu.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils';\n\nimport {QuantizerMap} from './quantizer_map';\n\nconst INDEX_BITS = 5;\nconst SIDE_LENGTH = 33;    // ((1 << INDEX_INDEX_BITS) + 1)\nconst TOTAL_SIZE = 35937;  // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\n\nconst directions = {\n  RED: 'red',\n  GREEN: 'green',\n  BLUE: 'blue',\n};\n\n/**\n * An image quantizer that divides the image's pixels into clusters by\n * recursively cutting an RGB cube, based on the weight of pixels in each area\n * of the cube.\n *\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\n * 1991.\n */\nexport class QuantizerWu {\n  constructor(\n      private weights: number[] = [], private momentsR: number[] = [],\n      private momentsG: number[] = [], private momentsB: number[] = [],\n      private moments: number[] = [], private cubes: Box[] = []) {}\n\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  quantize(pixels: number[], maxColors: number): number[] {\n    this.constructHistogram(pixels);\n    this.computeMoments();\n    const createBoxesResult = this.createBoxes(maxColors);\n    const results = this.createResult(createBoxesResult.resultCount);\n    return results;\n  }\n\n  private constructHistogram(pixels: number[]) {\n    this.weights = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.momentsR = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.momentsG = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.momentsB = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n    this.moments = Array.from<number>({length: TOTAL_SIZE}).fill(0);\n\n    const countByColor = QuantizerMap.quantize(pixels);\n\n    for (const [pixel, count] of countByColor.entries()) {\n      const red = utils.redFromArgb(pixel);\n      const green = utils.greenFromArgb(pixel);\n      const blue = utils.blueFromArgb(pixel);\n\n      const bitsToRemove = 8 - INDEX_BITS;\n      const iR = (red >> bitsToRemove) + 1;\n      const iG = (green >> bitsToRemove) + 1;\n      const iB = (blue >> bitsToRemove) + 1;\n      const index = this.getIndex(iR, iG, iB);\n\n      this.weights[index] = (this.weights[index] ?? 0) + count;\n      this.momentsR[index] += count * red;\n      this.momentsG[index] += count * green;\n      this.momentsB[index] += count * blue;\n      this.moments[index] += count * (red * red + green * green + blue * blue);\n    }\n  }\n\n  private computeMoments() {\n    for (let r = 1; r < SIDE_LENGTH; r++) {\n      const area = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const areaR = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const areaG = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const areaB = Array.from<number>({length: SIDE_LENGTH}).fill(0);\n      const area2 = Array.from<number>({length: SIDE_LENGTH}).fill(0.0);\n      for (let g = 1; g < SIDE_LENGTH; g++) {\n        let line = 0;\n        let lineR = 0;\n        let lineG = 0;\n        let lineB = 0;\n        let line2 = 0.0;\n        for (let b = 1; b < SIDE_LENGTH; b++) {\n          const index = this.getIndex(r, g, b);\n          line += this.weights[index];\n          lineR += this.momentsR[index];\n          lineG += this.momentsG[index];\n          lineB += this.momentsB[index];\n          line2 += this.moments[index];\n\n          area[b] += line;\n          areaR[b] += lineR;\n          areaG[b] += lineG;\n          areaB[b] += lineB;\n          area2[b] += line2;\n\n          const previousIndex = this.getIndex(r - 1, g, b);\n          this.weights[index] = this.weights[previousIndex] + area[b];\n          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\n          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\n          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\n          this.moments[index] = this.moments[previousIndex] + area2[b];\n        }\n      }\n    }\n  }\n\n  private createBoxes(maxColors: number): CreateBoxesResult {\n    this.cubes =\n        Array.from<number>({length: maxColors}).fill(0).map(() => new Box());\n    const volumeVariance = Array.from<number>({length: maxColors}).fill(0.0);\n    this.cubes[0].r0 = 0;\n    this.cubes[0].g0 = 0;\n    this.cubes[0].b0 = 0;\n\n    this.cubes[0].r1 = SIDE_LENGTH - 1;\n    this.cubes[0].g1 = SIDE_LENGTH - 1;\n    this.cubes[0].b1 = SIDE_LENGTH - 1;\n\n    let generatedColorCount = maxColors;\n    let next = 0;\n    for (let i = 1; i < maxColors; i++) {\n      if (this.cut(this.cubes[next], this.cubes[i])) {\n        volumeVariance[next] =\n            this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\n        volumeVariance[i] =\n            this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\n      } else {\n        volumeVariance[next] = 0.0;\n        i--;\n      }\n\n      next = 0;\n      let temp = volumeVariance[0];\n      for (let j = 1; j <= i; j++) {\n        if (volumeVariance[j] > temp) {\n          temp = volumeVariance[j];\n          next = j;\n        }\n      }\n      if (temp <= 0.0) {\n        generatedColorCount = i + 1;\n        break;\n      }\n    }\n    return new CreateBoxesResult(maxColors, generatedColorCount);\n  }\n\n  private createResult(colorCount: number): number[] {\n    const colors: number[] = [];\n    for (let i = 0; i < colorCount; ++i) {\n      const cube = this.cubes[i];\n      const weight = this.volume(cube, this.weights);\n      if (weight > 0) {\n        const r = Math.round(this.volume(cube, this.momentsR) / weight);\n        const g = Math.round(this.volume(cube, this.momentsG) / weight);\n        const b = Math.round(this.volume(cube, this.momentsB) / weight);\n        const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |\n            (b & 0x0ff);\n        colors.push(color);\n      }\n    }\n    return colors;\n  }\n\n  private variance(cube: Box) {\n    const dr = this.volume(cube, this.momentsR);\n    const dg = this.volume(cube, this.momentsG);\n    const db = this.volume(cube, this.momentsB);\n    const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n        this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n        this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n        this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n        this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n        this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n        this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n        this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\n    const hypotenuse = dr * dr + dg * dg + db * db;\n    const volume = this.volume(cube, this.weights);\n    return xx - hypotenuse / volume;\n  }\n\n  private cut(one: Box, two: Box) {\n    const wholeR = this.volume(one, this.momentsR);\n    const wholeG = this.volume(one, this.momentsG);\n    const wholeB = this.volume(one, this.momentsB);\n    const wholeW = this.volume(one, this.weights);\n\n    const maxRResult = this.maximize(\n        one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB,\n        wholeW);\n    const maxGResult = this.maximize(\n        one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB,\n        wholeW);\n    const maxBResult = this.maximize(\n        one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB,\n        wholeW);\n\n    let direction;\n    const maxR = maxRResult.maximum;\n    const maxG = maxGResult.maximum;\n    const maxB = maxBResult.maximum;\n    if (maxR >= maxG && maxR >= maxB) {\n      if (maxRResult.cutLocation < 0) {\n        return false;\n      }\n      direction = directions.RED;\n    } else if (maxG >= maxR && maxG >= maxB) {\n      direction = directions.GREEN;\n    } else {\n      direction = directions.BLUE;\n    }\n\n    two.r1 = one.r1;\n    two.g1 = one.g1;\n    two.b1 = one.b1;\n\n    switch (direction) {\n      case directions.RED:\n        one.r1 = maxRResult.cutLocation;\n        two.r0 = one.r1;\n        two.g0 = one.g0;\n        two.b0 = one.b0;\n        break;\n      case directions.GREEN:\n        one.g1 = maxGResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g1;\n        two.b0 = one.b0;\n        break;\n      case directions.BLUE:\n        one.b1 = maxBResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g0;\n        two.b0 = one.b1;\n        break;\n      default:\n        throw new Error('unexpected direction ' + direction);\n    }\n\n    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\n    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\n    return true;\n  }\n\n  private maximize(\n      cube: Box, direction: string, first: number, last: number, wholeR: number,\n      wholeG: number, wholeB: number, wholeW: number) {\n    const bottomR = this.bottom(cube, direction, this.momentsR);\n    const bottomG = this.bottom(cube, direction, this.momentsG);\n    const bottomB = this.bottom(cube, direction, this.momentsB);\n    const bottomW = this.bottom(cube, direction, this.weights);\n\n    let max = 0.0;\n    let cut = -1;\n\n    let halfR = 0;\n    let halfG = 0;\n    let halfB = 0;\n    let halfW = 0;\n    for (let i = first; i < last; i++) {\n      halfR = bottomR + this.top(cube, direction, i, this.momentsR);\n      halfG = bottomG + this.top(cube, direction, i, this.momentsG);\n      halfB = bottomB + this.top(cube, direction, i, this.momentsB);\n      halfW = bottomW + this.top(cube, direction, i, this.weights);\n      if (halfW === 0) {\n        continue;\n      }\n\n      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      let tempDenominator = halfW * 1.0;\n      let temp = tempNumerator / tempDenominator;\n\n      halfR = wholeR - halfR;\n      halfG = wholeG - halfG;\n      halfB = wholeB - halfB;\n      halfW = wholeW - halfW;\n      if (halfW === 0) {\n        continue;\n      }\n\n      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      tempDenominator = halfW * 1.0;\n      temp += tempNumerator / tempDenominator;\n\n      if (temp > max) {\n        max = temp;\n        cut = i;\n      }\n    }\n    return new MaximizeResult(cut, max);\n  }\n\n  private volume(cube: Box, moment: number[]) {\n    return (\n        moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n        moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n        moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n        moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n        moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n        moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n        moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n        moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n  }\n\n  private bottom(cube: Box, direction: string, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n            -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      case directions.GREEN:\n        return (\n            -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      case directions.BLUE:\n        return (\n            -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      default:\n        throw new Error('unexpected direction $direction');\n    }\n  }\n\n  private top(\n      cube: Box, direction: string, position: number, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n            moment[this.getIndex(position, cube.g1, cube.b1)] -\n            moment[this.getIndex(position, cube.g1, cube.b0)] -\n            moment[this.getIndex(position, cube.g0, cube.b1)] +\n            moment[this.getIndex(position, cube.g0, cube.b0)]);\n      case directions.GREEN:\n        return (\n            moment[this.getIndex(cube.r1, position, cube.b1)] -\n            moment[this.getIndex(cube.r1, position, cube.b0)] -\n            moment[this.getIndex(cube.r0, position, cube.b1)] +\n            moment[this.getIndex(cube.r0, position, cube.b0)]);\n      case directions.BLUE:\n        return (\n            moment[this.getIndex(cube.r1, cube.g1, position)] -\n            moment[this.getIndex(cube.r1, cube.g0, position)] -\n            moment[this.getIndex(cube.r0, cube.g1, position)] +\n            moment[this.getIndex(cube.r0, cube.g0, position)]);\n      default:\n        throw new Error('unexpected direction $direction');\n    }\n  }\n\n  private getIndex(r: number, g: number, b: number): number {\n    return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +\n        (g << INDEX_BITS) + g + b;\n  }\n}\n\n/**\n * Keeps track of the state of each box created as the Wu  quantization\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\n */\nclass Box {\n  constructor(\n      public r0: number = 0, public r1: number = 0, public g0: number = 0,\n      public g1: number = 0, public b0: number = 0, public b1: number = 0,\n      public vol: number = 0) {}\n}\n\n/**\n * Represents final result of Wu algorithm.\n */\nclass CreateBoxesResult {\n  /**\n   * @param requestedCount how many colors the caller asked to be returned from\n   *     quantization.\n   * @param resultCount the actual number of colors achieved from quantization.\n   *     May be lower than the requested count.\n   */\n  constructor(public requestedCount: number, public resultCount: number) {}\n}\n\n/**\n * Represents the result of calculating where to cut an existing box in such\n * a way to maximize variance between the two new boxes created by a cut.\n */\nclass MaximizeResult {\n  constructor(public cutLocation: number, public maximum: number) {}\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme.d.ts b/node_modules/@material/material-color-utilities/dist/scheme/scheme.d.ts
deleted file mode 100644
index 770843a..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme.d.ts
+++ /dev/null
@@ -1,112 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { CorePalette } from '../palettes/core_palette';
-/**
- * Represents a Material color scheme, a mapping of color roles to colors.
- */
-export declare class Scheme {
-    private readonly props;
-    get primary(): number;
-    get onPrimary(): number;
-    get primaryContainer(): number;
-    get onPrimaryContainer(): number;
-    get secondary(): number;
-    get onSecondary(): number;
-    get secondaryContainer(): number;
-    get onSecondaryContainer(): number;
-    get tertiary(): number;
-    get onTertiary(): number;
-    get tertiaryContainer(): number;
-    get onTertiaryContainer(): number;
-    get error(): number;
-    get onError(): number;
-    get errorContainer(): number;
-    get onErrorContainer(): number;
-    get background(): number;
-    get onBackground(): number;
-    get surface(): number;
-    get onSurface(): number;
-    get surfaceVariant(): number;
-    get onSurfaceVariant(): number;
-    get outline(): number;
-    get outlineVariant(): number;
-    get shadow(): number;
-    get scrim(): number;
-    get inverseSurface(): number;
-    get inverseOnSurface(): number;
-    get inversePrimary(): number;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Material color scheme, based on the color's hue.
-     */
-    static light(argb: number): Scheme;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Material color scheme, based on the color's hue.
-     */
-    static dark(argb: number): Scheme;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Material content color scheme, based on the color's hue.
-     */
-    static lightContent(argb: number): Scheme;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Material content color scheme, based on the color's hue.
-     */
-    static darkContent(argb: number): Scheme;
-    /**
-     * Light scheme from core palette
-     */
-    static lightFromCorePalette(core: CorePalette): Scheme;
-    /**
-     * Dark scheme from core palette
-     */
-    static darkFromCorePalette(core: CorePalette): Scheme;
-    private constructor();
-    toJSON(): {
-        primary: number;
-        onPrimary: number;
-        primaryContainer: number;
-        onPrimaryContainer: number;
-        secondary: number;
-        onSecondary: number;
-        secondaryContainer: number;
-        onSecondaryContainer: number;
-        tertiary: number;
-        onTertiary: number;
-        tertiaryContainer: number;
-        onTertiaryContainer: number;
-        error: number;
-        onError: number;
-        errorContainer: number;
-        onErrorContainer: number;
-        background: number;
-        onBackground: number;
-        surface: number;
-        onSurface: number;
-        surfaceVariant: number;
-        onSurfaceVariant: number;
-        outline: number;
-        outlineVariant: number;
-        shadow: number;
-        scrim: number;
-        inverseSurface: number;
-        inverseOnSurface: number;
-        inversePrimary: number;
-    };
-}
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme.js b/node_modules/@material/material-color-utilities/dist/scheme/scheme.js
deleted file mode 100644
index e6ce9df..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme.js
+++ /dev/null
@@ -1,217 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-// This file is automatically generated. Do not modify it.
-import { CorePalette } from '../palettes/core_palette';
-/**
- * Represents a Material color scheme, a mapping of color roles to colors.
- */
-export class Scheme {
-    constructor(props) {
-        this.props = props;
-    }
-    get primary() {
-        return this.props.primary;
-    }
-    get onPrimary() {
-        return this.props.onPrimary;
-    }
-    get primaryContainer() {
-        return this.props.primaryContainer;
-    }
-    get onPrimaryContainer() {
-        return this.props.onPrimaryContainer;
-    }
-    get secondary() {
-        return this.props.secondary;
-    }
-    get onSecondary() {
-        return this.props.onSecondary;
-    }
-    get secondaryContainer() {
-        return this.props.secondaryContainer;
-    }
-    get onSecondaryContainer() {
-        return this.props.onSecondaryContainer;
-    }
-    get tertiary() {
-        return this.props.tertiary;
-    }
-    get onTertiary() {
-        return this.props.onTertiary;
-    }
-    get tertiaryContainer() {
-        return this.props.tertiaryContainer;
-    }
-    get onTertiaryContainer() {
-        return this.props.onTertiaryContainer;
-    }
-    get error() {
-        return this.props.error;
-    }
-    get onError() {
-        return this.props.onError;
-    }
-    get errorContainer() {
-        return this.props.errorContainer;
-    }
-    get onErrorContainer() {
-        return this.props.onErrorContainer;
-    }
-    get background() {
-        return this.props.background;
-    }
-    get onBackground() {
-        return this.props.onBackground;
-    }
-    get surface() {
-        return this.props.surface;
-    }
-    get onSurface() {
-        return this.props.onSurface;
-    }
-    get surfaceVariant() {
-        return this.props.surfaceVariant;
-    }
-    get onSurfaceVariant() {
-        return this.props.onSurfaceVariant;
-    }
-    get outline() {
-        return this.props.outline;
-    }
-    get outlineVariant() {
-        return this.props.outlineVariant;
-    }
-    get shadow() {
-        return this.props.shadow;
-    }
-    get scrim() {
-        return this.props.scrim;
-    }
-    get inverseSurface() {
-        return this.props.inverseSurface;
-    }
-    get inverseOnSurface() {
-        return this.props.inverseOnSurface;
-    }
-    get inversePrimary() {
-        return this.props.inversePrimary;
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Material color scheme, based on the color's hue.
-     */
-    static light(argb) {
-        return Scheme.lightFromCorePalette(CorePalette.of(argb));
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Material color scheme, based on the color's hue.
-     */
-    static dark(argb) {
-        return Scheme.darkFromCorePalette(CorePalette.of(argb));
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Material content color scheme, based on the color's hue.
-     */
-    static lightContent(argb) {
-        return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Material content color scheme, based on the color's hue.
-     */
-    static darkContent(argb) {
-        return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));
-    }
-    /**
-     * Light scheme from core palette
-     */
-    static lightFromCorePalette(core) {
-        return new Scheme({
-            primary: core.a1.tone(40),
-            onPrimary: core.a1.tone(100),
-            primaryContainer: core.a1.tone(90),
-            onPrimaryContainer: core.a1.tone(10),
-            secondary: core.a2.tone(40),
-            onSecondary: core.a2.tone(100),
-            secondaryContainer: core.a2.tone(90),
-            onSecondaryContainer: core.a2.tone(10),
-            tertiary: core.a3.tone(40),
-            onTertiary: core.a3.tone(100),
-            tertiaryContainer: core.a3.tone(90),
-            onTertiaryContainer: core.a3.tone(10),
-            error: core.error.tone(40),
-            onError: core.error.tone(100),
-            errorContainer: core.error.tone(90),
-            onErrorContainer: core.error.tone(10),
-            background: core.n1.tone(99),
-            onBackground: core.n1.tone(10),
-            surface: core.n1.tone(99),
-            onSurface: core.n1.tone(10),
-            surfaceVariant: core.n2.tone(90),
-            onSurfaceVariant: core.n2.tone(30),
-            outline: core.n2.tone(50),
-            outlineVariant: core.n2.tone(80),
-            shadow: core.n1.tone(0),
-            scrim: core.n1.tone(0),
-            inverseSurface: core.n1.tone(20),
-            inverseOnSurface: core.n1.tone(95),
-            inversePrimary: core.a1.tone(80)
-        });
-    }
-    /**
-     * Dark scheme from core palette
-     */
-    static darkFromCorePalette(core) {
-        return new Scheme({
-            primary: core.a1.tone(80),
-            onPrimary: core.a1.tone(20),
-            primaryContainer: core.a1.tone(30),
-            onPrimaryContainer: core.a1.tone(90),
-            secondary: core.a2.tone(80),
-            onSecondary: core.a2.tone(20),
-            secondaryContainer: core.a2.tone(30),
-            onSecondaryContainer: core.a2.tone(90),
-            tertiary: core.a3.tone(80),
-            onTertiary: core.a3.tone(20),
-            tertiaryContainer: core.a3.tone(30),
-            onTertiaryContainer: core.a3.tone(90),
-            error: core.error.tone(80),
-            onError: core.error.tone(20),
-            errorContainer: core.error.tone(30),
-            onErrorContainer: core.error.tone(80),
-            background: core.n1.tone(10),
-            onBackground: core.n1.tone(90),
-            surface: core.n1.tone(10),
-            onSurface: core.n1.tone(90),
-            surfaceVariant: core.n2.tone(30),
-            onSurfaceVariant: core.n2.tone(80),
-            outline: core.n2.tone(60),
-            outlineVariant: core.n2.tone(30),
-            shadow: core.n1.tone(0),
-            scrim: core.n1.tone(0),
-            inverseSurface: core.n1.tone(90),
-            inverseOnSurface: core.n1.tone(20),
-            inversePrimary: core.a1.tone(40)
-        });
-    }
-    toJSON() {
-        return Object.assign({}, this.props);
-    }
-}
-//# sourceMappingURL=scheme.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme.js.map b/node_modules/@material/material-color-utilities/dist/scheme/scheme.js.map
deleted file mode 100644
index fbe6c6c..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"scheme.js","sourceRoot":"","sources":["../../scheme/scheme.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport {CorePalette} from '../palettes/core_palette';\n\n/**\n * Represents a Material color scheme, a mapping of color roles to colors.\n */\nexport class Scheme {\n  get primary(): number {\n    return this.props.primary;\n  }\n\n  get onPrimary(): number {\n    return this.props.onPrimary;\n  }\n\n  get primaryContainer(): number {\n    return this.props.primaryContainer;\n  }\n\n  get onPrimaryContainer(): number {\n    return this.props.onPrimaryContainer;\n  }\n\n  get secondary(): number {\n    return this.props.secondary;\n  }\n\n  get onSecondary(): number {\n    return this.props.onSecondary;\n  }\n\n  get secondaryContainer(): number {\n    return this.props.secondaryContainer;\n  }\n\n  get onSecondaryContainer(): number {\n    return this.props.onSecondaryContainer;\n  }\n\n  get tertiary(): number {\n    return this.props.tertiary;\n  }\n\n  get onTertiary(): number {\n    return this.props.onTertiary;\n  }\n\n  get tertiaryContainer(): number {\n    return this.props.tertiaryContainer;\n  }\n\n  get onTertiaryContainer(): number {\n    return this.props.onTertiaryContainer;\n  }\n\n  get error(): number {\n    return this.props.error;\n  }\n\n  get onError(): number {\n    return this.props.onError;\n  }\n\n  get errorContainer(): number {\n    return this.props.errorContainer;\n  }\n\n  get onErrorContainer(): number {\n    return this.props.onErrorContainer;\n  }\n\n  get background(): number {\n    return this.props.background;\n  }\n\n  get onBackground(): number {\n    return this.props.onBackground;\n  }\n\n  get surface(): number {\n    return this.props.surface;\n  }\n\n  get onSurface(): number {\n    return this.props.onSurface;\n  }\n\n  get surfaceVariant(): number {\n    return this.props.surfaceVariant;\n  }\n\n  get onSurfaceVariant(): number {\n    return this.props.onSurfaceVariant;\n  }\n\n  get outline(): number {\n    return this.props.outline;\n  }\n\n  get outlineVariant(): number {\n    return this.props.outlineVariant;\n  }\n\n  get shadow(): number {\n    return this.props.shadow;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  get inverseSurface(): number {\n    return this.props.inverseSurface;\n  }\n\n  get inverseOnSurface(): number {\n    return this.props.inverseOnSurface;\n  }\n\n  get inversePrimary(): number {\n    return this.props.inversePrimary;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material content color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material content color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(40),\n      onPrimary: core.a1.tone(100),\n      primaryContainer: core.a1.tone(90),\n      onPrimaryContainer: core.a1.tone(10),\n      secondary: core.a2.tone(40),\n      onSecondary: core.a2.tone(100),\n      secondaryContainer: core.a2.tone(90),\n      onSecondaryContainer: core.a2.tone(10),\n      tertiary: core.a3.tone(40),\n      onTertiary: core.a3.tone(100),\n      tertiaryContainer: core.a3.tone(90),\n      onTertiaryContainer: core.a3.tone(10),\n      error: core.error.tone(40),\n      onError: core.error.tone(100),\n      errorContainer: core.error.tone(90),\n      onErrorContainer: core.error.tone(10),\n      background: core.n1.tone(99),\n      onBackground: core.n1.tone(10),\n      surface: core.n1.tone(99),\n      onSurface: core.n1.tone(10),\n      surfaceVariant: core.n2.tone(90),\n      onSurfaceVariant: core.n2.tone(30),\n      outline: core.n2.tone(50),\n      outlineVariant: core.n2.tone(80),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(20),\n      inverseOnSurface: core.n1.tone(95),\n      inversePrimary: core.a1.tone(80)\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(80),\n      onPrimary: core.a1.tone(20),\n      primaryContainer: core.a1.tone(30),\n      onPrimaryContainer: core.a1.tone(90),\n      secondary: core.a2.tone(80),\n      onSecondary: core.a2.tone(20),\n      secondaryContainer: core.a2.tone(30),\n      onSecondaryContainer: core.a2.tone(90),\n      tertiary: core.a3.tone(80),\n      onTertiary: core.a3.tone(20),\n      tertiaryContainer: core.a3.tone(30),\n      onTertiaryContainer: core.a3.tone(90),\n      error: core.error.tone(80),\n      onError: core.error.tone(20),\n      errorContainer: core.error.tone(30),\n      onErrorContainer: core.error.tone(80),\n      background: core.n1.tone(10),\n      onBackground: core.n1.tone(90),\n      surface: core.n1.tone(10),\n      onSurface: core.n1.tone(90),\n      surfaceVariant: core.n2.tone(30),\n      onSurfaceVariant: core.n2.tone(80),\n      outline: core.n2.tone(60),\n      outlineVariant: core.n2.tone(30),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(90),\n      inverseOnSurface: core.n1.tone(20),\n      inversePrimary: core.a1.tone(40)\n    });\n  }\n\n  private constructor(private readonly props: {\n    primary: number,\n    onPrimary: number,\n    primaryContainer: number,\n    onPrimaryContainer: number,\n    secondary: number,\n    onSecondary: number,\n    secondaryContainer: number,\n    onSecondaryContainer: number,\n    tertiary: number,\n    onTertiary: number,\n    tertiaryContainer: number,\n    onTertiaryContainer: number,\n    error: number,\n    onError: number,\n    errorContainer: number,\n    onErrorContainer: number,\n    background: number,\n    onBackground: number,\n    surface: number,\n    onSurface: number,\n    surfaceVariant: number,\n    onSurfaceVariant: number,\n    outline: number,\n    outlineVariant: number,\n    shadow: number,\n    scrim: number,\n    inverseSurface: number,\n    inverseOnSurface: number,\n    inversePrimary: number\n  }) {}\n\n  toJSON() {\n    return {\n      ...this.props\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.d.ts b/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.d.ts
deleted file mode 100644
index 02622df..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.d.ts
+++ /dev/null
@@ -1,104 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { CorePalette } from '../palettes/core_palette';
-/**
- * Represents an Android 12 color scheme, a mapping of color roles to colors.
- */
-export declare class SchemeAndroid {
-    private readonly props;
-    get colorAccentPrimary(): number;
-    get colorAccentPrimaryVariant(): number;
-    get colorAccentSecondary(): number;
-    get colorAccentSecondaryVariant(): number;
-    get colorAccentTertiary(): number;
-    get colorAccentTertiaryVariant(): number;
-    get textColorPrimary(): number;
-    get textColorSecondary(): number;
-    get textColorTertiary(): number;
-    get textColorPrimaryInverse(): number;
-    get textColorSecondaryInverse(): number;
-    get textColorTertiaryInverse(): number;
-    get colorBackground(): number;
-    get colorBackgroundFloating(): number;
-    get colorSurface(): number;
-    get colorSurfaceVariant(): number;
-    get colorSurfaceHighlight(): number;
-    get surfaceHeader(): number;
-    get underSurface(): number;
-    get offState(): number;
-    get accentSurface(): number;
-    get textPrimaryOnAccent(): number;
-    get textSecondaryOnAccent(): number;
-    get volumeBackground(): number;
-    get scrim(): number;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Material color scheme, based on the color's hue.
-     */
-    static light(argb: number): SchemeAndroid;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Material color scheme, based on the color's hue.
-     */
-    static dark(argb: number): SchemeAndroid;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Android color scheme, based on the color's hue.
-     */
-    static lightContent(argb: number): SchemeAndroid;
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Android color scheme, based on the color's hue.
-     */
-    static darkContent(argb: number): SchemeAndroid;
-    /**
-     * Light scheme from core palette
-     */
-    static lightFromCorePalette(core: CorePalette): SchemeAndroid;
-    /**
-     * Dark scheme from core palette
-     */
-    static darkFromCorePalette(core: CorePalette): SchemeAndroid;
-    private constructor();
-    toJSON(): {
-        colorAccentPrimary: number;
-        colorAccentPrimaryVariant: number;
-        colorAccentSecondary: number;
-        colorAccentSecondaryVariant: number;
-        colorAccentTertiary: number;
-        colorAccentTertiaryVariant: number;
-        textColorPrimary: number;
-        textColorSecondary: number;
-        textColorTertiary: number;
-        textColorPrimaryInverse: number;
-        textColorSecondaryInverse: number;
-        textColorTertiaryInverse: number;
-        colorBackground: number;
-        colorBackgroundFloating: number;
-        colorSurface: number;
-        colorSurfaceVariant: number;
-        colorSurfaceHighlight: number;
-        surfaceHeader: number;
-        underSurface: number;
-        offState: number;
-        accentSurface: number;
-        textPrimaryOnAccent: number;
-        textSecondaryOnAccent: number;
-        volumeBackground: number;
-        scrim: number;
-    };
-}
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js b/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js
deleted file mode 100644
index 2645f12..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js
+++ /dev/null
@@ -1,200 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { CorePalette } from '../palettes/core_palette';
-/**
- * Represents an Android 12 color scheme, a mapping of color roles to colors.
- */
-export class SchemeAndroid {
-    constructor(props) {
-        this.props = props;
-    }
-    get colorAccentPrimary() {
-        return this.props.colorAccentPrimary;
-    }
-    get colorAccentPrimaryVariant() {
-        return this.props.colorAccentPrimaryVariant;
-    }
-    get colorAccentSecondary() {
-        return this.props.colorAccentSecondary;
-    }
-    get colorAccentSecondaryVariant() {
-        return this.props.colorAccentSecondaryVariant;
-    }
-    get colorAccentTertiary() {
-        return this.props.colorAccentTertiary;
-    }
-    get colorAccentTertiaryVariant() {
-        return this.props.colorAccentTertiaryVariant;
-    }
-    get textColorPrimary() {
-        return this.props.textColorPrimary;
-    }
-    get textColorSecondary() {
-        return this.props.textColorSecondary;
-    }
-    get textColorTertiary() {
-        return this.props.textColorTertiary;
-    }
-    get textColorPrimaryInverse() {
-        return this.props.textColorPrimaryInverse;
-    }
-    get textColorSecondaryInverse() {
-        return this.props.textColorSecondaryInverse;
-    }
-    get textColorTertiaryInverse() {
-        return this.props.textColorTertiaryInverse;
-    }
-    get colorBackground() {
-        return this.props.colorBackground;
-    }
-    get colorBackgroundFloating() {
-        return this.props.colorBackgroundFloating;
-    }
-    get colorSurface() {
-        return this.props.colorSurface;
-    }
-    get colorSurfaceVariant() {
-        return this.props.colorSurfaceVariant;
-    }
-    get colorSurfaceHighlight() {
-        return this.props.colorSurfaceHighlight;
-    }
-    get surfaceHeader() {
-        return this.props.surfaceHeader;
-    }
-    get underSurface() {
-        return this.props.underSurface;
-    }
-    get offState() {
-        return this.props.offState;
-    }
-    get accentSurface() {
-        return this.props.accentSurface;
-    }
-    get textPrimaryOnAccent() {
-        return this.props.textPrimaryOnAccent;
-    }
-    get textSecondaryOnAccent() {
-        return this.props.textSecondaryOnAccent;
-    }
-    get volumeBackground() {
-        return this.props.volumeBackground;
-    }
-    get scrim() {
-        return this.props.scrim;
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Material color scheme, based on the color's hue.
-     */
-    static light(argb) {
-        const core = CorePalette.of(argb);
-        return SchemeAndroid.lightFromCorePalette(core);
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Material color scheme, based on the color's hue.
-     */
-    static dark(argb) {
-        const core = CorePalette.of(argb);
-        return SchemeAndroid.darkFromCorePalette(core);
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Light Android color scheme, based on the color's hue.
-     */
-    static lightContent(argb) {
-        const core = CorePalette.contentOf(argb);
-        return SchemeAndroid.lightFromCorePalette(core);
-    }
-    /**
-     * @param argb ARGB representation of a color.
-     * @return Dark Android color scheme, based on the color's hue.
-     */
-    static darkContent(argb) {
-        const core = CorePalette.contentOf(argb);
-        return SchemeAndroid.darkFromCorePalette(core);
-    }
-    /**
-     * Light scheme from core palette
-     */
-    static lightFromCorePalette(core) {
-        return new SchemeAndroid({
-            colorAccentPrimary: core.a1.tone(90),
-            colorAccentPrimaryVariant: core.a1.tone(40),
-            colorAccentSecondary: core.a2.tone(90),
-            colorAccentSecondaryVariant: core.a2.tone(40),
-            colorAccentTertiary: core.a3.tone(90),
-            colorAccentTertiaryVariant: core.a3.tone(40),
-            textColorPrimary: core.n1.tone(10),
-            textColorSecondary: core.n2.tone(30),
-            textColorTertiary: core.n2.tone(50),
-            textColorPrimaryInverse: core.n1.tone(95),
-            textColorSecondaryInverse: core.n1.tone(80),
-            textColorTertiaryInverse: core.n1.tone(60),
-            colorBackground: core.n1.tone(95),
-            colorBackgroundFloating: core.n1.tone(98),
-            colorSurface: core.n1.tone(98),
-            colorSurfaceVariant: core.n1.tone(90),
-            colorSurfaceHighlight: core.n1.tone(100),
-            surfaceHeader: core.n1.tone(90),
-            underSurface: core.n1.tone(0),
-            offState: core.n1.tone(20),
-            accentSurface: core.a2.tone(95),
-            textPrimaryOnAccent: core.n1.tone(10),
-            textSecondaryOnAccent: core.n2.tone(30),
-            volumeBackground: core.n1.tone(25),
-            scrim: core.n1.tone(80),
-        });
-    }
-    /**
-     * Dark scheme from core palette
-     */
-    static darkFromCorePalette(core) {
-        return new SchemeAndroid({
-            colorAccentPrimary: core.a1.tone(90),
-            colorAccentPrimaryVariant: core.a1.tone(70),
-            colorAccentSecondary: core.a2.tone(90),
-            colorAccentSecondaryVariant: core.a2.tone(70),
-            colorAccentTertiary: core.a3.tone(90),
-            colorAccentTertiaryVariant: core.a3.tone(70),
-            textColorPrimary: core.n1.tone(95),
-            textColorSecondary: core.n2.tone(80),
-            textColorTertiary: core.n2.tone(60),
-            textColorPrimaryInverse: core.n1.tone(10),
-            textColorSecondaryInverse: core.n1.tone(30),
-            textColorTertiaryInverse: core.n1.tone(50),
-            colorBackground: core.n1.tone(10),
-            colorBackgroundFloating: core.n1.tone(10),
-            colorSurface: core.n1.tone(20),
-            colorSurfaceVariant: core.n1.tone(30),
-            colorSurfaceHighlight: core.n1.tone(35),
-            surfaceHeader: core.n1.tone(30),
-            underSurface: core.n1.tone(0),
-            offState: core.n1.tone(20),
-            accentSurface: core.a2.tone(95),
-            textPrimaryOnAccent: core.n1.tone(10),
-            textSecondaryOnAccent: core.n2.tone(30),
-            volumeBackground: core.n1.tone(25),
-            scrim: core.n1.tone(80),
-        });
-    }
-    toJSON() {
-        return Object.assign({}, this.props);
-    }
-}
-//# sourceMappingURL=scheme_android.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js.map b/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js.map
deleted file mode 100644
index 2b90c44..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"scheme_android.js","sourceRoot":"","sources":["../../scheme/scheme_android.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CorePalette} from '../palettes/core_palette';\n\n/**\n * Represents an Android 12 color scheme, a mapping of color roles to colors.\n */\nexport class SchemeAndroid {\n  get colorAccentPrimary(): number {\n    return this.props.colorAccentPrimary;\n  }\n\n  get colorAccentPrimaryVariant(): number {\n    return this.props.colorAccentPrimaryVariant;\n  }\n\n  get colorAccentSecondary(): number {\n    return this.props.colorAccentSecondary;\n  }\n\n  get colorAccentSecondaryVariant(): number {\n    return this.props.colorAccentSecondaryVariant;\n  }\n\n  get colorAccentTertiary(): number {\n    return this.props.colorAccentTertiary;\n  }\n\n  get colorAccentTertiaryVariant(): number {\n    return this.props.colorAccentTertiaryVariant;\n  }\n\n  get textColorPrimary(): number {\n    return this.props.textColorPrimary;\n  }\n\n  get textColorSecondary(): number {\n    return this.props.textColorSecondary;\n  }\n\n  get textColorTertiary(): number {\n    return this.props.textColorTertiary;\n  }\n\n  get textColorPrimaryInverse(): number {\n    return this.props.textColorPrimaryInverse;\n  }\n\n  get textColorSecondaryInverse(): number {\n    return this.props.textColorSecondaryInverse;\n  }\n\n  get textColorTertiaryInverse(): number {\n    return this.props.textColorTertiaryInverse;\n  }\n\n  get colorBackground(): number {\n    return this.props.colorBackground;\n  }\n\n  get colorBackgroundFloating(): number {\n    return this.props.colorBackgroundFloating;\n  }\n\n  get colorSurface(): number {\n    return this.props.colorSurface;\n  }\n\n  get colorSurfaceVariant(): number {\n    return this.props.colorSurfaceVariant;\n  }\n\n  get colorSurfaceHighlight(): number {\n    return this.props.colorSurfaceHighlight;\n  }\n\n  get surfaceHeader(): number {\n    return this.props.surfaceHeader;\n  }\n\n  get underSurface(): number {\n    return this.props.underSurface;\n  }\n\n  get offState(): number {\n    return this.props.offState;\n  }\n\n  get accentSurface(): number {\n    return this.props.accentSurface;\n  }\n\n  get textPrimaryOnAccent(): number {\n    return this.props.textPrimaryOnAccent;\n  }\n\n  get textSecondaryOnAccent(): number {\n    return this.props.textSecondaryOnAccent;\n  }\n\n  get volumeBackground(): number {\n    return this.props.volumeBackground;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): SchemeAndroid {\n    const core = CorePalette.of(argb);\n    return SchemeAndroid.lightFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): SchemeAndroid {\n    const core = CorePalette.of(argb);\n    return SchemeAndroid.darkFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Android color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): SchemeAndroid {\n    const core = CorePalette.contentOf(argb);\n    return SchemeAndroid.lightFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Android color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): SchemeAndroid {\n    const core = CorePalette.contentOf(argb);\n    return SchemeAndroid.darkFromCorePalette(core);\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): SchemeAndroid {\n    return new SchemeAndroid({\n      colorAccentPrimary: core.a1.tone(90),\n      colorAccentPrimaryVariant: core.a1.tone(40),\n      colorAccentSecondary: core.a2.tone(90),\n      colorAccentSecondaryVariant: core.a2.tone(40),\n      colorAccentTertiary: core.a3.tone(90),\n      colorAccentTertiaryVariant: core.a3.tone(40),\n      textColorPrimary: core.n1.tone(10),\n      textColorSecondary: core.n2.tone(30),\n      textColorTertiary: core.n2.tone(50),\n      textColorPrimaryInverse: core.n1.tone(95),\n      textColorSecondaryInverse: core.n1.tone(80),\n      textColorTertiaryInverse: core.n1.tone(60),\n      colorBackground: core.n1.tone(95),\n      colorBackgroundFloating: core.n1.tone(98),\n      colorSurface: core.n1.tone(98),\n      colorSurfaceVariant: core.n1.tone(90),\n      colorSurfaceHighlight: core.n1.tone(100),\n      surfaceHeader: core.n1.tone(90),\n      underSurface: core.n1.tone(0),\n      offState: core.n1.tone(20),\n      accentSurface: core.a2.tone(95),\n      textPrimaryOnAccent: core.n1.tone(10),\n      textSecondaryOnAccent: core.n2.tone(30),\n      volumeBackground: core.n1.tone(25),\n      scrim: core.n1.tone(80),\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): SchemeAndroid {\n    return new SchemeAndroid({\n      colorAccentPrimary: core.a1.tone(90),\n      colorAccentPrimaryVariant: core.a1.tone(70),\n      colorAccentSecondary: core.a2.tone(90),\n      colorAccentSecondaryVariant: core.a2.tone(70),\n      colorAccentTertiary: core.a3.tone(90),\n      colorAccentTertiaryVariant: core.a3.tone(70),\n      textColorPrimary: core.n1.tone(95),\n      textColorSecondary: core.n2.tone(80),\n      textColorTertiary: core.n2.tone(60),\n      textColorPrimaryInverse: core.n1.tone(10),\n      textColorSecondaryInverse: core.n1.tone(30),\n      textColorTertiaryInverse: core.n1.tone(50),\n      colorBackground: core.n1.tone(10),\n      colorBackgroundFloating: core.n1.tone(10),\n      colorSurface: core.n1.tone(20),\n      colorSurfaceVariant: core.n1.tone(30),\n      colorSurfaceHighlight: core.n1.tone(35),\n      surfaceHeader: core.n1.tone(30),\n      underSurface: core.n1.tone(0),\n      offState: core.n1.tone(20),\n      accentSurface: core.a2.tone(95),\n      textPrimaryOnAccent: core.n1.tone(10),\n      textSecondaryOnAccent: core.n2.tone(30),\n      volumeBackground: core.n1.tone(25),\n      scrim: core.n1.tone(80),\n    });\n  }\n\n  private constructor(private readonly props: {\n    colorAccentPrimary: number,\n    colorAccentPrimaryVariant: number,\n    colorAccentSecondary: number,\n    colorAccentSecondaryVariant: number,\n    colorAccentTertiary: number,\n    colorAccentTertiaryVariant: number,\n    textColorPrimary: number,\n    textColorSecondary: number,\n    textColorTertiary: number,\n    textColorPrimaryInverse: number,\n    textColorSecondaryInverse: number,\n    textColorTertiaryInverse: number,\n    colorBackground: number,\n    colorBackgroundFloating: number,\n    colorSurface: number,\n    colorSurfaceVariant: number,\n    colorSurfaceHighlight: number,\n    surfaceHeader: number,\n    underSurface: number,\n    offState: number,\n    accentSurface: number,\n    textPrimaryOnAccent: number,\n    textSecondaryOnAccent: number,\n    volumeBackground: number,\n    scrim: number\n  }) {}\n\n  toJSON() {\n    return {...this.props};\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.d.ts b/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.js b/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.js
deleted file mode 100644
index 38706a3..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.js
+++ /dev/null
@@ -1,204 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import { customMatchers } from '../utils/test_utils';
-import { Scheme } from './scheme';
-import { SchemeAndroid } from './scheme_android';
-beforeEach(() => {
-    jasmine.addMatchers(customMatchers);
-});
-describe('scheme', () => {
-    it('blue light scheme', () => {
-        const scheme = Scheme.light(0xff0000ff);
-        expect(scheme.primary).matchesColor(0xff343DFF);
-    });
-    it('blue dark scheme', () => {
-        const scheme = Scheme.dark(0xff0000ff);
-        expect(scheme.primary).matchesColor(0xffBEC2FF);
-    });
-    it('3rd party light scheme', () => {
-        const scheme = Scheme.light(0xff6750A4);
-        expect(scheme.primary).matchesColor(0xff6750A4);
-        expect(scheme.secondary).matchesColor(0xff625B71);
-        expect(scheme.tertiary).matchesColor(0xff7E5260);
-        expect(scheme.surface).matchesColor(0xfffffbff);
-        expect(scheme.onSurface).matchesColor(0xff1c1b1e);
-    });
-    it('3rd party dark scheme', () => {
-        const scheme = Scheme.dark(0xff6750A4);
-        expect(scheme.primary).matchesColor(0xffcfbcff);
-        expect(scheme.secondary).matchesColor(0xffcbc2db);
-        expect(scheme.tertiary).matchesColor(0xffefb8c8);
-        expect(scheme.surface).matchesColor(0xff1c1b1e);
-        expect(scheme.onSurface).matchesColor(0xffe6e1e6);
-    });
-    it('light scheme from high chroma color', () => {
-        const scheme = Scheme.light(0xfffa2bec);
-        expect(scheme.primary).matchesColor(0xffab00a2);
-        expect(scheme.onPrimary).matchesColor(0xffffffff);
-        expect(scheme.primaryContainer).matchesColor(0xffffd7f3);
-        expect(scheme.onPrimaryContainer).matchesColor(0xff390035);
-        expect(scheme.secondary).matchesColor(0xff6e5868);
-        expect(scheme.onSecondary).matchesColor(0xffffffff);
-        expect(scheme.secondaryContainer).matchesColor(0xfff8daee);
-        expect(scheme.onSecondaryContainer).matchesColor(0xff271624);
-        expect(scheme.tertiary).matchesColor(0xff815343);
-        expect(scheme.onTertiary).matchesColor(0xffffffff);
-        expect(scheme.tertiaryContainer).matchesColor(0xffffdbd0);
-        expect(scheme.onTertiaryContainer).matchesColor(0xff321207);
-        expect(scheme.error).matchesColor(0xffba1a1a);
-        expect(scheme.onError).matchesColor(0xffffffff);
-        expect(scheme.errorContainer).matchesColor(0xffffdad6);
-        expect(scheme.onErrorContainer).matchesColor(0xff410002);
-        expect(scheme.background).matchesColor(0xfffffbff);
-        expect(scheme.onBackground).matchesColor(0xff1f1a1d);
-        expect(scheme.surface).matchesColor(0xfffffbff);
-        expect(scheme.onSurface).matchesColor(0xff1f1a1d);
-        expect(scheme.surfaceVariant).matchesColor(0xffeedee7);
-        expect(scheme.onSurfaceVariant).matchesColor(0xff4e444b);
-        expect(scheme.outline).matchesColor(0xff80747b);
-        expect(scheme.outlineVariant).matchesColor(0xffd2c2cb);
-        expect(scheme.shadow).matchesColor(0xff000000);
-        expect(scheme.scrim).matchesColor(0xff000000);
-        expect(scheme.inverseSurface).matchesColor(0xff342f32);
-        expect(scheme.inverseOnSurface).matchesColor(0xfff8eef2);
-        expect(scheme.inversePrimary).matchesColor(0xffffabee);
-    });
-    it('dark scheme from high chroma color', () => {
-        const scheme = Scheme.dark(0xfffa2bec);
-        expect(scheme.primary).matchesColor(0xffffabee);
-        expect(scheme.onPrimary).matchesColor(0xff5c0057);
-        expect(scheme.primaryContainer).matchesColor(0xff83007b);
-        expect(scheme.onPrimaryContainer).matchesColor(0xffffd7f3);
-        expect(scheme.secondary).matchesColor(0xffdbbed1);
-        expect(scheme.onSecondary).matchesColor(0xff3e2a39);
-        expect(scheme.secondaryContainer).matchesColor(0xff554050);
-        expect(scheme.onSecondaryContainer).matchesColor(0xfff8daee);
-        expect(scheme.tertiary).matchesColor(0xfff5b9a5);
-        expect(scheme.onTertiary).matchesColor(0xff4c2619);
-        expect(scheme.tertiaryContainer).matchesColor(0xff663c2d);
-        expect(scheme.onTertiaryContainer).matchesColor(0xffffdbd0);
-        expect(scheme.error).matchesColor(0xffffb4ab);
-        expect(scheme.onError).matchesColor(0xff690005);
-        expect(scheme.errorContainer).matchesColor(0xff93000a);
-        expect(scheme.onErrorContainer).matchesColor(0xffffb4ab);
-        expect(scheme.background).matchesColor(0xff1f1a1d);
-        expect(scheme.onBackground).matchesColor(0xffeae0e4);
-        expect(scheme.surface).matchesColor(0xff1f1a1d);
-        expect(scheme.onSurface).matchesColor(0xffeae0e4);
-        expect(scheme.surfaceVariant).matchesColor(0xff4e444b);
-        expect(scheme.onSurfaceVariant).matchesColor(0xffd2c2cb);
-        expect(scheme.outline).matchesColor(0xff9a8d95);
-        expect(scheme.outlineVariant).matchesColor(0xff4e444b);
-        expect(scheme.shadow).matchesColor(0xff000000);
-        expect(scheme.scrim).matchesColor(0xff000000);
-        expect(scheme.inverseSurface).matchesColor(0xffeae0e4);
-        expect(scheme.inverseOnSurface).matchesColor(0xff342f32);
-        expect(scheme.inversePrimary).matchesColor(0xffab00a2);
-    });
-    it('light content scheme from high chroma color', () => {
-        const scheme = Scheme.lightContent(0xfffa2bec);
-        expect(scheme.primary).matchesColor(0xffab00a2);
-        expect(scheme.onPrimary).matchesColor(0xffffffff);
-        expect(scheme.primaryContainer).matchesColor(0xffffd7f3);
-        expect(scheme.onPrimaryContainer).matchesColor(0xff390035);
-        expect(scheme.secondary).matchesColor(0xff7f4e75);
-        expect(scheme.onSecondary).matchesColor(0xffffffff);
-        expect(scheme.secondaryContainer).matchesColor(0xffffd7f3);
-        expect(scheme.onSecondaryContainer).matchesColor(0xff330b2f);
-        expect(scheme.tertiary).matchesColor(0xff9c4323);
-        expect(scheme.onTertiary).matchesColor(0xffffffff);
-        expect(scheme.tertiaryContainer).matchesColor(0xffffdbd0);
-        expect(scheme.onTertiaryContainer).matchesColor(0xff390c00);
-        expect(scheme.error).matchesColor(0xffba1a1a);
-        expect(scheme.onError).matchesColor(0xffffffff);
-        expect(scheme.errorContainer).matchesColor(0xffffdad6);
-        expect(scheme.onErrorContainer).matchesColor(0xff410002);
-        expect(scheme.background).matchesColor(0xfffffbff);
-        expect(scheme.onBackground).matchesColor(0xff1f1a1d);
-        expect(scheme.surface).matchesColor(0xfffffbff);
-        expect(scheme.onSurface).matchesColor(0xff1f1a1d);
-        expect(scheme.surfaceVariant).matchesColor(0xffeedee7);
-        expect(scheme.onSurfaceVariant).matchesColor(0xff4e444b);
-        expect(scheme.outline).matchesColor(0xff80747b);
-        expect(scheme.outlineVariant).matchesColor(0xffd2c2cb);
-        expect(scheme.shadow).matchesColor(0xff000000);
-        expect(scheme.scrim).matchesColor(0xff000000);
-        expect(scheme.inverseSurface).matchesColor(0xff342f32);
-        expect(scheme.inverseOnSurface).matchesColor(0xfff8eef2);
-        expect(scheme.inversePrimary).matchesColor(0xffffabee);
-    });
-    it('dark content scheme from high chroma color', () => {
-        const scheme = Scheme.darkContent(0xfffa2bec);
-        expect(scheme.primary).matchesColor(0xffffabee);
-        expect(scheme.onPrimary).matchesColor(0xff5c0057);
-        expect(scheme.primaryContainer).matchesColor(0xff83007b);
-        expect(scheme.onPrimaryContainer).matchesColor(0xffffd7f3);
-        expect(scheme.secondary).matchesColor(0xfff0b4e1);
-        expect(scheme.onSecondary).matchesColor(0xff4b2145);
-        expect(scheme.secondaryContainer).matchesColor(0xff64375c);
-        expect(scheme.onSecondaryContainer).matchesColor(0xffffd7f3);
-        expect(scheme.tertiary).matchesColor(0xffffb59c);
-        expect(scheme.onTertiary).matchesColor(0xff5c1900);
-        expect(scheme.tertiaryContainer).matchesColor(0xff7d2c0d);
-        expect(scheme.onTertiaryContainer).matchesColor(0xffffdbd0);
-        expect(scheme.error).matchesColor(0xffffb4ab);
-        expect(scheme.onError).matchesColor(0xff690005);
-        expect(scheme.errorContainer).matchesColor(0xff93000a);
-        expect(scheme.onErrorContainer).matchesColor(0xffffb4ab);
-        expect(scheme.background).matchesColor(0xff1f1a1d);
-        expect(scheme.onBackground).matchesColor(0xffeae0e4);
-        expect(scheme.surface).matchesColor(0xff1f1a1d);
-        expect(scheme.onSurface).matchesColor(0xffeae0e4);
-        expect(scheme.surfaceVariant).matchesColor(0xff4e444b);
-        expect(scheme.onSurfaceVariant).matchesColor(0xffd2c2cb);
-        expect(scheme.outline).matchesColor(0xff9a8d95);
-        expect(scheme.outlineVariant).matchesColor(0xff4e444b);
-        expect(scheme.shadow).matchesColor(0xff000000);
-        expect(scheme.scrim).matchesColor(0xff000000);
-        expect(scheme.inverseSurface).matchesColor(0xffeae0e4);
-        expect(scheme.inverseOnSurface).matchesColor(0xff342f32);
-        expect(scheme.inversePrimary).matchesColor(0xffab00a2);
-    });
-});
-describe('android scheme', () => {
-    it('blue light scheme', () => {
-        const scheme = SchemeAndroid.light(0xff0000ff);
-        expect(scheme.colorAccentPrimary).matchesColor(0xffe0e0ff);
-    });
-    it('blue dark scheme', () => {
-        const scheme = SchemeAndroid.dark(0xff0000ff);
-        expect(scheme.colorAccentPrimary).matchesColor(0xffe0e0ff);
-    });
-    it('3rd party light scheme', () => {
-        const scheme = SchemeAndroid.light(0xff6750A4);
-        expect(scheme.colorAccentPrimary).matchesColor(0xffe9ddff);
-        expect(scheme.colorAccentSecondary).matchesColor(0xffe8def8);
-        expect(scheme.colorAccentTertiary).matchesColor(0xffffd9e3);
-        expect(scheme.colorSurface).matchesColor(0xfffdf8fd);
-        expect(scheme.textColorPrimary).matchesColor(0xff1c1b1e);
-    });
-    it('3rd party dark scheme', () => {
-        const scheme = SchemeAndroid.dark(0xff6750A4);
-        expect(scheme.colorAccentPrimary).matchesColor(0xffe9ddff);
-        expect(scheme.colorAccentSecondary).matchesColor(0xffe8def8);
-        expect(scheme.colorAccentTertiary).matchesColor(0xffffd9e3);
-        expect(scheme.colorSurface).matchesColor(0xff313033);
-        expect(scheme.textColorPrimary).matchesColor(0xfff4eff4);
-    });
-});
-//# sourceMappingURL=scheme_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.js.map b/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.js.map
deleted file mode 100644
index 5d35fd5..0000000
--- a/node_modules/@material/material-color-utilities/dist/scheme/scheme_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"scheme_test.js","sourceRoot":"","sources":["../../scheme/scheme_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport {customMatchers} from '../utils/test_utils';\n\nimport {Scheme} from './scheme';\nimport {SchemeAndroid} from './scheme_android';\n\nbeforeEach(() => {\n  jasmine.addMatchers(customMatchers);\n});\n\ndescribe('scheme', () => {\n  it('blue light scheme', () => {\n    const scheme = Scheme.light(0xff0000ff);\n    expect(scheme.primary).matchesColor(0xff343DFF);\n  });\n\n  it('blue dark scheme', () => {\n    const scheme = Scheme.dark(0xff0000ff);\n    expect(scheme.primary).matchesColor(0xffBEC2FF);\n  });\n\n  it('3rd party light scheme', () => {\n    const scheme = Scheme.light(0xff6750A4);\n    expect(scheme.primary).matchesColor(0xff6750A4);\n    expect(scheme.secondary).matchesColor(0xff625B71);\n    expect(scheme.tertiary).matchesColor(0xff7E5260);\n    expect(scheme.surface).matchesColor(0xfffffbff);\n    expect(scheme.onSurface).matchesColor(0xff1c1b1e);\n  });\n\n  it('3rd party dark scheme', () => {\n    const scheme = Scheme.dark(0xff6750A4);\n    expect(scheme.primary).matchesColor(0xffcfbcff);\n    expect(scheme.secondary).matchesColor(0xffcbc2db);\n    expect(scheme.tertiary).matchesColor(0xffefb8c8);\n    expect(scheme.surface).matchesColor(0xff1c1b1e);\n    expect(scheme.onSurface).matchesColor(0xffe6e1e6);\n  });\n\n  it('light scheme from high chroma color', () => {\n    const scheme = Scheme.light(0xfffa2bec);\n    expect(scheme.primary).matchesColor(0xffab00a2);\n    expect(scheme.onPrimary).matchesColor(0xffffffff);\n    expect(scheme.primaryContainer).matchesColor(0xffffd7f3);\n    expect(scheme.onPrimaryContainer).matchesColor(0xff390035);\n    expect(scheme.secondary).matchesColor(0xff6e5868);\n    expect(scheme.onSecondary).matchesColor(0xffffffff);\n    expect(scheme.secondaryContainer).matchesColor(0xfff8daee);\n    expect(scheme.onSecondaryContainer).matchesColor(0xff271624);\n    expect(scheme.tertiary).matchesColor(0xff815343);\n    expect(scheme.onTertiary).matchesColor(0xffffffff);\n    expect(scheme.tertiaryContainer).matchesColor(0xffffdbd0);\n    expect(scheme.onTertiaryContainer).matchesColor(0xff321207);\n    expect(scheme.error).matchesColor(0xffba1a1a);\n    expect(scheme.onError).matchesColor(0xffffffff);\n    expect(scheme.errorContainer).matchesColor(0xffffdad6);\n    expect(scheme.onErrorContainer).matchesColor(0xff410002);\n    expect(scheme.background).matchesColor(0xfffffbff);\n    expect(scheme.onBackground).matchesColor(0xff1f1a1d);\n    expect(scheme.surface).matchesColor(0xfffffbff);\n    expect(scheme.onSurface).matchesColor(0xff1f1a1d);\n    expect(scheme.surfaceVariant).matchesColor(0xffeedee7);\n    expect(scheme.onSurfaceVariant).matchesColor(0xff4e444b);\n    expect(scheme.outline).matchesColor(0xff80747b);\n    expect(scheme.outlineVariant).matchesColor(0xffd2c2cb);\n    expect(scheme.shadow).matchesColor(0xff000000);\n    expect(scheme.scrim).matchesColor(0xff000000);\n    expect(scheme.inverseSurface).matchesColor(0xff342f32);\n    expect(scheme.inverseOnSurface).matchesColor(0xfff8eef2);\n    expect(scheme.inversePrimary).matchesColor(0xffffabee);\n  });\n\n  it('dark scheme from high chroma color', () => {\n    const scheme = Scheme.dark(0xfffa2bec);\n    expect(scheme.primary).matchesColor(0xffffabee);\n    expect(scheme.onPrimary).matchesColor(0xff5c0057);\n    expect(scheme.primaryContainer).matchesColor(0xff83007b);\n    expect(scheme.onPrimaryContainer).matchesColor(0xffffd7f3);\n    expect(scheme.secondary).matchesColor(0xffdbbed1);\n    expect(scheme.onSecondary).matchesColor(0xff3e2a39);\n    expect(scheme.secondaryContainer).matchesColor(0xff554050);\n    expect(scheme.onSecondaryContainer).matchesColor(0xfff8daee);\n    expect(scheme.tertiary).matchesColor(0xfff5b9a5);\n    expect(scheme.onTertiary).matchesColor(0xff4c2619);\n    expect(scheme.tertiaryContainer).matchesColor(0xff663c2d);\n    expect(scheme.onTertiaryContainer).matchesColor(0xffffdbd0);\n    expect(scheme.error).matchesColor(0xffffb4ab);\n    expect(scheme.onError).matchesColor(0xff690005);\n    expect(scheme.errorContainer).matchesColor(0xff93000a);\n    expect(scheme.onErrorContainer).matchesColor(0xffffb4ab);\n    expect(scheme.background).matchesColor(0xff1f1a1d);\n    expect(scheme.onBackground).matchesColor(0xffeae0e4);\n    expect(scheme.surface).matchesColor(0xff1f1a1d);\n    expect(scheme.onSurface).matchesColor(0xffeae0e4);\n    expect(scheme.surfaceVariant).matchesColor(0xff4e444b);\n    expect(scheme.onSurfaceVariant).matchesColor(0xffd2c2cb);\n    expect(scheme.outline).matchesColor(0xff9a8d95);\n    expect(scheme.outlineVariant).matchesColor(0xff4e444b);\n    expect(scheme.shadow).matchesColor(0xff000000);\n    expect(scheme.scrim).matchesColor(0xff000000);\n    expect(scheme.inverseSurface).matchesColor(0xffeae0e4);\n    expect(scheme.inverseOnSurface).matchesColor(0xff342f32);\n    expect(scheme.inversePrimary).matchesColor(0xffab00a2);\n  });\n\n  it('light content scheme from high chroma color', () => {\n    const scheme = Scheme.lightContent(0xfffa2bec);\n    expect(scheme.primary).matchesColor(0xffab00a2);\n    expect(scheme.onPrimary).matchesColor(0xffffffff);\n    expect(scheme.primaryContainer).matchesColor(0xffffd7f3);\n    expect(scheme.onPrimaryContainer).matchesColor(0xff390035);\n    expect(scheme.secondary).matchesColor(0xff7f4e75);\n    expect(scheme.onSecondary).matchesColor(0xffffffff);\n    expect(scheme.secondaryContainer).matchesColor(0xffffd7f3);\n    expect(scheme.onSecondaryContainer).matchesColor(0xff330b2f);\n    expect(scheme.tertiary).matchesColor(0xff9c4323);\n    expect(scheme.onTertiary).matchesColor(0xffffffff);\n    expect(scheme.tertiaryContainer).matchesColor(0xffffdbd0);\n    expect(scheme.onTertiaryContainer).matchesColor(0xff390c00);\n    expect(scheme.error).matchesColor(0xffba1a1a);\n    expect(scheme.onError).matchesColor(0xffffffff);\n    expect(scheme.errorContainer).matchesColor(0xffffdad6);\n    expect(scheme.onErrorContainer).matchesColor(0xff410002);\n    expect(scheme.background).matchesColor(0xfffffbff);\n    expect(scheme.onBackground).matchesColor(0xff1f1a1d);\n    expect(scheme.surface).matchesColor(0xfffffbff);\n    expect(scheme.onSurface).matchesColor(0xff1f1a1d);\n    expect(scheme.surfaceVariant).matchesColor(0xffeedee7);\n    expect(scheme.onSurfaceVariant).matchesColor(0xff4e444b);\n    expect(scheme.outline).matchesColor(0xff80747b);\n    expect(scheme.outlineVariant).matchesColor(0xffd2c2cb);\n    expect(scheme.shadow).matchesColor(0xff000000);\n    expect(scheme.scrim).matchesColor(0xff000000);\n    expect(scheme.inverseSurface).matchesColor(0xff342f32);\n    expect(scheme.inverseOnSurface).matchesColor(0xfff8eef2);\n    expect(scheme.inversePrimary).matchesColor(0xffffabee);\n  });\n\n  it('dark content scheme from high chroma color', () => {\n    const scheme = Scheme.darkContent(0xfffa2bec);\n    expect(scheme.primary).matchesColor(0xffffabee);\n    expect(scheme.onPrimary).matchesColor(0xff5c0057);\n    expect(scheme.primaryContainer).matchesColor(0xff83007b);\n    expect(scheme.onPrimaryContainer).matchesColor(0xffffd7f3);\n    expect(scheme.secondary).matchesColor(0xfff0b4e1);\n    expect(scheme.onSecondary).matchesColor(0xff4b2145);\n    expect(scheme.secondaryContainer).matchesColor(0xff64375c);\n    expect(scheme.onSecondaryContainer).matchesColor(0xffffd7f3);\n    expect(scheme.tertiary).matchesColor(0xffffb59c);\n    expect(scheme.onTertiary).matchesColor(0xff5c1900);\n    expect(scheme.tertiaryContainer).matchesColor(0xff7d2c0d);\n    expect(scheme.onTertiaryContainer).matchesColor(0xffffdbd0);\n    expect(scheme.error).matchesColor(0xffffb4ab);\n    expect(scheme.onError).matchesColor(0xff690005);\n    expect(scheme.errorContainer).matchesColor(0xff93000a);\n    expect(scheme.onErrorContainer).matchesColor(0xffffb4ab);\n    expect(scheme.background).matchesColor(0xff1f1a1d);\n    expect(scheme.onBackground).matchesColor(0xffeae0e4);\n    expect(scheme.surface).matchesColor(0xff1f1a1d);\n    expect(scheme.onSurface).matchesColor(0xffeae0e4);\n    expect(scheme.surfaceVariant).matchesColor(0xff4e444b);\n    expect(scheme.onSurfaceVariant).matchesColor(0xffd2c2cb);\n    expect(scheme.outline).matchesColor(0xff9a8d95);\n    expect(scheme.outlineVariant).matchesColor(0xff4e444b);\n    expect(scheme.shadow).matchesColor(0xff000000);\n    expect(scheme.scrim).matchesColor(0xff000000);\n    expect(scheme.inverseSurface).matchesColor(0xffeae0e4);\n    expect(scheme.inverseOnSurface).matchesColor(0xff342f32);\n    expect(scheme.inversePrimary).matchesColor(0xffab00a2);\n  });\n});\n\ndescribe('android scheme', () => {\n  it('blue light scheme', () => {\n    const scheme = SchemeAndroid.light(0xff0000ff);\n    expect(scheme.colorAccentPrimary).matchesColor(0xffe0e0ff);\n  });\n\n  it('blue dark scheme', () => {\n    const scheme = SchemeAndroid.dark(0xff0000ff);\n    expect(scheme.colorAccentPrimary).matchesColor(0xffe0e0ff);\n  });\n\n  it('3rd party light scheme', () => {\n    const scheme = SchemeAndroid.light(0xff6750A4);\n    expect(scheme.colorAccentPrimary).matchesColor(0xffe9ddff);\n    expect(scheme.colorAccentSecondary).matchesColor(0xffe8def8);\n    expect(scheme.colorAccentTertiary).matchesColor(0xffffd9e3);\n    expect(scheme.colorSurface).matchesColor(0xfffdf8fd);\n    expect(scheme.textColorPrimary).matchesColor(0xff1c1b1e);\n  });\n\n  it('3rd party dark scheme', () => {\n    const scheme = SchemeAndroid.dark(0xff6750A4);\n    expect(scheme.colorAccentPrimary).matchesColor(0xffe9ddff);\n    expect(scheme.colorAccentSecondary).matchesColor(0xffe8def8);\n    expect(scheme.colorAccentTertiary).matchesColor(0xffffd9e3);\n    expect(scheme.colorSurface).matchesColor(0xff313033);\n    expect(scheme.textColorPrimary).matchesColor(0xfff4eff4);\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/score/score.d.ts b/node_modules/@material/material-color-utilities/dist/score/score.d.ts
deleted file mode 100644
index b673443..0000000
--- a/node_modules/@material/material-color-utilities/dist/score/score.d.ts
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- *  Given a large set of colors, remove colors that are unsuitable for a UI
- *  theme, and rank the rest based on suitability.
- *
- *  Enables use of a high cluster count for image quantization, thus ensuring
- *  colors aren't muddied, while curating the high cluster count to a much
- *  smaller number of appropriate choices.
- */
-export declare class Score {
-    private static readonly TARGET_CHROMA;
-    private static readonly WEIGHT_PROPORTION;
-    private static readonly WEIGHT_CHROMA_ABOVE;
-    private static readonly WEIGHT_CHROMA_BELOW;
-    private static readonly CUTOFF_CHROMA;
-    private static readonly CUTOFF_TONE;
-    private static readonly CUTOFF_EXCITED_PROPORTION;
-    private constructor();
-    /**
-     * Given a map with keys of colors and values of how often the color appears,
-     * rank the colors based on suitability for being used for a UI theme.
-     *
-     * @param colorsToPopulation map with keys of colors and values of how often
-     *     the color appears, usually from a source image.
-     * @return Colors sorted by suitability for a UI theme. The most suitable
-     *     color is the first item, the least suitable is the last. There will
-     *     always be at least one color returned. If all the input colors
-     *     were not suitable for a theme, a default fallback color will be
-     *     provided, Google Blue.
-     */
-    static score(colorsToPopulation: Map<number, number>, contentColor?: boolean): number[];
-    private static filter;
-    private static filterContent;
-}
diff --git a/node_modules/@material/material-color-utilities/dist/score/score.js b/node_modules/@material/material-color-utilities/dist/score/score.js
deleted file mode 100644
index eef0d44..0000000
--- a/node_modules/@material/material-color-utilities/dist/score/score.js
+++ /dev/null
@@ -1,145 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Cam16 } from '../hct/cam16';
-import * as utils from '../utils/color_utils';
-import * as math from '../utils/math_utils';
-/**
- *  Given a large set of colors, remove colors that are unsuitable for a UI
- *  theme, and rank the rest based on suitability.
- *
- *  Enables use of a high cluster count for image quantization, thus ensuring
- *  colors aren't muddied, while curating the high cluster count to a much
- *  smaller number of appropriate choices.
- */
-export class Score {
-    constructor() { }
-    /**
-     * Given a map with keys of colors and values of how often the color appears,
-     * rank the colors based on suitability for being used for a UI theme.
-     *
-     * @param colorsToPopulation map with keys of colors and values of how often
-     *     the color appears, usually from a source image.
-     * @return Colors sorted by suitability for a UI theme. The most suitable
-     *     color is the first item, the least suitable is the last. There will
-     *     always be at least one color returned. If all the input colors
-     *     were not suitable for a theme, a default fallback color will be
-     *     provided, Google Blue.
-     */
-    static score(colorsToPopulation, contentColor = false) {
-        // Determine the total count of all colors.
-        let populationSum = 0;
-        for (const population of colorsToPopulation.values()) {
-            populationSum += population;
-        }
-        // Turn the count of each color into a proportion by dividing by the total
-        // count. Also, fill a cache of CAM16 colors representing each color, and
-        // record the proportion of colors for each CAM16 hue.
-        const colorsToProportion = new Map();
-        const colorsToCam = new Map();
-        const hueProportions = new Array(360).fill(0);
-        for (const [color, population] of colorsToPopulation.entries()) {
-            const proportion = population / populationSum;
-            colorsToProportion.set(color, proportion);
-            const cam = Cam16.fromInt(color);
-            colorsToCam.set(color, cam);
-            const hue = Math.round(cam.hue);
-            hueProportions[hue] += proportion;
-        }
-        // Determine the proportion of the colors around each color, by summing the
-        // proportions around each color's hue.
-        const colorsToExcitedProportion = new Map();
-        for (const [color, cam] of colorsToCam.entries()) {
-            const hue = Math.round(cam.hue);
-            let excitedProportion = 0;
-            for (let i = (hue - 15); i < (hue + 15); i++) {
-                const neighborHue = math.sanitizeDegreesInt(i);
-                excitedProportion += hueProportions[neighborHue];
-            }
-            colorsToExcitedProportion.set(color, excitedProportion);
-        }
-        // Score the colors by their proportion, as well as how chromatic they are.
-        const colorsToScore = new Map();
-        for (const [color, cam] of colorsToCam.entries()) {
-            const proportion = colorsToExcitedProportion.get(color);
-            const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;
-            const chromaWeight = cam.chroma < Score.TARGET_CHROMA ?
-                Score.WEIGHT_CHROMA_BELOW :
-                Score.WEIGHT_CHROMA_ABOVE;
-            const chromaScore = (cam.chroma - Score.TARGET_CHROMA) * chromaWeight;
-            const score = proportionScore + chromaScore;
-            colorsToScore.set(color, score);
-        }
-        // Remove colors that are unsuitable, ex. very dark or unchromatic colors.
-        // Also, remove colors that are very similar in hue.
-        const filteredColors = contentColor ?
-            Score.filterContent(colorsToCam) :
-            Score.filter(colorsToExcitedProportion, colorsToCam);
-        const dedupedColorsToScore = new Map();
-        for (const color of filteredColors) {
-            let duplicateHue = false;
-            const hue = colorsToCam.get(color).hue;
-            for (const [alreadyChosenColor,] of dedupedColorsToScore) {
-                const alreadyChosenHue = colorsToCam.get(alreadyChosenColor).hue;
-                if (math.differenceDegrees(hue, alreadyChosenHue) < 15) {
-                    duplicateHue = true;
-                    break;
-                }
-            }
-            if (duplicateHue) {
-                continue;
-            }
-            dedupedColorsToScore.set(color, colorsToScore.get(color));
-        }
-        // Ensure the list of colors returned is sorted such that the first in the
-        // list is the most suitable, and the last is the least suitable.
-        const colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());
-        colorsByScoreDescending.sort((first, second) => {
-            return second[1] - first[1];
-        });
-        const answer = colorsByScoreDescending.map((entry) => {
-            return entry[0];
-        });
-        // Ensure that at least one color is returned.
-        if (answer.length === 0) {
-            answer.push(0xff4285F4); // Google Blue
-        }
-        return answer;
-    }
-    static filter(colorsToExcitedProportion, colorsToCam) {
-        const filtered = new Array();
-        for (const [color, cam] of colorsToCam.entries()) {
-            const proportion = colorsToExcitedProportion.get(color);
-            if (cam.chroma >= Score.CUTOFF_CHROMA &&
-                utils.lstarFromArgb(color) >= Score.CUTOFF_TONE &&
-                proportion >= Score.CUTOFF_EXCITED_PROPORTION) {
-                filtered.push(color);
-            }
-        }
-        return filtered;
-    }
-    static filterContent(colorsToCam) {
-        return Array.from(colorsToCam.keys());
-    }
-}
-Score.TARGET_CHROMA = 48.0;
-Score.WEIGHT_PROPORTION = 0.7;
-Score.WEIGHT_CHROMA_ABOVE = 0.3;
-Score.WEIGHT_CHROMA_BELOW = 0.1;
-Score.CUTOFF_CHROMA = 15.0;
-Score.CUTOFF_TONE = 10.0;
-Score.CUTOFF_EXCITED_PROPORTION = 0.01;
-//# sourceMappingURL=score.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/score/score.js.map b/node_modules/@material/material-color-utilities/dist/score/score.js.map
deleted file mode 100644
index e72b602..0000000
--- a/node_modules/@material/material-color-utilities/dist/score/score.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"score.js","sourceRoot":"","sources":["../../score/score.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cam16} from '../hct/cam16';\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n  private static readonly TARGET_CHROMA = 48.0;\n  private static readonly WEIGHT_PROPORTION = 0.7;\n  private static readonly WEIGHT_CHROMA_ABOVE = 0.3;\n  private static readonly WEIGHT_CHROMA_BELOW = 0.1;\n  private static readonly CUTOFF_CHROMA = 15.0;\n  private static readonly CUTOFF_TONE = 10.0;\n  private static readonly CUTOFF_EXCITED_PROPORTION = 0.01;\n\n  private constructor() {}\n\n  /**\n   * Given a map with keys of colors and values of how often the color appears,\n   * rank the colors based on suitability for being used for a UI theme.\n   *\n   * @param colorsToPopulation map with keys of colors and values of how often\n   *     the color appears, usually from a source image.\n   * @return Colors sorted by suitability for a UI theme. The most suitable\n   *     color is the first item, the least suitable is the last. There will\n   *     always be at least one color returned. If all the input colors\n   *     were not suitable for a theme, a default fallback color will be\n   *     provided, Google Blue.\n   */\n  static score(colorsToPopulation: Map<number, number>, contentColor = false):\n      number[] {\n    // Determine the total count of all colors.\n    let populationSum = 0;\n    for (const population of colorsToPopulation.values()) {\n      populationSum += population;\n    }\n\n\n    // Turn the count of each color into a proportion by dividing by the total\n    // count. Also, fill a cache of CAM16 colors representing each color, and\n    // record the proportion of colors for each CAM16 hue.\n    const colorsToProportion = new Map<number, number>();\n    const colorsToCam = new Map<number, Cam16>();\n    const hueProportions = new Array<number>(360).fill(0);\n    for (const [color, population] of colorsToPopulation.entries()) {\n      const proportion = population / populationSum;\n      colorsToProportion.set(color, proportion);\n\n      const cam = Cam16.fromInt(color);\n      colorsToCam.set(color, cam);\n\n      const hue = Math.round(cam.hue);\n      hueProportions[hue] += proportion;\n    }\n\n    // Determine the proportion of the colors around each color, by summing the\n    // proportions around each color's hue.\n    const colorsToExcitedProportion = new Map<number, number>();\n    for (const [color, cam] of colorsToCam.entries()) {\n      const hue = Math.round(cam.hue);\n\n      let excitedProportion = 0;\n      for (let i = (hue - 15); i < (hue + 15); i++) {\n        const neighborHue = math.sanitizeDegreesInt(i);\n        excitedProportion += hueProportions[neighborHue];\n      }\n      colorsToExcitedProportion.set(color, excitedProportion);\n    }\n\n    // Score the colors by their proportion, as well as how chromatic they are.\n    const colorsToScore = new Map<number, number>();\n    for (const [color, cam] of colorsToCam.entries()) {\n      const proportion = colorsToExcitedProportion.get(color)!;\n      const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n\n      const chromaWeight = cam.chroma < Score.TARGET_CHROMA ?\n          Score.WEIGHT_CHROMA_BELOW :\n          Score.WEIGHT_CHROMA_ABOVE;\n      const chromaScore = (cam.chroma - Score.TARGET_CHROMA) * chromaWeight;\n\n      const score = proportionScore + chromaScore;\n      colorsToScore.set(color, score);\n    }\n\n    // Remove colors that are unsuitable, ex. very dark or unchromatic colors.\n    // Also, remove colors that are very similar in hue.\n    const filteredColors = contentColor ?\n        Score.filterContent(colorsToCam) :\n        Score.filter(colorsToExcitedProportion, colorsToCam);\n    const dedupedColorsToScore = new Map<number, number>();\n    for (const color of filteredColors) {\n      let duplicateHue = false;\n      const hue = colorsToCam.get(color)!.hue;\n      for (const [alreadyChosenColor, ] of dedupedColorsToScore) {\n        const alreadyChosenHue = colorsToCam.get(alreadyChosenColor)!.hue;\n        if (math.differenceDegrees(hue, alreadyChosenHue) < 15) {\n          duplicateHue = true;\n          break;\n        }\n      }\n      if (duplicateHue) {\n        continue;\n      }\n      dedupedColorsToScore.set(color, colorsToScore.get(color)!);\n    }\n\n    // Ensure the list of colors returned is sorted such that the first in the\n    // list is the most suitable, and the last is the least suitable.\n    const colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());\n    colorsByScoreDescending.sort((first: number[], second: number[]) => {\n      return second[1] - first[1];\n    });\n\n    const answer = colorsByScoreDescending.map((entry: number[]) => {\n      return entry[0];\n    });\n\n    // Ensure that at least one color is returned.\n    if (answer.length === 0) {\n      answer.push(0xff4285F4);  // Google Blue\n    }\n    return answer;\n  }\n\n  private static filter(\n      colorsToExcitedProportion: Map<number, number>,\n      colorsToCam: Map<number, Cam16>): number[] {\n    const filtered = new Array<number>();\n    for (const [color, cam] of colorsToCam.entries()) {\n      const proportion = colorsToExcitedProportion.get(color)!;\n      if (cam.chroma >= Score.CUTOFF_CHROMA &&\n          utils.lstarFromArgb(color) >= Score.CUTOFF_TONE &&\n          proportion >= Score.CUTOFF_EXCITED_PROPORTION) {\n        filtered.push(color);\n      }\n    }\n    return filtered;\n  }\n\n  private static filterContent(colorsToCam: Map<number, Cam16>): number[] {\n    return Array.from(colorsToCam.keys());\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/score/score_test.d.ts b/node_modules/@material/material-color-utilities/dist/score/score_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/score/score_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/score/score_test.js b/node_modules/@material/material-color-utilities/dist/score/score_test.js
deleted file mode 100644
index b6700bb..0000000
--- a/node_modules/@material/material-color-utilities/dist/score/score_test.js
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import { Score } from './score';
-describe('scoring', () => {
-    it('prioritizes chroma when proportions equal', () => {
-        const colorsToPopulation = new Map();
-        colorsToPopulation.set(0xffff0000, 1);
-        colorsToPopulation.set(0xff00ff00, 1);
-        colorsToPopulation.set(0xff0000ff, 1);
-        const ranked = Score.score(colorsToPopulation);
-        expect(ranked[0]).toBe(0xffff0000);
-        expect(ranked[1]).toBe(0xff00ff00);
-        expect(ranked[2]).toBe(0xff0000ff);
-    });
-    it('generates gBlue when no colors available', () => {
-        const colorsToPopulation = new Map();
-        colorsToPopulation.set(0xff000000, 1);
-        const ranked = Score.score(colorsToPopulation);
-        expect(ranked[0]).toBe(0xff4285F4);
-    });
-    it('dedupes nearby hues', () => {
-        const colorsToPopulation = new Map();
-        colorsToPopulation.set(0xff008772, 1);
-        colorsToPopulation.set(0xff318477, 1);
-        const ranked = Score.score(colorsToPopulation);
-        expect(ranked.length).toBe(1);
-        expect(ranked[0]).toBe(0xff008772);
-    });
-});
-//# sourceMappingURL=score_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/score/score_test.js.map b/node_modules/@material/material-color-utilities/dist/score/score_test.js.map
deleted file mode 100644
index 13996f6..0000000
--- a/node_modules/@material/material-color-utilities/dist/score/score_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"score_test.js","sourceRoot":"","sources":["../../score/score_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,SAAS,CAAC;AAEjB,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAE9B,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAkB,CAAC;QACrD,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACtC,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACtC,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAE/C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAkB,CAAC;QACrD,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAE/C,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAkB,CAAC;QACrD,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACtC,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAE/C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport {Score} from './score';\n\ndescribe('scoring', () => {\n  it('prioritizes chroma when proportions equal', () => {\n    const colorsToPopulation = new Map<number, number>();\n    colorsToPopulation.set(0xffff0000, 1);\n    colorsToPopulation.set(0xff00ff00, 1);\n    colorsToPopulation.set(0xff0000ff, 1);\n\n    const ranked = Score.score(colorsToPopulation);\n\n    expect(ranked[0]).toBe(0xffff0000);\n    expect(ranked[1]).toBe(0xff00ff00);\n    expect(ranked[2]).toBe(0xff0000ff);\n  });\n\n  it('generates gBlue when no colors available', () => {\n    const colorsToPopulation = new Map<number, number>();\n    colorsToPopulation.set(0xff000000, 1);\n\n    const ranked = Score.score(colorsToPopulation);\n\n    expect(ranked[0]).toBe(0xff4285F4);\n  });\n\n  it('dedupes nearby hues', () => {\n    const colorsToPopulation = new Map<number, number>();\n    colorsToPopulation.set(0xff008772, 1);\n    colorsToPopulation.set(0xff318477, 1);\n\n    const ranked = Score.score(colorsToPopulation);\n\n    expect(ranked.length).toBe(1);\n    expect(ranked[0]).toBe(0xff008772);\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/tsconfig.tsbuildinfo b/node_modules/@material/material-color-utilities/dist/tsconfig.tsbuildinfo
deleted file mode 100644
index 79d4d71..0000000
--- a/node_modules/@material/material-color-utilities/dist/tsconfig.tsbuildinfo
+++ /dev/null
@@ -1 +0,0 @@
-{"program":{"fileNames":["../node_modules/typescript/lib/lib.es5.d.ts","../node_modules/typescript/lib/lib.es2015.d.ts","../node_modules/typescript/lib/lib.es2016.d.ts","../node_modules/typescript/lib/lib.es2017.d.ts","../node_modules/typescript/lib/lib.dom.d.ts","../node_modules/typescript/lib/lib.dom.iterable.d.ts","../node_modules/typescript/lib/lib.es2015.core.d.ts","../node_modules/typescript/lib/lib.es2015.collection.d.ts","../node_modules/typescript/lib/lib.es2015.generator.d.ts","../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../node_modules/typescript/lib/lib.es2015.promise.d.ts","../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../node_modules/typescript/lib/lib.es2017.object.d.ts","../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2017.string.d.ts","../node_modules/typescript/lib/lib.es2017.intl.d.ts","../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../utils/math_utils.ts","../utils/color_utils.ts","../hct/viewing_conditions.ts","../hct/cam16.ts","../hct/hct_solver.ts","../hct/hct.ts","../blend/blend.ts","../palettes/tonal_palette.ts","../palettes/core_palette.ts","../quantize/point_provider.ts","../quantize/lab_point_provider.ts","../quantize/quantizer_wsmeans.ts","../quantize/quantizer_map.ts","../quantize/quantizer_wu.ts","../quantize/quantizer_celebi.ts","../scheme/scheme.ts","../scheme/scheme_android.ts","../score/score.ts","../utils/string_utils.ts","../utils/image_utils.ts","../utils/theme_utils.ts","../index.ts","../node_modules/@types/jasmine/index.d.ts","../utils/test_utils.ts","../blend/blend_test.ts","../hct/hct_round_trip_test.ts","../hct/hct_test.ts","../palettes/palettes_test.ts","../quantize/quantizer_celebi_test.ts","../scheme/scheme_test.ts","../score/score_test.ts","../utils/utils_test.ts"],"fileInfos":[{"version":"f5c28122bee592cfaf5c72ed7bcc47f453b79778ffa6e301f45d21a0970719d4","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9",{"version":"3f149f903dd20dfeb7c80e228b659f0e436532de772469980dbd00702cc05cc1","affectsGlobalScope":true},{"version":"1272277fe7daa738e555eb6cc45ded42cc2d0f76c07294142283145d49e96186","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"43fb1d932e4966a39a41b464a12a81899d9ae5f2c829063f5571b6b87e6d2f9c","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"0d5f52b3174bee6edb81260ebcd792692c32c81fd55499d69531496f3f2b25e7","affectsGlobalScope":true},{"version":"810627a82ac06fb5166da5ada4159c4ec11978dfbb0805fe804c86406dab8357","affectsGlobalScope":true},{"version":"181f1784c6c10b751631b24ce60c7f78b20665db4550b335be179217bacc0d5f","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"75ec0bdd727d887f1b79ed6619412ea72ba3c81d92d0787ccb64bab18d261f14","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"12a310447c5d23c7d0d5ca2af606e3bd08afda69100166730ab92c62999ebb9d","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"7b4166ad3555848ce759ef8fb9888f0f663886093016e4d932d393d9c7779573","signature":"449e519d95e781723b02bfa74798a055590720dc2a3c01c54754a7deeed4a1d7"},{"version":"96baabc605ab8754dc77c8e849d2b1586107a6bf6019a0b20f5297494bc158f9","signature":"6d4d711be8d7d7832c9aa187bb0536eaf261deaeaf499229cb1c3b961cb364d7"},{"version":"23e5b6b5c38c9f522c4aa17722d0b5474eca79bdd4e36d1e12cc93e355f33e21","signature":"9bddde479af1ecf92aae55fd67d9e65ac650ad78badc6f3e824cc07c8f54bd38"},{"version":"44a2e7344048a6dd2d12d06bb90c8cb45c3eae54bd5108b81676877b7c1297d8","signature":"0d73617322e91b46bfc88085cfd04ac82b6b2b05ef6d925bb980d7e91fb5985d"},{"version":"ff7440292b621426b1f305a9e9d6e00c74341c964a93a80d8ea06e77a87661cc","signature":"8281c8de00292ec1d43e5be45ca5fa8ea0b92f4560ec73fc38ea22fb1fc6f3cd"},{"version":"211e45f396df872302fa714f2bd276b1b8a0718e1ce08a3d3e6c2ed7166db54b","signature":"272b12dc0aea2ca0af17a6578917c554b4f3b9a830a3caa58b45fdb47bf007b3"},{"version":"0f93b50e8c71514fd7a9bb58629c8fcf4103d0d21a63a8b51583f6cdbacd1303","signature":"feddcb86c99c662dada3995cde4e7b3c9b07d0bb05549a30f0f6e4f4c58f854b"},{"version":"7b1cb27e41375dc1eef17b6a499e8b14c0c7148de2f8e8562f5d1934ae66b577","signature":"d3939bd1a9c364e834e243bdcc6f577477d4471f048bf257e9260ed576f4b318"},{"version":"957d5d4c8dd3a57d654a81fc4f3d4817939da9acbba23202fe422d974258e660","signature":"7a95f9606dfa151b891a21847e4aa4b7c815387ef2a203c9d88e00e2f4ec4072"},{"version":"ca57b000478d12e5cc73ea48967e39c35d9de84a0aab527839683a91f51db161","signature":"bbfc0e49b4fe407641ef93a80445c97d6e420d6cbcfa8957342eb331cf34b466","affectsGlobalScope":true},{"version":"e76ba8ea8bcc15b648cb087eb584fbd0d025480da6dd062af6c04bb3cdf42707","signature":"aa60253757dca06c5ad7440eeda6ea3e8dcf77c6fd472ca4eaf835bf0bedbefb"},{"version":"29aab7ca3f6a1bc90f17f6655b038e2ca4a6579aa034533abda531fd070183d8","signature":"33fc864165a556a297c7007272a1984c6ac6a322e55eaf89ce34040c987e6ecd"},{"version":"28976d165efbe39a80e48f81150fd13c9987d143e89ea0e1ccabe3d96156b214","signature":"2c3c597764b1596137d68d17a1f2231bc0227f6ad6c65187010493fa0c3c7919"},{"version":"fb33a71081ed9065c3d88dcdbb136c3050d565f1468fec51f9a09ddfd12546d7","signature":"52bdd61add79b64ddee66187f3f74b0927082ad1ca43d14bda8d10cb836878c8"},{"version":"3de25d00b5a6a2773f2e25fc538340f5c5e77c04591acab539861996fdc2c6a1","signature":"415ce812da7090faa18a6c5ef40d08abdb8fe3e0ef66a489562c5af55d27d185"},{"version":"44da20b5f93f3d31df24a8815a815371cf21c142a36c07892ef6f015c4a6849d","signature":"8656ee4507eb30d60948bbad91be376fa84737343ec34eca1dc1bfe7e1dd4c3c"},{"version":"7b3540fe7456ffd0d799c367140579031d9ca5b8bb5cac11e8dfb0bb0c242ad6","signature":"067c1e5bf56114199925855f966ab9ad5f87ac6791faccb8858c9aea46e754a1"},{"version":"024b3a2968999fc1740351ed07771b7f536d053568c9ab744f89abb5347a571c","signature":"e0b7240f1c7b2794b9d66c3eb6f6815ee90c072b95f7e817839b0097f3110cd0"},{"version":"20fec6d1e6ef358bc6ce4b1f10dc4df1e4568d4d72810c45d375235f0d2978bb","signature":"dc4fe8189c9d765282b925550bba3a18a5f1b5d267bf75403b01ea16a254b03a"},{"version":"c534340ebfbefc5b3ebdecfe8fbfa11750f750bd5e137b960ee3a30f661d62fd","signature":"f06a50dc52a2d6d8f96d8270231a254036c7b3f91cc3d1124c2975a9c03abad4"},{"version":"262ecb6dbed80f09d734a6a0e5dadf65a81b67efa1fdeaf278b2b10672d8b0ac","signature":"6201da90318af2f8c36b96607bc5d0dca9ae0a29d797e9a2a5134c9099a133c9"},{"version":"42ff499db4dfbac37df311acf92fc201ec9a90bdc202d2bfe8d1d9990577a4fa","signature":"4054e08aaff1a1e65a0b6c9e67ae8422392db336bf129eb958755bb4a9612f1e"},{"version":"22f92bf43c39f2239e72c329d6764a241f4e342e8042da638b71b6e34cf41172","affectsGlobalScope":true},{"version":"a32652909e3e7f76200c08c822a0731a0bd62c347c7502e6d30d15a00caf0e7b","signature":"10a5b004dce44ffd8f38b04b5c414c1c7acf6094bfe0a99356e840cbb8e7c130","affectsGlobalScope":true},{"version":"d191d15f5bce7207597e02578fed7f5a64f8dde22d93755dec835dca2a7ae1cf","signature":"23f76887278105162b24dc31419db38a5bbe268047bcfd49f44b9dae1fa6681e"},{"version":"2881ab4afd248edd9899415a7c5e0de814eb7e955413d8057748d4088629690a","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"},{"version":"924fe007b2caf706341e6e83dc11b43a0caddb9f84d1c399bdd8cbde700fd443","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"},{"version":"65efb90911ef725a548b1d0dc52d8cf9ccda2a287b1f118fc87880a403e7c430","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"},{"version":"cb8230f9911d10098098380680d6cc5bbd741e8274e8cb09419fbad706542bc2","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"},{"version":"02ab94f17b12c0fed281b665835bda2b0f8d0e24eb335962b56aaa7963cb031f","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"},{"version":"d2f1c65489876fead180710a0ba43a5f8d1efb95d1d20eced2bbbdfbad2a898e","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"},{"version":"dded4a367f2f7102921eaf05131a11209f40a40768fb318dffe96ff72b12e282","signature":"b558e08a627938b62d87a84d92929452518243163629451c55325d4f04b46fd3"}],"options":{"composite":true,"declaration":true,"experimentalDecorators":true,"importHelpers":true,"inlineSources":true,"module":5,"noFallthroughCasesInSwitch":true,"noImplicitAny":false,"noUnusedLocals":true,"outDir":"./","skipLibCheck":true,"sourceMap":true,"target":4},"fileIdsList":[[22,23,25,27],[28,44,45],[22,23,24],[23,25,26],[23,27,44],[22,23,24,25],[23,24,25,27,44],[22,23],[22,23,24,25,27,28,29,30,33,34,35,36,37,38,39,40,41,42],[27,29],[29,30,44],[27],[23],[33,35],[36,44],[32],[23,34],[30],[37,38,44,45],[22,23,25],[39,44],[22],[23,36,39],[40,44],[28,29,30,37,40,41],[22,44],[44],[24],[25],[29],[29,37]],"referencedMap":[[28,1],[46,2],[25,3],[27,4],[47,5],[26,6],[48,7],[24,8],[43,9],[30,10],[49,11],[29,12],[32,13],[36,14],[50,15],[34,13],[33,16],[35,17],[37,18],[38,18],[51,19],[39,20],[52,21],[23,22],[41,23],[40,13],[45,24],[42,25],[53,26]],"exportedModulesMap":[[46,27],[25,28],[47,27],[26,29],[48,27],[43,9],[30,30],[49,27],[50,27],[37,18],[38,18],[51,27],[52,27],[45,27],[42,31],[53,27]],"semanticDiagnosticsPerFile":[28,46,25,27,47,26,48,24,43,44,5,6,8,7,2,9,10,11,12,13,14,15,16,3,4,20,17,18,19,21,1,30,49,29,32,31,36,50,34,33,35,37,38,51,39,52,23,41,22,40,45,42,53]},"version":"4.7.4"}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/color_utils.d.ts b/node_modules/@material/material-color-utilities/dist/utils/color_utils.d.ts
deleted file mode 100644
index 0d16948..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/color_utils.d.ts
+++ /dev/null
@@ -1,116 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Converts a color from RGB components to ARGB format.
- */
-export declare function argbFromRgb(red: number, green: number, blue: number): number;
-/**
- * Converts a color from linear RGB components to ARGB format.
- */
-export declare function argbFromLinrgb(linrgb: number[]): number;
-/**
- * Returns the alpha component of a color in ARGB format.
- */
-export declare function alphaFromArgb(argb: number): number;
-/**
- * Returns the red component of a color in ARGB format.
- */
-export declare function redFromArgb(argb: number): number;
-/**
- * Returns the green component of a color in ARGB format.
- */
-export declare function greenFromArgb(argb: number): number;
-/**
- * Returns the blue component of a color in ARGB format.
- */
-export declare function blueFromArgb(argb: number): number;
-/**
- * Returns whether a color in ARGB format is opaque.
- */
-export declare function isOpaque(argb: number): boolean;
-/**
- * Converts a color from ARGB to XYZ.
- */
-export declare function argbFromXyz(x: number, y: number, z: number): number;
-/**
- * Converts a color from XYZ to ARGB.
- */
-export declare function xyzFromArgb(argb: number): number[];
-/**
- * Converts a color represented in Lab color space into an ARGB
- * integer.
- */
-export declare function argbFromLab(l: number, a: number, b: number): number;
-/**
- * Converts a color from ARGB representation to L*a*b*
- * representation.
- *
- * @param argb the ARGB representation of a color
- * @return a Lab object representing the color
- */
-export declare function labFromArgb(argb: number): number[];
-/**
- * Converts an L* value to an ARGB representation.
- *
- * @param lstar L* in L*a*b*
- * @return ARGB representation of grayscale color with lightness
- * matching L*
- */
-export declare function argbFromLstar(lstar: number): number;
-/**
- * Computes the L* value of a color in ARGB representation.
- *
- * @param argb ARGB representation of a color
- * @return L*, from L*a*b*, coordinate of the color
- */
-export declare function lstarFromArgb(argb: number): number;
-/**
- * Converts an L* value to a Y value.
- *
- * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.
- *
- * L* measures perceptual luminance, a linear scale. Y in XYZ
- * measures relative luminance, a logarithmic scale.
- *
- * @param lstar L* in L*a*b*
- * @return Y in XYZ
- */
-export declare function yFromLstar(lstar: number): number;
-/**
- * Linearizes an RGB component.
- *
- * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B
- * channel
- * @return 0.0 <= output <= 100.0, color channel converted to
- * linear RGB space
- */
-export declare function linearized(rgbComponent: number): number;
-/**
- * Delinearizes an RGB component.
- *
- * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
- * linear R/G/B channel
- * @return 0 <= output <= 255, color channel converted to regular
- * RGB space
- */
-export declare function delinearized(rgbComponent: number): number;
-/**
- * Returns the standard white point; white on a sunny day.
- *
- * @return The white point
- */
-export declare function whitePointD65(): number[];
diff --git a/node_modules/@material/material-color-utilities/dist/utils/color_utils.js b/node_modules/@material/material-color-utilities/dist/utils/color_utils.js
deleted file mode 100644
index 1b3244d..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/color_utils.js
+++ /dev/null
@@ -1,261 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-// This file is automatically generated. Do not modify it.
-import * as mathUtils from './math_utils';
-/**
- * Color science utilities.
- *
- * Utility methods for color science constants and color space
- * conversions that aren't HCT or CAM16.
- */
-const SRGB_TO_XYZ = [
-    [0.41233895, 0.35762064, 0.18051042],
-    [0.2126, 0.7152, 0.0722],
-    [0.01932141, 0.11916382, 0.95034478],
-];
-const XYZ_TO_SRGB = [
-    [
-        3.2413774792388685,
-        -1.5376652402851851,
-        -0.49885366846268053,
-    ],
-    [
-        -0.9691452513005321,
-        1.8758853451067872,
-        0.04156585616912061,
-    ],
-    [
-        0.05562093689691305,
-        -0.20395524564742123,
-        1.0571799111220335,
-    ],
-];
-const WHITE_POINT_D65 = [95.047, 100.0, 108.883];
-/**
- * Converts a color from RGB components to ARGB format.
- */
-export function argbFromRgb(red, green, blue) {
-    return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>
-        0;
-}
-/**
- * Converts a color from linear RGB components to ARGB format.
- */
-export function argbFromLinrgb(linrgb) {
-    const r = delinearized(linrgb[0]);
-    const g = delinearized(linrgb[1]);
-    const b = delinearized(linrgb[2]);
-    return argbFromRgb(r, g, b);
-}
-/**
- * Returns the alpha component of a color in ARGB format.
- */
-export function alphaFromArgb(argb) {
-    return argb >> 24 & 255;
-}
-/**
- * Returns the red component of a color in ARGB format.
- */
-export function redFromArgb(argb) {
-    return argb >> 16 & 255;
-}
-/**
- * Returns the green component of a color in ARGB format.
- */
-export function greenFromArgb(argb) {
-    return argb >> 8 & 255;
-}
-/**
- * Returns the blue component of a color in ARGB format.
- */
-export function blueFromArgb(argb) {
-    return argb & 255;
-}
-/**
- * Returns whether a color in ARGB format is opaque.
- */
-export function isOpaque(argb) {
-    return alphaFromArgb(argb) >= 255;
-}
-/**
- * Converts a color from ARGB to XYZ.
- */
-export function argbFromXyz(x, y, z) {
-    const matrix = XYZ_TO_SRGB;
-    const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;
-    const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;
-    const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;
-    const r = delinearized(linearR);
-    const g = delinearized(linearG);
-    const b = delinearized(linearB);
-    return argbFromRgb(r, g, b);
-}
-/**
- * Converts a color from XYZ to ARGB.
- */
-export function xyzFromArgb(argb) {
-    const r = linearized(redFromArgb(argb));
-    const g = linearized(greenFromArgb(argb));
-    const b = linearized(blueFromArgb(argb));
-    return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);
-}
-/**
- * Converts a color represented in Lab color space into an ARGB
- * integer.
- */
-export function argbFromLab(l, a, b) {
-    const whitePoint = WHITE_POINT_D65;
-    const fy = (l + 16.0) / 116.0;
-    const fx = a / 500.0 + fy;
-    const fz = fy - b / 200.0;
-    const xNormalized = labInvf(fx);
-    const yNormalized = labInvf(fy);
-    const zNormalized = labInvf(fz);
-    const x = xNormalized * whitePoint[0];
-    const y = yNormalized * whitePoint[1];
-    const z = zNormalized * whitePoint[2];
-    return argbFromXyz(x, y, z);
-}
-/**
- * Converts a color from ARGB representation to L*a*b*
- * representation.
- *
- * @param argb the ARGB representation of a color
- * @return a Lab object representing the color
- */
-export function labFromArgb(argb) {
-    const linearR = linearized(redFromArgb(argb));
-    const linearG = linearized(greenFromArgb(argb));
-    const linearB = linearized(blueFromArgb(argb));
-    const matrix = SRGB_TO_XYZ;
-    const x = matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;
-    const y = matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;
-    const z = matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;
-    const whitePoint = WHITE_POINT_D65;
-    const xNormalized = x / whitePoint[0];
-    const yNormalized = y / whitePoint[1];
-    const zNormalized = z / whitePoint[2];
-    const fx = labF(xNormalized);
-    const fy = labF(yNormalized);
-    const fz = labF(zNormalized);
-    const l = 116.0 * fy - 16;
-    const a = 500.0 * (fx - fy);
-    const b = 200.0 * (fy - fz);
-    return [l, a, b];
-}
-/**
- * Converts an L* value to an ARGB representation.
- *
- * @param lstar L* in L*a*b*
- * @return ARGB representation of grayscale color with lightness
- * matching L*
- */
-export function argbFromLstar(lstar) {
-    const y = yFromLstar(lstar);
-    const component = delinearized(y);
-    return argbFromRgb(component, component, component);
-}
-/**
- * Computes the L* value of a color in ARGB representation.
- *
- * @param argb ARGB representation of a color
- * @return L*, from L*a*b*, coordinate of the color
- */
-export function lstarFromArgb(argb) {
-    const y = xyzFromArgb(argb)[1];
-    return 116.0 * labF(y / 100.0) - 16.0;
-}
-/**
- * Converts an L* value to a Y value.
- *
- * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.
- *
- * L* measures perceptual luminance, a linear scale. Y in XYZ
- * measures relative luminance, a logarithmic scale.
- *
- * @param lstar L* in L*a*b*
- * @return Y in XYZ
- */
-export function yFromLstar(lstar) {
-    return 100.0 * labInvf((lstar + 16.0) / 116.0);
-}
-/**
- * Linearizes an RGB component.
- *
- * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B
- * channel
- * @return 0.0 <= output <= 100.0, color channel converted to
- * linear RGB space
- */
-export function linearized(rgbComponent) {
-    const normalized = rgbComponent / 255.0;
-    if (normalized <= 0.040449936) {
-        return normalized / 12.92 * 100.0;
-    }
-    else {
-        return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;
-    }
-}
-/**
- * Delinearizes an RGB component.
- *
- * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents
- * linear R/G/B channel
- * @return 0 <= output <= 255, color channel converted to regular
- * RGB space
- */
-export function delinearized(rgbComponent) {
-    const normalized = rgbComponent / 100.0;
-    let delinearized = 0.0;
-    if (normalized <= 0.0031308) {
-        delinearized = normalized * 12.92;
-    }
-    else {
-        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;
-    }
-    return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));
-}
-/**
- * Returns the standard white point; white on a sunny day.
- *
- * @return The white point
- */
-export function whitePointD65() {
-    return WHITE_POINT_D65;
-}
-function labF(t) {
-    const e = 216.0 / 24389.0;
-    const kappa = 24389.0 / 27.0;
-    if (t > e) {
-        return Math.pow(t, 1.0 / 3.0);
-    }
-    else {
-        return (kappa * t + 16) / 116;
-    }
-}
-function labInvf(ft) {
-    const e = 216.0 / 24389.0;
-    const kappa = 24389.0 / 27.0;
-    const ft3 = ft * ft * ft;
-    if (ft3 > e) {
-        return ft3;
-    }
-    else {
-        return (116 * ft - 16) / kappa;
-    }
-}
-//# sourceMappingURL=color_utils.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/color_utils.js.map b/node_modules/@material/material-color-utilities/dist/utils/color_utils.js.map
deleted file mode 100644
index d3a77ef..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/color_utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"color_utils.js","sourceRoot":"","sources":["../../utils/color_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from './math_utils';\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nconst SRGB_TO_XYZ = [\n  [0.41233895, 0.35762064, 0.18051042],\n  [0.2126, 0.7152, 0.0722],\n  [0.01932141, 0.11916382, 0.95034478],\n];\n\nconst XYZ_TO_SRGB = [\n  [\n    3.2413774792388685,\n    -1.5376652402851851,\n    -0.49885366846268053,\n  ],\n  [\n    -0.9691452513005321,\n    1.8758853451067872,\n    0.04156585616912061,\n  ],\n  [\n    0.05562093689691305,\n    -0.20395524564742123,\n    1.0571799111220335,\n  ],\n];\n\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red: number, green: number, blue: number): number {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>\n      0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb: number[]): number {\n  const r = delinearized(linrgb[0]);\n  const g = delinearized(linrgb[1]);\n  const b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb: number): number {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb: number): number {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb: number): number {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb: number): number {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb: number): boolean {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x: number, y: number, z: number): number {\n  const matrix = XYZ_TO_SRGB;\n  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  const r = delinearized(linearR);\n  const g = delinearized(linearG);\n  const b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb: number): number[] {\n  const r = linearized(redFromArgb(argb));\n  const g = linearized(greenFromArgb(argb));\n  const b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l: number, a: number, b: number): number {\n  const whitePoint = WHITE_POINT_D65;\n  const fy = (l + 16.0) / 116.0;\n  const fx = a / 500.0 + fy;\n  const fz = fy - b / 200.0;\n  const xNormalized = labInvf(fx);\n  const yNormalized = labInvf(fy);\n  const zNormalized = labInvf(fz);\n  const x = xNormalized * whitePoint[0];\n  const y = yNormalized * whitePoint[1];\n  const z = zNormalized * whitePoint[2];\n  return argbFromXyz(x, y, z);\n}\n\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb: number): number[] {\n  const linearR = linearized(redFromArgb(argb));\n  const linearG = linearized(greenFromArgb(argb));\n  const linearB = linearized(blueFromArgb(argb));\n  const matrix = SRGB_TO_XYZ;\n  const x =\n      matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n  const y =\n      matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n  const z =\n      matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n  const whitePoint = WHITE_POINT_D65;\n  const xNormalized = x / whitePoint[0];\n  const yNormalized = y / whitePoint[1];\n  const zNormalized = z / whitePoint[2];\n  const fx = labF(xNormalized);\n  const fy = labF(yNormalized);\n  const fz = labF(zNormalized);\n  const l = 116.0 * fy - 16;\n  const a = 500.0 * (fx - fy);\n  const b = 200.0 * (fy - fz);\n  return [l, a, b];\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar: number): number {\n  const y = yFromLstar(lstar);\n  const component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb: number): number {\n  const y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar: number): number {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 100.0;\n  let delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65(): number[] {\n  return WHITE_POINT_D65;\n}\n\nfunction labF(t: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\n\nfunction labInvf(ft: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  const ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/image_utils.d.ts b/node_modules/@material/material-color-utilities/dist/utils/image_utils.d.ts
deleted file mode 100644
index 62d5663..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/image_utils.d.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Get the source color from an image.
- *
- * @param image The image element
- * @return Source color - the color most suitable for creating a UI theme
- */
-export declare function sourceColorFromImage(image: HTMLImageElement): Promise<number>;
diff --git a/node_modules/@material/material-color-utilities/dist/utils/image_utils.js b/node_modules/@material/material-color-utilities/dist/utils/image_utils.js
deleted file mode 100644
index 9fc3494..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/image_utils.js
+++ /dev/null
@@ -1,60 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { QuantizerCelebi } from '../quantize/quantizer_celebi';
-import { Score } from '../score/score';
-import { argbFromRgb } from './color_utils';
-/**
- * Get the source color from an image.
- *
- * @param image The image element
- * @return Source color - the color most suitable for creating a UI theme
- */
-export async function sourceColorFromImage(image) {
-    // Convert Image data to Pixel Array
-    const imageBytes = await new Promise((resolve, reject) => {
-        const canvas = document.createElement('canvas');
-        const context = canvas.getContext('2d');
-        if (!context) {
-            return reject(new Error('Could not get canvas context'));
-        }
-        image.onload = () => {
-            canvas.width = image.width;
-            canvas.height = image.height;
-            context.drawImage(image, 0, 0);
-            resolve(context.getImageData(0, 0, image.width, image.height).data);
-        };
-    });
-    // Convert Image data to Pixel Array
-    const pixels = [];
-    for (let i = 0; i < imageBytes.length; i += 4) {
-        const r = imageBytes[i];
-        const g = imageBytes[i + 1];
-        const b = imageBytes[i + 2];
-        const a = imageBytes[i + 3];
-        if (a < 255) {
-            continue;
-        }
-        const argb = argbFromRgb(r, g, b);
-        pixels.push(argb);
-    }
-    // Convert Pixels to Material Colors
-    const result = QuantizerCelebi.quantize(pixels, 128);
-    const ranked = Score.score(result);
-    const top = ranked[0];
-    return top;
-}
-//# sourceMappingURL=image_utils.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/image_utils.js.map b/node_modules/@material/material-color-utilities/dist/utils/image_utils.js.map
deleted file mode 100644
index 3f303f1..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/image_utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"image_utils.js","sourceRoot":"","sources":["../../utils/image_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,eAAe,EAAC,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAC,KAAK,EAAC,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAE1C;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,KAAuB;IAChE,oCAAoC;IACpC,MAAM,UAAU,GAAG,MAAM,IAAI,OAAO,CAAoB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC1E,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;SAC5D;QACD,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;YAClB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YAC3B,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;QACtE,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,oCAAoC;IACpC,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAC7C,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,EAAE;YACX,SAAS;SACV;QACD,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;IAED,oCAAoC;IACpC,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACrD,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QuantizerCelebi} from '../quantize/quantizer_celebi';\nimport {Score} from '../score/score';\n\nimport {argbFromRgb} from './color_utils';\n\n/**\n * Get the source color from an image.\n *\n * @param image The image element\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport async function sourceColorFromImage(image: HTMLImageElement) {\n  // Convert Image data to Pixel Array\n  const imageBytes = await new Promise<Uint8ClampedArray>((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    if (!context) {\n        return reject(new Error('Could not get canvas context'));\n    }\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      resolve(context.getImageData(0, 0, image.width, image.height).data);\n    };\n  });\n\n  // Convert Image data to Pixel Array\n  const pixels: number[] = [];\n  for (let i = 0; i < imageBytes.length; i += 4) {\n    const r = imageBytes[i];\n    const g = imageBytes[i + 1];\n    const b = imageBytes[i + 2];\n    const a = imageBytes[i + 3];\n    if (a < 255) {\n      continue;\n    }\n    const argb = argbFromRgb(r, g, b);\n    pixels.push(argb);\n  }\n\n  // Convert Pixels to Material Colors\n  const result = QuantizerCelebi.quantize(pixels, 128);\n  const ranked = Score.score(result);\n  const top = ranked[0];\n  return top;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/math_utils.d.ts b/node_modules/@material/material-color-utilities/dist/utils/math_utils.d.ts
deleted file mode 100644
index 2330e71..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/math_utils.d.ts
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Utility methods for mathematical operations.
- */
-/**
- * The signum function.
- *
- * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0
- */
-export declare function signum(num: number): number;
-/**
- * The linear interpolation function.
- *
- * @return start if amount = 0 and stop if amount = 1
- */
-export declare function lerp(start: number, stop: number, amount: number): number;
-/**
- * Clamps an integer between two integers.
- *
- * @return input when min <= input <= max, and either min or max
- * otherwise.
- */
-export declare function clampInt(min: number, max: number, input: number): number;
-/**
- * Clamps an integer between two floating-point numbers.
- *
- * @return input when min <= input <= max, and either min or max
- * otherwise.
- */
-export declare function clampDouble(min: number, max: number, input: number): number;
-/**
- * Sanitizes a degree measure as an integer.
- *
- * @return a degree measure between 0 (inclusive) and 360
- * (exclusive).
- */
-export declare function sanitizeDegreesInt(degrees: number): number;
-/**
- * Sanitizes a degree measure as a floating-point number.
- *
- * @return a degree measure between 0.0 (inclusive) and 360.0
- * (exclusive).
- */
-export declare function sanitizeDegreesDouble(degrees: number): number;
-/**
- * Sign of direction change needed to travel from one angle to
- * another.
- *
- * For angles that are 180 degrees apart from each other, both
- * directions have the same travel distance, so either direction is
- * shortest. The value 1.0 is returned in this case.
- *
- * @param from The angle travel starts from, in degrees.
- * @param to The angle travel ends at, in degrees.
- * @return -1 if decreasing from leads to the shortest travel
- * distance, 1 if increasing from leads to the shortest travel
- * distance.
- */
-export declare function rotationDirection(from: number, to: number): number;
-/**
- * Distance of two points on a circle, represented using degrees.
- */
-export declare function differenceDegrees(a: number, b: number): number;
-/**
- * Multiplies a 1x3 row vector with a 3x3 matrix.
- */
-export declare function matrixMultiply(row: number[], matrix: number[][]): number[];
diff --git a/node_modules/@material/material-color-utilities/dist/utils/math_utils.js b/node_modules/@material/material-color-utilities/dist/utils/math_utils.js
deleted file mode 100644
index 6eb3630..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/math_utils.js
+++ /dev/null
@@ -1,134 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-// This file is automatically generated. Do not modify it.
-/**
- * Utility methods for mathematical operations.
- */
-/**
- * The signum function.
- *
- * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0
- */
-export function signum(num) {
-    if (num < 0) {
-        return -1;
-    }
-    else if (num === 0) {
-        return 0;
-    }
-    else {
-        return 1;
-    }
-}
-/**
- * The linear interpolation function.
- *
- * @return start if amount = 0 and stop if amount = 1
- */
-export function lerp(start, stop, amount) {
-    return (1.0 - amount) * start + amount * stop;
-}
-/**
- * Clamps an integer between two integers.
- *
- * @return input when min <= input <= max, and either min or max
- * otherwise.
- */
-export function clampInt(min, max, input) {
-    if (input < min) {
-        return min;
-    }
-    else if (input > max) {
-        return max;
-    }
-    return input;
-}
-/**
- * Clamps an integer between two floating-point numbers.
- *
- * @return input when min <= input <= max, and either min or max
- * otherwise.
- */
-export function clampDouble(min, max, input) {
-    if (input < min) {
-        return min;
-    }
-    else if (input > max) {
-        return max;
-    }
-    return input;
-}
-/**
- * Sanitizes a degree measure as an integer.
- *
- * @return a degree measure between 0 (inclusive) and 360
- * (exclusive).
- */
-export function sanitizeDegreesInt(degrees) {
-    degrees = degrees % 360;
-    if (degrees < 0) {
-        degrees = degrees + 360;
-    }
-    return degrees;
-}
-/**
- * Sanitizes a degree measure as a floating-point number.
- *
- * @return a degree measure between 0.0 (inclusive) and 360.0
- * (exclusive).
- */
-export function sanitizeDegreesDouble(degrees) {
-    degrees = degrees % 360.0;
-    if (degrees < 0) {
-        degrees = degrees + 360.0;
-    }
-    return degrees;
-}
-/**
- * Sign of direction change needed to travel from one angle to
- * another.
- *
- * For angles that are 180 degrees apart from each other, both
- * directions have the same travel distance, so either direction is
- * shortest. The value 1.0 is returned in this case.
- *
- * @param from The angle travel starts from, in degrees.
- * @param to The angle travel ends at, in degrees.
- * @return -1 if decreasing from leads to the shortest travel
- * distance, 1 if increasing from leads to the shortest travel
- * distance.
- */
-export function rotationDirection(from, to) {
-    const increasingDifference = sanitizeDegreesDouble(to - from);
-    return increasingDifference <= 180.0 ? 1.0 : -1.0;
-}
-/**
- * Distance of two points on a circle, represented using degrees.
- */
-export function differenceDegrees(a, b) {
-    return 180.0 - Math.abs(Math.abs(a - b) - 180.0);
-}
-/**
- * Multiplies a 1x3 row vector with a 3x3 matrix.
- */
-export function matrixMultiply(row, matrix) {
-    const a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];
-    const b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];
-    const c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];
-    return [a, b, c];
-}
-//# sourceMappingURL=math_utils.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/math_utils.js.map b/node_modules/@material/material-color-utilities/dist/utils/math_utils.js.map
deleted file mode 100644
index 0a76d46..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/math_utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"math_utils.js","sourceRoot":"","sources":["../../utils/math_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\n/**\n * Utility methods for mathematical operations.\n */\n\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num: number): number {\n  if (num < 0) {\n    return -1;\n  } else if (num === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start: number, stop: number, amount: number): number {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees: number): number {\n  degrees = degrees % 360;\n  if (degrees < 0) {\n    degrees = degrees + 360;\n  }\n  return degrees;\n}\n\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees: number): number {\n  degrees = degrees % 360.0;\n  if (degrees < 0) {\n    degrees = degrees + 360.0;\n  }\n  return degrees;\n}\n\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from: number, to: number): number {\n  const increasingDifference = sanitizeDegreesDouble(to - from);\n  return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a: number, b: number): number {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row: number[], matrix: number[][]): number[] {\n  const a =\n      row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n  const b =\n      row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n  const c =\n      row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n  return [a, b, c];\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/string_utils.d.ts b/node_modules/@material/material-color-utilities/dist/utils/string_utils.d.ts
deleted file mode 100644
index 0b3ddc9..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/string_utils.d.ts
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Utility methods for hexadecimal representations of colors.
- */
-/**
- * @param argb ARGB representation of a color.
- * @return Hex string representing color, ex. #ff0000 for red.
- */
-export declare const hexFromArgb: (argb: number) => string;
-/**
- * @param hex String representing color as hex code. Accepts strings with or
- *     without leading #, and string representing the color using 3, 6, or 8
- *     hex characters.
- * @return ARGB representation of color.
- */
-export declare const argbFromHex: (hex: string) => number;
diff --git a/node_modules/@material/material-color-utilities/dist/utils/string_utils.js b/node_modules/@material/material-color-utilities/dist/utils/string_utils.js
deleted file mode 100644
index 0cc08e9..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/string_utils.js
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as colorUtils from './color_utils';
-/**
- * Utility methods for hexadecimal representations of colors.
- */
-/**
- * @param argb ARGB representation of a color.
- * @return Hex string representing color, ex. #ff0000 for red.
- */
-export const hexFromArgb = (argb) => {
-    const r = colorUtils.redFromArgb(argb);
-    const g = colorUtils.greenFromArgb(argb);
-    const b = colorUtils.blueFromArgb(argb);
-    const outParts = [r.toString(16), g.toString(16), b.toString(16)];
-    // Pad single-digit output values
-    for (const [i, part] of outParts.entries()) {
-        if (part.length === 1) {
-            outParts[i] = '0' + part;
-        }
-    }
-    return '#' + outParts.join('');
-};
-/**
- * @param hex String representing color as hex code. Accepts strings with or
- *     without leading #, and string representing the color using 3, 6, or 8
- *     hex characters.
- * @return ARGB representation of color.
- */
-export const argbFromHex = (hex) => {
-    hex = hex.replace('#', '');
-    const isThree = hex.length === 3;
-    const isSix = hex.length === 6;
-    const isEight = hex.length === 8;
-    if (!isThree && !isSix && !isEight) {
-        throw new Error('unexpected hex ' + hex);
-    }
-    let r = 0;
-    let g = 0;
-    let b = 0;
-    if (isThree) {
-        r = parseIntHex(hex.slice(0, 1).repeat(2));
-        g = parseIntHex(hex.slice(1, 2).repeat(2));
-        b = parseIntHex(hex.slice(2, 3).repeat(2));
-    }
-    else if (isSix) {
-        r = parseIntHex(hex.slice(0, 2));
-        g = parseIntHex(hex.slice(2, 4));
-        b = parseIntHex(hex.slice(4, 6));
-    }
-    else if (isEight) {
-        r = parseIntHex(hex.slice(2, 4));
-        g = parseIntHex(hex.slice(4, 6));
-        b = parseIntHex(hex.slice(6, 8));
-    }
-    return (((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>
-        0);
-};
-function parseIntHex(value) {
-    // tslint:disable-next-line:ban
-    return parseInt(value, 16);
-}
-//# sourceMappingURL=string_utils.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/string_utils.js.map b/node_modules/@material/material-color-utilities/dist/utils/string_utils.js.map
deleted file mode 100644
index 8b1e50e..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/string_utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"string_utils.js","sourceRoot":"","sources":["../../utils/string_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,UAAU,MAAM,eAAe,CAAC;AAE5C;;GAEG;AAEH;;;GAGG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE;IAC1C,MAAM,CAAC,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,CAAC,GAAG,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAElE,iCAAiC;IACjC,KAAK,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;QAC1C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;SAC1B;KACF;IAED,OAAO,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,GAAW,EAAE,EAAE;IACzC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC3B,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;IACjC,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;IAC/B,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC;KAC1C;IACD,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,OAAO,EAAE;QACX,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5C;SAAM,IAAI,KAAK,EAAE;QAChB,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KAClC;SAAM,IAAI,OAAO,EAAE;QAClB,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KAClC;IAED,OAAO,CACH,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,SAAS,WAAW,CAAC,KAAa;IAChC,+BAA+B;IAC/B,OAAO,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as colorUtils from './color_utils';\n\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport const hexFromArgb = (argb: number) => {\n  const r = colorUtils.redFromArgb(argb);\n  const g = colorUtils.greenFromArgb(argb);\n  const b = colorUtils.blueFromArgb(argb);\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n\n  // Pad single-digit output values\n  for (const [i, part] of outParts.entries()) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  }\n\n  return '#' + outParts.join('');\n};\n\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport const argbFromHex = (hex: string) => {\n  hex = hex.replace('#', '');\n  const isThree = hex.length === 3;\n  const isSix = hex.length === 6;\n  const isEight = hex.length === 8;\n  if (!isThree && !isSix && !isEight) {\n    throw new Error('unexpected hex ' + hex);\n  }\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (isThree) {\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\n  } else if (isSix) {\n    r = parseIntHex(hex.slice(0, 2));\n    g = parseIntHex(hex.slice(2, 4));\n    b = parseIntHex(hex.slice(4, 6));\n  } else if (isEight) {\n    r = parseIntHex(hex.slice(2, 4));\n    g = parseIntHex(hex.slice(4, 6));\n    b = parseIntHex(hex.slice(6, 8));\n  }\n\n  return (\n      ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\n      0);\n};\n\nfunction parseIntHex(value: string) {\n  // tslint:disable-next-line:ban\n  return parseInt(value, 16);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/test_utils.d.ts b/node_modules/@material/material-color-utilities/dist/utils/test_utils.d.ts
deleted file mode 100644
index fb62833..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/test_utils.d.ts
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-declare global {
-    namespace jasmine {
-        interface Matchers<T> {
-            matchesColor(expected: number): boolean;
-        }
-    }
-}
-/**
- * Exports a matcher called `matchesColor` that takes two numbers, and logs
- * the equivalent hex codes on failure.
- *
- * To use, add to your test file:
- *  beforeEach(() => {
- *    jasmine.addMatchers(customMatchers);
- *  });
- *
- * Then it can be used as a standard matcher:
- *  expect(scheme.onSurface).matchesColor(0xff000000);
- */
-export declare const customMatchers: jasmine.CustomMatcherFactories;
diff --git a/node_modules/@material/material-color-utilities/dist/utils/test_utils.js b/node_modules/@material/material-color-utilities/dist/utils/test_utils.js
deleted file mode 100644
index 5457e21..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/test_utils.js
+++ /dev/null
@@ -1,44 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import { hexFromArgb } from './string_utils';
-/**
- * Exports a matcher called `matchesColor` that takes two numbers, and logs
- * the equivalent hex codes on failure.
- *
- * To use, add to your test file:
- *  beforeEach(() => {
- *    jasmine.addMatchers(customMatchers);
- *  });
- *
- * Then it can be used as a standard matcher:
- *  expect(scheme.onSurface).matchesColor(0xff000000);
- */
-export const customMatchers = {
-    matchesColor(util, customEqualityTesters) {
-        return {
-            compare(actual, expected) {
-                const pass = util.equals(actual, expected);
-                return {
-                    pass,
-                    message: `Expected color ${hexFromArgb(actual)} to ${pass ? 'NOT' : ''} match: ${hexFromArgb(expected)}`,
-                };
-            },
-        };
-    },
-};
-//# sourceMappingURL=test_utils.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/test_utils.js.map b/node_modules/@material/material-color-utilities/dist/utils/test_utils.js.map
deleted file mode 100644
index 9fd930a..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/test_utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"test_utils.js","sourceRoot":"","sources":["../../utils/test_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,SAAS,CAAC;AAEjB,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAU3C;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,cAAc,GAAmC;IAC5D,YAAY,CACR,IAA0B,EAC1B,qBAA8D;QAChE,OAAO;YACL,OAAO,CAAC,MAAc,EAAE,QAAgB;gBACtC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAC3C,OAAO;oBACL,IAAI;oBACJ,OAAO,EAAE,kBAAkB,WAAW,CAAC,MAAM,CAAC,OAC1C,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,WAAW,CAAC,QAAQ,CAAC,EAAE;iBACxD,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport {hexFromArgb} from './string_utils';\n\ndeclare global {\n  namespace jasmine {\n    interface Matchers<T> {\n      matchesColor(expected: number): boolean;\n    }\n  }\n}\n\n/**\n * Exports a matcher called `matchesColor` that takes two numbers, and logs\n * the equivalent hex codes on failure.\n *\n * To use, add to your test file:\n *  beforeEach(() => {\n *    jasmine.addMatchers(customMatchers);\n *  });\n *\n * Then it can be used as a standard matcher:\n *  expect(scheme.onSurface).matchesColor(0xff000000);\n */\nexport const customMatchers: jasmine.CustomMatcherFactories = {\n  matchesColor(\n      util: jasmine.MatchersUtil,\n      customEqualityTesters: readonly jasmine.CustomEqualityTester[]) {\n    return {\n      compare(actual: number, expected: number) {\n        const pass = util.equals(actual, expected);\n        return {\n          pass,\n          message: `Expected color ${hexFromArgb(actual)} to ${\n              pass ? 'NOT' : ''} match: ${hexFromArgb(expected)}`,\n        };\n      },\n    };\n  },\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/theme_utils.d.ts b/node_modules/@material/material-color-utilities/dist/utils/theme_utils.d.ts
deleted file mode 100644
index 5f6b89f..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/theme_utils.d.ts
+++ /dev/null
@@ -1,101 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { TonalPalette } from '../palettes/tonal_palette';
-import { Scheme } from '../scheme/scheme';
-/**
- * Custom color used to pair with a theme
- */
-export interface CustomColor {
-    value: number;
-    name: string;
-    blend: boolean;
-}
-/**
- * Color group
- */
-export interface ColorGroup {
-    color: number;
-    onColor: number;
-    colorContainer: number;
-    onColorContainer: number;
-}
-/**
- * Custom Color Group
- */
-export interface CustomColorGroup {
-    color: CustomColor;
-    value: number;
-    light: ColorGroup;
-    dark: ColorGroup;
-}
-/**
- * Theme
- */
-export interface Theme {
-    source: number;
-    schemes: {
-        light: Scheme;
-        dark: Scheme;
-    };
-    palettes: {
-        primary: TonalPalette;
-        secondary: TonalPalette;
-        tertiary: TonalPalette;
-        neutral: TonalPalette;
-        neutralVariant: TonalPalette;
-        error: TonalPalette;
-    };
-    customColors: CustomColorGroup[];
-}
-/**
- * Generate a theme from a source color
- *
- * @param source Source color
- * @param customColors Array of custom colors
- * @return Theme object
- */
-export declare function themeFromSourceColor(source: number, customColors?: CustomColor[]): Theme;
-/**
- * Generate a theme from an image source
- *
- * @param image Image element
- * @param customColors Array of custom colors
- * @return Theme object
- */
-export declare function themeFromImage(image: HTMLImageElement, customColors?: CustomColor[]): Promise<Theme>;
-/**
- * Generate custom color group from source and target color
- *
- * @param source Source color
- * @param color Custom color
- * @return Custom color group
- *
- * @link https://m3.material.io/styles/color/the-color-system/color-roles
- */
-export declare function customColor(source: number, color: CustomColor): CustomColorGroup;
-/**
- * Apply a theme to an element
- *
- * @param theme Theme object
- * @param options Options
- */
-export declare function applyTheme(theme: Theme, options?: {
-    dark?: boolean;
-    target?: HTMLElement;
-    brightnessSuffix?: boolean;
-    paletteTones?: number[];
-}): void;
diff --git a/node_modules/@material/material-color-utilities/dist/utils/theme_utils.js b/node_modules/@material/material-color-utilities/dist/utils/theme_utils.js
deleted file mode 100644
index 07cfe4e..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/theme_utils.js
+++ /dev/null
@@ -1,129 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Blend } from '../blend/blend';
-import { CorePalette } from '../palettes/core_palette';
-import { Scheme } from '../scheme/scheme';
-import { sourceColorFromImage } from './image_utils';
-import { hexFromArgb } from './string_utils';
-/**
- * Generate a theme from a source color
- *
- * @param source Source color
- * @param customColors Array of custom colors
- * @return Theme object
- */
-export function themeFromSourceColor(source, customColors = []) {
-    const palette = CorePalette.of(source);
-    return {
-        source,
-        schemes: {
-            light: Scheme.light(source),
-            dark: Scheme.dark(source),
-        },
-        palettes: {
-            primary: palette.a1,
-            secondary: palette.a2,
-            tertiary: palette.a3,
-            neutral: palette.n1,
-            neutralVariant: palette.n2,
-            error: palette.error,
-        },
-        customColors: customColors.map((c) => customColor(source, c)),
-    };
-}
-/**
- * Generate a theme from an image source
- *
- * @param image Image element
- * @param customColors Array of custom colors
- * @return Theme object
- */
-export async function themeFromImage(image, customColors = []) {
-    const source = await sourceColorFromImage(image);
-    return themeFromSourceColor(source, customColors);
-}
-/**
- * Generate custom color group from source and target color
- *
- * @param source Source color
- * @param color Custom color
- * @return Custom color group
- *
- * @link https://m3.material.io/styles/color/the-color-system/color-roles
- */
-export function customColor(source, color) {
-    let value = color.value;
-    const from = value;
-    const to = source;
-    if (color.blend) {
-        value = Blend.harmonize(from, to);
-    }
-    const palette = CorePalette.of(value);
-    const tones = palette.a1;
-    return {
-        color,
-        value,
-        light: {
-            color: tones.tone(40),
-            onColor: tones.tone(100),
-            colorContainer: tones.tone(90),
-            onColorContainer: tones.tone(10),
-        },
-        dark: {
-            color: tones.tone(80),
-            onColor: tones.tone(20),
-            colorContainer: tones.tone(30),
-            onColorContainer: tones.tone(90),
-        },
-    };
-}
-/**
- * Apply a theme to an element
- *
- * @param theme Theme object
- * @param options Options
- */
-export function applyTheme(theme, options) {
-    var _a, _b;
-    const target = (options === null || options === void 0 ? void 0 : options.target) || document.body;
-    const isDark = (_a = options === null || options === void 0 ? void 0 : options.dark) !== null && _a !== void 0 ? _a : false;
-    const scheme = isDark ? theme.schemes.dark : theme.schemes.light;
-    setSchemeProperties(target, scheme);
-    if (options === null || options === void 0 ? void 0 : options.brightnessSuffix) {
-        setSchemeProperties(target, theme.schemes.dark, '-dark');
-        setSchemeProperties(target, theme.schemes.light, '-light');
-    }
-    if (options === null || options === void 0 ? void 0 : options.paletteTones) {
-        const tones = (_b = options === null || options === void 0 ? void 0 : options.paletteTones) !== null && _b !== void 0 ? _b : [];
-        for (const [key, palette] of Object.entries(theme.palettes)) {
-            const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
-            for (const tone of tones) {
-                const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;
-                const color = hexFromArgb(palette.tone(tone));
-                target.style.setProperty(token, color);
-            }
-        }
-    }
-}
-function setSchemeProperties(target, scheme, suffix = '') {
-    for (const [key, value] of Object.entries(scheme.toJSON())) {
-        const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
-        const color = hexFromArgb(value);
-        target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);
-    }
-}
-//# sourceMappingURL=theme_utils.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/theme_utils.js.map b/node_modules/@material/material-color-utilities/dist/utils/theme_utils.js.map
deleted file mode 100644
index d5226ba..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/theme_utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"theme_utils.js","sourceRoot":"","sources":["../../utils/theme_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Blend} from '../blend/blend';\nimport {CorePalette} from '../palettes/core_palette';\nimport {TonalPalette} from '../palettes/tonal_palette';\nimport {Scheme} from '../scheme/scheme';\n\nimport {sourceColorFromImage} from './image_utils';\nimport {hexFromArgb} from './string_utils';\n\n/**\n * Custom color used to pair with a theme\n */\nexport interface CustomColor {\n  value: number;\n  name: string;\n  blend: boolean;\n}\n\n/**\n * Color group\n */\nexport interface ColorGroup {\n  color: number;\n  onColor: number;\n  colorContainer: number;\n  onColorContainer: number;\n}\n\n/**\n * Custom Color Group\n */\nexport interface CustomColorGroup {\n  color: CustomColor;\n  value: number;\n  light: ColorGroup;\n  dark: ColorGroup;\n}\n\n/**\n * Theme\n */\nexport interface Theme {\n  source: number;\n  schemes: {light: Scheme; dark: Scheme;};\n  palettes: {\n    primary: TonalPalette; secondary: TonalPalette; tertiary: TonalPalette;\n    neutral: TonalPalette;\n    neutralVariant: TonalPalette;\n    error: TonalPalette;\n  };\n  customColors: CustomColorGroup[];\n}\n\n/**\n * Generate a theme from a source color\n *\n * @param source Source color\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport function themeFromSourceColor(\n    source: number, customColors: CustomColor[] = []): Theme {\n  const palette = CorePalette.of(source);\n  return {\n    source,\n    schemes: {\n      light: Scheme.light(source),\n      dark: Scheme.dark(source),\n    },\n    palettes: {\n      primary: palette.a1,\n      secondary: palette.a2,\n      tertiary: palette.a3,\n      neutral: palette.n1,\n      neutralVariant: palette.n2,\n      error: palette.error,\n    },\n    customColors: customColors.map((c) => customColor(source, c)),\n  };\n}\n\n/**\n * Generate a theme from an image source\n *\n * @param image Image element\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport async function themeFromImage(\n    image: HTMLImageElement, customColors: CustomColor[] = []) {\n  const source = await sourceColorFromImage(image);\n  return themeFromSourceColor(source, customColors);\n}\n\n/**\n * Generate custom color group from source and target color\n *\n * @param source Source color\n * @param color Custom color\n * @return Custom color group\n *\n * @link https://m3.material.io/styles/color/the-color-system/color-roles\n */\nexport function customColor(\n    source: number, color: CustomColor): CustomColorGroup {\n  let value = color.value;\n  const from = value;\n  const to = source;\n  if (color.blend) {\n    value = Blend.harmonize(from, to);\n  }\n  const palette = CorePalette.of(value);\n  const tones = palette.a1;\n  return {\n    color,\n    value,\n    light: {\n      color: tones.tone(40),\n      onColor: tones.tone(100),\n      colorContainer: tones.tone(90),\n      onColorContainer: tones.tone(10),\n    },\n    dark: {\n      color: tones.tone(80),\n      onColor: tones.tone(20),\n      colorContainer: tones.tone(30),\n      onColorContainer: tones.tone(90),\n    },\n  };\n}\n\n/**\n * Apply a theme to an element\n *\n * @param theme Theme object\n * @param options Options\n */\nexport function applyTheme(theme: Theme, options?: {\n  dark?: boolean,\n  target?: HTMLElement,\n  brightnessSuffix?: boolean,\n  paletteTones?: number[],\n}) {\n  const target = options?.target || document.body;\n  const isDark = options?.dark ?? false;\n  const scheme = isDark ? theme.schemes.dark : theme.schemes.light;\n  setSchemeProperties(target, scheme);\n  if (options?.brightnessSuffix) {\n    setSchemeProperties(target, theme.schemes.dark, '-dark');\n    setSchemeProperties(target, theme.schemes.light, '-light');\n  }\n  if (options?.paletteTones) {\n    const tones = options?.paletteTones ?? [];\n    for (const [key, palette] of Object.entries(theme.palettes)) {\n      const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n      for (const tone of tones) {\n        const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;\n        const color = hexFromArgb(palette.tone(tone));\n        target.style.setProperty(token, color);\n      }\n    }\n  }\n}\n\nfunction setSchemeProperties(\n    target: HTMLElement,\n    scheme: Scheme,\n    suffix: string = '',\n) {\n  for (const [key, value] of Object.entries(scheme.toJSON())) {\n    const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const color = hexFromArgb(value);\n    target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);\n  }\n}"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/utils_test.d.ts b/node_modules/@material/material-color-utilities/dist/utils/utils_test.d.ts
deleted file mode 100644
index 0a4f9d9..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/utils_test.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
diff --git a/node_modules/@material/material-color-utilities/dist/utils/utils_test.js b/node_modules/@material/material-color-utilities/dist/utils/utils_test.js
deleted file mode 100644
index cc56fd0..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/utils_test.js
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * @license
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import 'jasmine';
-import * as mathUtils from './math_utils';
-function rotationDirection(from, to) {
-    const a = to - from;
-    const b = to - from + 360.0;
-    const c = to - from - 360.0;
-    const aAbs = Math.abs(a);
-    const bAbs = Math.abs(b);
-    const cAbs = Math.abs(c);
-    if (aAbs <= bAbs && aAbs <= cAbs) {
-        return a >= 0.0 ? 1.0 : -1.0;
-    }
-    else if (bAbs <= aAbs && bAbs <= cAbs) {
-        return b >= 0.0 ? 1.0 : -1.0;
-    }
-    else {
-        return c >= 0.0 ? 1.0 : -1.0;
-    }
-}
-describe('rotationDirection', () => {
-    it('is identical to the original implementation', () => {
-        for (let from = 0.0; from < 360.0; from += 15.0) {
-            for (let to = 7.5; to < 360.0; to += 15.0) {
-                const expectedAnswer = rotationDirection(from, to);
-                const actualAnswer = mathUtils.rotationDirection(from, to);
-                expect(actualAnswer).toBe(expectedAnswer);
-                expect(Math.abs(actualAnswer)).toBe(1.0);
-            }
-        }
-    });
-});
-//# sourceMappingURL=utils_test.js.map
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/dist/utils/utils_test.js.map b/node_modules/@material/material-color-utilities/dist/utils/utils_test.js.map
deleted file mode 100644
index fe688bc..0000000
--- a/node_modules/@material/material-color-utilities/dist/utils/utils_test.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils_test.js","sourceRoot":"","sources":["../../utils/utils_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,SAAS,CAAC;AAEjB,OAAO,KAAK,SAAS,MAAM,cAAc,CAAC;AAE1C,SAAS,iBAAiB,CAAC,IAAY,EAAE,EAAU;IACjD,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IACpB,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC;IAC5B,MAAM,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC;IAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;QAChC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KAC9B;SAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;QACvC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KAC9B;SAAM;QACL,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;KAC9B;AACH,CAAC;AAED,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,KAAK,IAAI,IAAI,GAAG,GAAG,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,IAAI,IAAI,EAAE;YAC/C,KAAK,IAAI,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,IAAI,IAAI,EAAE;gBACzC,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACnD,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC3D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC1C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC1C;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'jasmine';\n\nimport * as mathUtils from './math_utils';\n\nfunction rotationDirection(from: number, to: number): number {\n  const a = to - from;\n  const b = to - from + 360.0;\n  const c = to - from - 360.0;\n  const aAbs = Math.abs(a);\n  const bAbs = Math.abs(b);\n  const cAbs = Math.abs(c);\n  if (aAbs <= bAbs && aAbs <= cAbs) {\n    return a >= 0.0 ? 1.0 : -1.0;\n  } else if (bAbs <= aAbs && bAbs <= cAbs) {\n    return b >= 0.0 ? 1.0 : -1.0;\n  } else {\n    return c >= 0.0 ? 1.0 : -1.0;\n  }\n}\n\ndescribe('rotationDirection', () => {\n  it('is identical to the original implementation', () => {\n    for (let from = 0.0; from < 360.0; from += 15.0) {\n      for (let to = 7.5; to < 360.0; to += 15.0) {\n        const expectedAnswer = rotationDirection(from, to);\n        const actualAnswer = mathUtils.rotationDirection(from, to);\n        expect(actualAnswer).toBe(expectedAnswer);\n        expect(Math.abs(actualAnswer)).toBe(1.0);\n      }\n    }\n  });\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@material/material-color-utilities/package.json b/node_modules/@material/material-color-utilities/package.json
index 04534dd..d0828af 100644
--- a/node_modules/@material/material-color-utilities/package.json
+++ b/node_modules/@material/material-color-utilities/package.json
@@ -13,32 +13,44 @@
   ],
   "repository": {
     "type": "git",
-    "url": "https://github.com/material-foundation/material-color-utilities.git",
+    "url": "https://github.com/material/material-color-utilities.git",
     "directory": "typescript"
   },
-  "author": "Material Eng",
   "license": "Apache-2.0",
   "bugs": {
-    "url": "https://github.com/material-foundation/material-color-utilities/issues"
+    "url": "https://github.com/material/material-color-utilities/issues"
+  },
+  "homepage": "https://github.com/material/material-color-utilities/tree/main/typescript",
+  "main": "./dist/index.cjs",
+  "module": "./dist/index.mjs",
+  "types": "./dist/index.d.ts",
+  "exports": {
+    ".": {
+      "import": "./dist/index.mjs",
+      "require": "./dist/index.cjs",
+      "types": "./dist/index.d.ts"
+    }
   },
-  "homepage": "https://github.com/material-foundation/material-color-utilities/tree/main/typescript",
-  "main": "./dist/index.js",
-  "module": "./dist/index.js",
-  "types": "dist/index.d.ts",
   "files": [
-    "dist/**/*"
+    "dist"
   ],
+  "unbuild": {
+    "entries": [
+      "./index"
+    ],
+    "clean": true,
+    "declaration": true,
+    "rollup": {
+      "emitCJS": true
+    }
+  },
   "scripts": {
-    "build": "tsc",
-    "watch": "tsc -w",
-    "prepublishOnly": "npm run build"
+    "build": "unbuild",
+    "watch": "unbuild --stub"
   },
   "devDependencies": {
-    "@types/jasmine": "^3.10.3",
+    "@types/jasmine": "^3.10.6",
     "jasmine": "^4.0.2",
-    "typescript": "^4.5.5"
-  },
-  "publishConfig":{
-    "registry":"https://wombat-dressing-room.appspot.com"
+    "unbuild": "^0.8.8"
   }
 }
\ No newline at end of file
